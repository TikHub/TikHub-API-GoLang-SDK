/*
 * TikHub Private API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tikhub

import (
	_context "context"
	"github.com/antihax/optional"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// KuaishouAppAPIApiService KuaishouAppAPIApi service
type KuaishouAppAPIApiService service

// KuaishouAppAPIApiFetchBrandTopListApiV1KuaishouAppFetchBrandTopListGetOpts Optional parameters for the method 'FetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet'
type KuaishouAppAPIApiFetchBrandTopListApiV1KuaishouAppFetchBrandTopListGetOpts struct {
	SubTabId   optional.Int32
	SubTabName optional.String
}

/*
FetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet 快手品牌榜单/Kuaishou brand top list
# [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId &#x3D; 0     - subTabName &#x3D; None - 品牌榜单热门服饰榜对应参数：     - subTabId &#x3D; 131     - subTabName &#x3D; \&quot;服饰\&quot; - 品牌榜单热门汽车榜对应参数：     - subTabId &#x3D; 1     - subTabName &#x3D; \&quot;汽车\&quot; - 品牌榜单热门游戏榜对应参数：     - subTabId &#x3D; 25     - subTabName &#x3D; \&quot;游戏\&quot; - 品牌榜单热门医疗健康榜对应参数：     - subTabId &#x3D; 24     - subTabName &#x3D; \&quot;医疗健康\&quot; - 品牌榜单热门3C数码榜对应参数：     - subTabId &#x3D; 130     - subTabName &#x3D; \&quot;3C数码\&quot; - 品牌榜单热门手机榜对应参数：     - subTabId &#x3D; 128     - subTabName &#x3D; \&quot;手机\&quot; - 品牌榜单热门家电榜对应参数：     - subTabId &#x3D; 11     - subTabName &#x3D; \&quot;家电\&quot; - 品牌榜单热门母婴榜对应参数：     - subTabId &#x3D; 4     - subTabName &#x3D; \&quot;母婴\&quot; - 品牌榜单热门食品饮料榜对应参数：     - subTabId &#x3D; 2     - subTabName &#x3D; \&quot;食品饮料\&quot;  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId &#x3D; 0     - subTabName &#x3D; None - Corresponding parameters for the brand hot clothing list:     - subTabId &#x3D; 131     - subTabName &#x3D; \&quot;Clothing\&quot; - Corresponding parameters for the brand hot car list:     - subTabId &#x3D; 1     - subTabName &#x3D; \&quot;Car\&quot; - Corresponding parameters for the brand hot game list:     - subTabId &#x3D; 25     - subTabName &#x3D; \&quot;Game\&quot; - Corresponding parameters for the brand hot medical health list:     - subTabId &#x3D; 24     - subTabName &#x3D; \&quot;Medical Health\&quot; - Corresponding parameters for the brand hot 3C digital list:     - subTabId &#x3D; 130     - subTabName &#x3D; \&quot;3C Digital\&quot; - Corresponding parameters for the brand hot mobile phone list:     - subTabId &#x3D; 128     - subTabName &#x3D; \&quot;Mobile Phone\&quot; - Corresponding parameters for the brand hot home appliance list:     - subTabId &#x3D; 11     - subTabName &#x3D; \&quot;Home Appliance\&quot; - Corresponding parameters for the brand hot maternal and child list:     - subTabId &#x3D; 4     - subTabName &#x3D; \&quot;Maternal and Child\&quot; - Corresponding parameters for the brand hot food and beverage list:     - subTabId &#x3D; 2     - subTabName &#x3D; \&quot;Food and Beverage\&quot;   ### Returns: - List data  # [示例/Example] subTabId &#x3D; 0 subTabName &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *KuaishouAppAPIApiFetchBrandTopListApiV1KuaishouAppFetchBrandTopListGetOpts - Optional Parameters:
  - @param "SubTabId" (optional.Int32) -
  - @param "SubTabName" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet(ctx _context.Context, localVarOptionals *KuaishouAppAPIApiFetchBrandTopListApiV1KuaishouAppFetchBrandTopListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_brand_top_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.SubTabId.IsSet() {
		localVarQueryParams.Add("subTabId", parameterToString(localVarOptionals.SubTabId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubTabName.IsSet() {
		localVarQueryParams.Add("subTabName", parameterToString(localVarOptionals.SubTabName.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1Opts Optional parameters for the method 'FetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1'
type KuaishouAppAPIApiFetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1Opts struct {
	SubTabId   optional.Int32
	SubTabName optional.String
}

/*
FetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_0 快手品牌榜单/Kuaishou brand top list
# [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId &#x3D; 0     - subTabName &#x3D; None - 品牌榜单热门服饰榜对应参数：     - subTabId &#x3D; 131     - subTabName &#x3D; \&quot;服饰\&quot; - 品牌榜单热门汽车榜对应参数：     - subTabId &#x3D; 1     - subTabName &#x3D; \&quot;汽车\&quot; - 品牌榜单热门游戏榜对应参数：     - subTabId &#x3D; 25     - subTabName &#x3D; \&quot;游戏\&quot; - 品牌榜单热门医疗健康榜对应参数：     - subTabId &#x3D; 24     - subTabName &#x3D; \&quot;医疗健康\&quot; - 品牌榜单热门3C数码榜对应参数：     - subTabId &#x3D; 130     - subTabName &#x3D; \&quot;3C数码\&quot; - 品牌榜单热门手机榜对应参数：     - subTabId &#x3D; 128     - subTabName &#x3D; \&quot;手机\&quot; - 品牌榜单热门家电榜对应参数：     - subTabId &#x3D; 11     - subTabName &#x3D; \&quot;家电\&quot; - 品牌榜单热门母婴榜对应参数：     - subTabId &#x3D; 4     - subTabName &#x3D; \&quot;母婴\&quot; - 品牌榜单热门食品饮料榜对应参数：     - subTabId &#x3D; 2     - subTabName &#x3D; \&quot;食品饮料\&quot;  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId &#x3D; 0     - subTabName &#x3D; None - Corresponding parameters for the brand hot clothing list:     - subTabId &#x3D; 131     - subTabName &#x3D; \&quot;Clothing\&quot; - Corresponding parameters for the brand hot car list:     - subTabId &#x3D; 1     - subTabName &#x3D; \&quot;Car\&quot; - Corresponding parameters for the brand hot game list:     - subTabId &#x3D; 25     - subTabName &#x3D; \&quot;Game\&quot; - Corresponding parameters for the brand hot medical health list:     - subTabId &#x3D; 24     - subTabName &#x3D; \&quot;Medical Health\&quot; - Corresponding parameters for the brand hot 3C digital list:     - subTabId &#x3D; 130     - subTabName &#x3D; \&quot;3C Digital\&quot; - Corresponding parameters for the brand hot mobile phone list:     - subTabId &#x3D; 128     - subTabName &#x3D; \&quot;Mobile Phone\&quot; - Corresponding parameters for the brand hot home appliance list:     - subTabId &#x3D; 11     - subTabName &#x3D; \&quot;Home Appliance\&quot; - Corresponding parameters for the brand hot maternal and child list:     - subTabId &#x3D; 4     - subTabName &#x3D; \&quot;Maternal and Child\&quot; - Corresponding parameters for the brand hot food and beverage list:     - subTabId &#x3D; 2     - subTabName &#x3D; \&quot;Food and Beverage\&quot;   ### Returns: - List data  # [示例/Example] subTabId &#x3D; 0 subTabName &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *KuaishouAppAPIApiFetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1Opts - Optional Parameters:
  - @param "SubTabId" (optional.Int32) -
  - @param "SubTabName" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1(ctx _context.Context, localVarOptionals *KuaishouAppAPIApiFetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_brand_top_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.SubTabId.IsSet() {
		localVarQueryParams.Add("subTabId", parameterToString(localVarOptionals.SubTabId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubTabName.IsSet() {
		localVarQueryParams.Add("subTabName", parameterToString(localVarOptionals.SubTabName.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet 快手热榜分类/Kuaishou hot categories
# [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_hot_board_categories"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet_0 快手热榜分类/Kuaishou hot categories
# [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet_2(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_hot_board_categories"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGetOpts Optional parameters for the method 'FetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet'
type KuaishouAppAPIApiFetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGetOpts struct {
	BoardType optional.Int32
	BoardId   optional.Int32
}

/*
FetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet 快手热榜详情/Kuaishou hot board detail
# [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType &#x3D; 1 boardId &#x3D; 1
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *KuaishouAppAPIApiFetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGetOpts - Optional Parameters:
  - @param "BoardType" (optional.Int32) -
  - @param "BoardId" (optional.Int32) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet(ctx _context.Context, localVarOptionals *KuaishouAppAPIApiFetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_hot_board_detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.BoardType.IsSet() {
		localVarQueryParams.Add("boardType", parameterToString(localVarOptionals.BoardType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BoardId.IsSet() {
		localVarQueryParams.Add("boardId", parameterToString(localVarOptionals.BoardId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3Opts Optional parameters for the method 'FetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3'
type KuaishouAppAPIApiFetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3Opts struct {
	BoardType optional.Int32
	BoardId   optional.Int32
}

/*
FetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_0 快手热榜详情/Kuaishou hot board detail
# [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType &#x3D; 1 boardId &#x3D; 1
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *KuaishouAppAPIApiFetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3Opts - Optional Parameters:
  - @param "BoardType" (optional.Int32) -
  - @param "BoardId" (optional.Int32) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3(ctx _context.Context, localVarOptionals *KuaishouAppAPIApiFetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_hot_board_detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.BoardType.IsSet() {
		localVarQueryParams.Add("boardType", parameterToString(localVarOptionals.BoardType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BoardId.IsSet() {
		localVarQueryParams.Add("boardId", parameterToString(localVarOptionals.BoardId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet 快手热搜人物榜单/Kuaishou hot search person board
# [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_hot_search_person"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet_0 快手热搜人物榜单/Kuaishou hot search person board
# [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet_4(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_hot_search_person"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchLiveTopListApiV1KuaishouAppFetchLiveTopListGetOpts Optional parameters for the method 'FetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet'
type KuaishouAppAPIApiFetchLiveTopListApiV1KuaishouAppFetchLiveTopListGetOpts struct {
	SubTabId   optional.Int32
	SubTabName optional.String
}

/*
FetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet 快手直播榜单/Kuaishou live top list
# [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId &#x3D; 0     - subTabName &#x3D; None - 直播音乐榜对应参数：     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;音乐\&quot; - 直播舞蹈榜对应参数：     - subTabId &#x3D; 107     - subTabName &#x3D; \&quot;舞蹈\&quot; - 直播颜值榜对应参数：     - subTabId &#x3D; 101     - subTabName &#x3D; \&quot;颜值\&quot; - 直播国艺榜对应参数：     - subTabId &#x3D; 105     - subTabName &#x3D; \&quot;国艺\&quot; - 直播相亲榜对应参数：     - subTabId &#x3D; 111     - subTabName &#x3D; \&quot;相亲\&quot; - 直播游戏榜对应参数：     - subTabId &#x3D; 106     - subTabName &#x3D; \&quot;游戏\&quot; - 直播二次元榜对应参数：     - subTabId &#x3D; 110     - subTabName &#x3D; \&quot;二次元\&quot; - 直播故事榜对应参数：     - subTabId &#x3D; 104     - subTabName &#x3D; \&quot;故事\&quot; - 直播团播榜对应参数：     - subTabId &#x3D; 113     - subTabName &#x3D; \&quot;团播\&quot; - 直播九宫格榜对应参数：     - subTabId &#x3D; 114     - subTabName &#x3D; \&quot;九宫格\&quot;  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId &#x3D; 0     - subTabName &#x3D; None - Corresponding parameters for the live music list:     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;Music\&quot; - Corresponding parameters for the live dance list:     - subTabId &#x3D; 107     - subTabName &#x3D; \&quot;Dance\&quot; - Corresponding parameters for the live beauty list:     - subTabId &#x3D; 101     - subTabName &#x3D; \&quot;Beauty\&quot; - Corresponding parameters for the live national art list:     - subTabId &#x3D; 105     - subTabName &#x3D; \&quot;National Art\&quot; - Corresponding parameters for the live blind date list:     - subTabId &#x3D; 111     - subTabName &#x3D; \&quot;Blind Date\&quot; - Corresponding parameters for the live game list:     - subTabId &#x3D; 106     - subTabName &#x3D; \&quot;Game\&quot; - Corresponding parameters for the live second element list:     - subTabId &#x3D; 110     - subTabName &#x3D; \&quot;Second Element\&quot; - Corresponding parameters for the live story list:     - subTabId &#x3D; 104     - subTabName &#x3D; \&quot;Story\&quot; - Corresponding parameters for the live group broadcast list:     - subTabId &#x3D; 113     - subTabName &#x3D; \&quot;Group Broadcast\&quot; - Corresponding parameters for the live nine-grid list:     - subTabId &#x3D; 114     - subTabName &#x3D; \&quot;Nine Grid\&quot;  ### Returns: - List data  # [示例/Example] subTabId &#x3D; 0 subTabName &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *KuaishouAppAPIApiFetchLiveTopListApiV1KuaishouAppFetchLiveTopListGetOpts - Optional Parameters:
  - @param "SubTabId" (optional.Int32) -
  - @param "SubTabName" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet(ctx _context.Context, localVarOptionals *KuaishouAppAPIApiFetchLiveTopListApiV1KuaishouAppFetchLiveTopListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_live_top_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.SubTabId.IsSet() {
		localVarQueryParams.Add("subTabId", parameterToString(localVarOptionals.SubTabId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubTabName.IsSet() {
		localVarQueryParams.Add("subTabName", parameterToString(localVarOptionals.SubTabName.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5Opts Optional parameters for the method 'FetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5'
type KuaishouAppAPIApiFetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5Opts struct {
	SubTabId   optional.Int32
	SubTabName optional.String
}

/*
FetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_0 快手直播榜单/Kuaishou live top list
# [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId &#x3D; 0     - subTabName &#x3D; None - 直播音乐榜对应参数：     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;音乐\&quot; - 直播舞蹈榜对应参数：     - subTabId &#x3D; 107     - subTabName &#x3D; \&quot;舞蹈\&quot; - 直播颜值榜对应参数：     - subTabId &#x3D; 101     - subTabName &#x3D; \&quot;颜值\&quot; - 直播国艺榜对应参数：     - subTabId &#x3D; 105     - subTabName &#x3D; \&quot;国艺\&quot; - 直播相亲榜对应参数：     - subTabId &#x3D; 111     - subTabName &#x3D; \&quot;相亲\&quot; - 直播游戏榜对应参数：     - subTabId &#x3D; 106     - subTabName &#x3D; \&quot;游戏\&quot; - 直播二次元榜对应参数：     - subTabId &#x3D; 110     - subTabName &#x3D; \&quot;二次元\&quot; - 直播故事榜对应参数：     - subTabId &#x3D; 104     - subTabName &#x3D; \&quot;故事\&quot; - 直播团播榜对应参数：     - subTabId &#x3D; 113     - subTabName &#x3D; \&quot;团播\&quot; - 直播九宫格榜对应参数：     - subTabId &#x3D; 114     - subTabName &#x3D; \&quot;九宫格\&quot;  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId &#x3D; 0     - subTabName &#x3D; None - Corresponding parameters for the live music list:     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;Music\&quot; - Corresponding parameters for the live dance list:     - subTabId &#x3D; 107     - subTabName &#x3D; \&quot;Dance\&quot; - Corresponding parameters for the live beauty list:     - subTabId &#x3D; 101     - subTabName &#x3D; \&quot;Beauty\&quot; - Corresponding parameters for the live national art list:     - subTabId &#x3D; 105     - subTabName &#x3D; \&quot;National Art\&quot; - Corresponding parameters for the live blind date list:     - subTabId &#x3D; 111     - subTabName &#x3D; \&quot;Blind Date\&quot; - Corresponding parameters for the live game list:     - subTabId &#x3D; 106     - subTabName &#x3D; \&quot;Game\&quot; - Corresponding parameters for the live second element list:     - subTabId &#x3D; 110     - subTabName &#x3D; \&quot;Second Element\&quot; - Corresponding parameters for the live story list:     - subTabId &#x3D; 104     - subTabName &#x3D; \&quot;Story\&quot; - Corresponding parameters for the live group broadcast list:     - subTabId &#x3D; 113     - subTabName &#x3D; \&quot;Group Broadcast\&quot; - Corresponding parameters for the live nine-grid list:     - subTabId &#x3D; 114     - subTabName &#x3D; \&quot;Nine Grid\&quot;  ### Returns: - List data  # [示例/Example] subTabId &#x3D; 0 subTabName &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *KuaishouAppAPIApiFetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5Opts - Optional Parameters:
  - @param "SubTabId" (optional.Int32) -
  - @param "SubTabName" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5(ctx _context.Context, localVarOptionals *KuaishouAppAPIApiFetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_live_top_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.SubTabId.IsSet() {
		localVarQueryParams.Add("subTabId", parameterToString(localVarOptionals.SubTabId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubTabName.IsSet() {
		localVarQueryParams.Add("subTabName", parameterToString(localVarOptionals.SubTabName.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get 获取单个用户数据V2/Get single user data V2
# [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持&#x60;eid&#x60;或&#x60;userId&#x60;，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid &#x3D; \&quot;3xz63mn6fngqtiq\&quot;     - userId &#x3D; \&quot;228905802\&quot; ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports &#x60;eid&#x60; or &#x60;userId&#x60;, &#x60;eid&#x60; is part of the user profile link, and &#x60;user_id&#x60; can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid &#x3D; \&quot;3xz63mn6fngqtiq\&quot;     - userId &#x3D; \&quot;228905802\&quot; ### Returns: - User data  # [示例/Example] user_id &#x3D; \&quot;3xz63mn6fngqtiq\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get(ctx _context.Context, userId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_one_user_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_0 获取单个用户数据V2/Get single user data V2
# [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持&#x60;eid&#x60;或&#x60;userId&#x60;，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid &#x3D; \&quot;3xz63mn6fngqtiq\&quot;     - userId &#x3D; \&quot;228905802\&quot; ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports &#x60;eid&#x60; or &#x60;userId&#x60;, &#x60;eid&#x60; is part of the user profile link, and &#x60;user_id&#x60; can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid &#x3D; \&quot;3xz63mn6fngqtiq\&quot;     - userId &#x3D; \&quot;228905802\&quot; ### Returns: - User data  # [示例/Example] user_id &#x3D; \&quot;3xz63mn6fngqtiq\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_6(ctx _context.Context, userId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_one_user_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet 根据链接获取单个作品数据/Fetch single video by URL
# [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text &#x3D; \&quot;https://v.kuaishou.com/cNYP0Z\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareText

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet(ctx _context.Context, shareText string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_one_video_by_url"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_text", parameterToString(shareText, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_0 根据链接获取单个作品数据/Fetch single video by URL
# [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text &#x3D; \&quot;https://v.kuaishou.com/cNYP0Z\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareText

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_7(ctx _context.Context, shareText string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_one_video_by_url"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_text", parameterToString(shareText, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet 快手单一视频查询接口V1/Kuaishou single video query API V1
# [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id &#x3D; \&quot;3xhpk3xcf6e4iac\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param photoId

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet(ctx _context.Context, photoId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_one_video"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("photo_id", parameterToString(photoId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_0 快手单一视频查询接口V1/Kuaishou single video query API V1
# [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id &#x3D; \&quot;3xhpk3xcf6e4iac\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param photoId

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_8(ctx _context.Context, photoId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_one_video"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("photo_id", parameterToString(photoId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get 快手单一视频查询接口V2/Kuaishou single video query API V2
# [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id &#x3D; \&quot;3xtdqvdnqd3psuc\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param photoId

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get(ctx _context.Context, photoId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_one_video_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("photo_id", parameterToString(photoId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_0 快手单一视频查询接口V2/Kuaishou single video query API V2
# [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id &#x3D; \&quot;3xtdqvdnqd3psuc\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param photoId

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_9(ctx _context.Context, photoId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_one_video_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("photo_id", parameterToString(photoId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGetOpts Optional parameters for the method 'FetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet'
type KuaishouAppAPIApiFetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGetOpts struct {
	SubTabId   optional.Int32
	SubTabName optional.String
}

/*
FetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet 快手购物榜单/Kuaishou shopping top list
# [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId &#x3D; 0     - subTabName &#x3D; None - 购物榜单热销商品榜对应参数：     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;热销商品\&quot;  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId &#x3D; 0     - subTabName &#x3D; None - Corresponding parameters for the shopping hot selling product list:     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;Hot Selling Product\&quot;  ### Returns: - List data  # [示例/Example] subTabId &#x3D; 0 subTabName &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *KuaishouAppAPIApiFetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGetOpts - Optional Parameters:
  - @param "SubTabId" (optional.Int32) -
  - @param "SubTabName" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet(ctx _context.Context, localVarOptionals *KuaishouAppAPIApiFetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_shopping_top_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.SubTabId.IsSet() {
		localVarQueryParams.Add("subTabId", parameterToString(localVarOptionals.SubTabId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubTabName.IsSet() {
		localVarQueryParams.Add("subTabName", parameterToString(localVarOptionals.SubTabName.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10Opts Optional parameters for the method 'FetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10'
type KuaishouAppAPIApiFetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10Opts struct {
	SubTabId   optional.Int32
	SubTabName optional.String
}

/*
FetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_0 快手购物榜单/Kuaishou shopping top list
# [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId &#x3D; 0     - subTabName &#x3D; None - 购物榜单热销商品榜对应参数：     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;热销商品\&quot;  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId &#x3D; 0     - subTabName &#x3D; None - Corresponding parameters for the shopping hot selling product list:     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;Hot Selling Product\&quot;  ### Returns: - List data  # [示例/Example] subTabId &#x3D; 0 subTabName &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *KuaishouAppAPIApiFetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10Opts - Optional Parameters:
  - @param "SubTabId" (optional.Int32) -
  - @param "SubTabName" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10(ctx _context.Context, localVarOptionals *KuaishouAppAPIApiFetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_shopping_top_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.SubTabId.IsSet() {
		localVarQueryParams.Add("subTabId", parameterToString(localVarOptionals.SubTabId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SubTabName.IsSet() {
		localVarQueryParams.Add("subTabName", parameterToString(localVarOptionals.SubTabName.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchUserHotPostApiV1KuaishouAppFetchUserHotPostGetOpts Optional parameters for the method 'FetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet'
type KuaishouAppAPIApiFetchUserHotPostApiV1KuaishouAppFetchUserHotPostGetOpts struct {
	Pcursor optional.String
}

/*
FetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet 获取用户热门作品数据/Get user hot post data
# [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id &#x3D; \&quot;228905802\&quot; pcursor &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId
  - @param optional nil or *KuaishouAppAPIApiFetchUserHotPostApiV1KuaishouAppFetchUserHotPostGetOpts - Optional Parameters:
  - @param "Pcursor" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet(ctx _context.Context, userId string, localVarOptionals *KuaishouAppAPIApiFetchUserHotPostApiV1KuaishouAppFetchUserHotPostGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_user_hot_post"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	if localVarOptionals != nil && localVarOptionals.Pcursor.IsSet() {
		localVarQueryParams.Add("pcursor", parameterToString(localVarOptionals.Pcursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11Opts Optional parameters for the method 'FetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11'
type KuaishouAppAPIApiFetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11Opts struct {
	Pcursor optional.String
}

/*
FetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_0 获取用户热门作品数据/Get user hot post data
# [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id &#x3D; \&quot;228905802\&quot; pcursor &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId
  - @param optional nil or *KuaishouAppAPIApiFetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11Opts - Optional Parameters:
  - @param "Pcursor" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11(ctx _context.Context, userId string, localVarOptionals *KuaishouAppAPIApiFetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_user_hot_post"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	if localVarOptionals != nil && localVarOptionals.Pcursor.IsSet() {
		localVarQueryParams.Add("pcursor", parameterToString(localVarOptionals.Pcursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet 获取用户直播信息/Get user live info
# [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id &#x3D; \&quot;1377082950\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet(ctx _context.Context, userId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_user_live_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_0 获取用户直播信息/Get user live info
# [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id &#x3D; \&quot;1377082950\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_12(ctx _context.Context, userId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_user_live_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchUserPostV2ApiV1KuaishouAppFetchUserPostV2GetOpts Optional parameters for the method 'FetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get'
type KuaishouAppAPIApiFetchUserPostV2ApiV1KuaishouAppFetchUserPostV2GetOpts struct {
	Pcursor optional.String
}

/*
FetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get 用户视频列表V2/User video list V2
# [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id &#x3D; \&quot;228905802\&quot; pcursor &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId
  - @param optional nil or *KuaishouAppAPIApiFetchUserPostV2ApiV1KuaishouAppFetchUserPostV2GetOpts - Optional Parameters:
  - @param "Pcursor" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get(ctx _context.Context, userId string, localVarOptionals *KuaishouAppAPIApiFetchUserPostV2ApiV1KuaishouAppFetchUserPostV2GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_user_post_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	if localVarOptionals != nil && localVarOptionals.Pcursor.IsSet() {
		localVarQueryParams.Add("pcursor", parameterToString(localVarOptionals.Pcursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13Opts Optional parameters for the method 'FetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13'
type KuaishouAppAPIApiFetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13Opts struct {
	Pcursor optional.String
}

/*
FetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_0 用户视频列表V2/User video list V2
# [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id &#x3D; \&quot;228905802\&quot; pcursor &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId
  - @param optional nil or *KuaishouAppAPIApiFetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13Opts - Optional Parameters:
  - @param "Pcursor" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13(ctx _context.Context, userId string, localVarOptionals *KuaishouAppAPIApiFetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_user_post_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	if localVarOptionals != nil && localVarOptionals.Pcursor.IsSet() {
		localVarQueryParams.Add("pcursor", parameterToString(localVarOptionals.Pcursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGetOpts Optional parameters for the method 'FetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet'
type KuaishouAppAPIApiFetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGetOpts struct {
	Pcursor optional.String
}

/*
FetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet 获取单个作品评论数据/Get single video comment data
# [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id &#x3D; \&quot;3x7gxp2zhgjv832\&quot; pcursor &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param photoId
  - @param optional nil or *KuaishouAppAPIApiFetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGetOpts - Optional Parameters:
  - @param "Pcursor" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet(ctx _context.Context, photoId string, localVarOptionals *KuaishouAppAPIApiFetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_one_video_comment"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("photo_id", parameterToString(photoId, ""))
	if localVarOptionals != nil && localVarOptionals.Pcursor.IsSet() {
		localVarQueryParams.Add("pcursor", parameterToString(localVarOptionals.Pcursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiFetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14Opts Optional parameters for the method 'FetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14'
type KuaishouAppAPIApiFetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14Opts struct {
	Pcursor optional.String
}

/*
FetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_0 获取单个作品评论数据/Get single video comment data
# [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id &#x3D; \&quot;3x7gxp2zhgjv832\&quot; pcursor &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param photoId
  - @param optional nil or *KuaishouAppAPIApiFetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14Opts - Optional Parameters:
  - @param "Pcursor" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) FetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14(ctx _context.Context, photoId string, localVarOptionals *KuaishouAppAPIApiFetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/fetch_one_video_comment"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("photo_id", parameterToString(photoId, ""))
	if localVarOptionals != nil && localVarOptionals.Pcursor.IsSet() {
		localVarQueryParams.Add("pcursor", parameterToString(localVarOptionals.Pcursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GenerateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet 生成快手分享链接/Generate Kuaishou share link
# [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId &#x3D; \&quot;3xg5wjqdtekbb3u\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareObjectId

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) GenerateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet(ctx _context.Context, shareObjectId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/generate_kuaishou_share_link"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("shareObjectId", parameterToString(shareObjectId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GenerateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_0 生成快手分享链接/Generate Kuaishou share link
# [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId &#x3D; \&quot;3xg5wjqdtekbb3u\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareObjectId

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) GenerateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_15(ctx _context.Context, shareObjectId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/generate_kuaishou_share_link"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("shareObjectId", parameterToString(shareObjectId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiSearchUserV2ApiV1KuaishouAppSearchUserV2GetOpts Optional parameters for the method 'SearchUserV2ApiV1KuaishouAppSearchUserV2Get'
type KuaishouAppAPIApiSearchUserV2ApiV1KuaishouAppSearchUserV2GetOpts struct {
	Page optional.String
}

/*
SearchUserV2ApiV1KuaishouAppSearchUserV2Get 搜索用户V2/Search user V2
# [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; page &#x3D; \&quot;1\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword
  - @param optional nil or *KuaishouAppAPIApiSearchUserV2ApiV1KuaishouAppSearchUserV2GetOpts - Optional Parameters:
  - @param "Page" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) SearchUserV2ApiV1KuaishouAppSearchUserV2Get(ctx _context.Context, keyword string, localVarOptionals *KuaishouAppAPIApiSearchUserV2ApiV1KuaishouAppSearchUserV2GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/search_user_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiSearchUserV2ApiV1KuaishouAppSearchUserV2Get_16Opts Optional parameters for the method 'SearchUserV2ApiV1KuaishouAppSearchUserV2Get_16'
type KuaishouAppAPIApiSearchUserV2ApiV1KuaishouAppSearchUserV2Get_16Opts struct {
	Page optional.String
}

/*
SearchUserV2ApiV1KuaishouAppSearchUserV2Get_0 搜索用户V2/Search user V2
# [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; page &#x3D; \&quot;1\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword
  - @param optional nil or *KuaishouAppAPIApiSearchUserV2ApiV1KuaishouAppSearchUserV2Get_16Opts - Optional Parameters:
  - @param "Page" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) SearchUserV2ApiV1KuaishouAppSearchUserV2Get_16(ctx _context.Context, keyword string, localVarOptionals *KuaishouAppAPIApiSearchUserV2ApiV1KuaishouAppSearchUserV2Get_16Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/search_user_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiSearchVideoV2ApiV1KuaishouAppSearchVideoV2GetOpts Optional parameters for the method 'SearchVideoV2ApiV1KuaishouAppSearchVideoV2Get'
type KuaishouAppAPIApiSearchVideoV2ApiV1KuaishouAppSearchVideoV2GetOpts struct {
	Page optional.String
}

/*
SearchVideoV2ApiV1KuaishouAppSearchVideoV2Get 搜索视频V2/Search video V2
# [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; page &#x3D; \&quot;1\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword
  - @param optional nil or *KuaishouAppAPIApiSearchVideoV2ApiV1KuaishouAppSearchVideoV2GetOpts - Optional Parameters:
  - @param "Page" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) SearchVideoV2ApiV1KuaishouAppSearchVideoV2Get(ctx _context.Context, keyword string, localVarOptionals *KuaishouAppAPIApiSearchVideoV2ApiV1KuaishouAppSearchVideoV2GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/search_video_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// KuaishouAppAPIApiSearchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17Opts Optional parameters for the method 'SearchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17'
type KuaishouAppAPIApiSearchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17Opts struct {
	Page optional.String
}

/*
SearchVideoV2ApiV1KuaishouAppSearchVideoV2Get_0 搜索视频V2/Search video V2
# [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; page &#x3D; \&quot;1\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword
  - @param optional nil or *KuaishouAppAPIApiSearchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17Opts - Optional Parameters:
  - @param "Page" (optional.String) -

@return ResponseModel
*/
func (a *KuaishouAppAPIApiService) SearchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17(ctx _context.Context, keyword string, localVarOptionals *KuaishouAppAPIApiSearchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/kuaishou/app/search_video_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
