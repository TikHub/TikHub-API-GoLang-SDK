/*
 * TikHub Private API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tikhub

import (
	_context "context"
	"github.com/antihax/optional"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// HybridParsingApiService HybridParsingApi service
type HybridParsingApiService service

// HybridParsingApiHybridParsingSingleVideoApiV1HybridVideoDataGetOpts Optional parameters for the method 'HybridParsingSingleVideoApiV1HybridVideoDataGet'
type HybridParsingApiHybridParsingSingleVideoApiV1HybridVideoDataGetOpts struct {
	Minimal   optional.Bool
	Base64Url optional.Bool
}

/*
HybridParsingSingleVideoApiV1HybridVideoDataGet 混合解析单一视频接口/Hybrid parsing single video endpoint
# [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - &#x60;url&#x60;: 视频链接、分享链接、分享文本。 ### 返回: - &#x60;data&#x60;: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - &#x60;url&#x60;: Video link, share link, or share text. ### Returns: - &#x60;data&#x60;: Video data.  # [Example] url &#x3D; \&quot;https://v.douyin.com/L4FJNR3/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param url
  - @param optional nil or *HybridParsingApiHybridParsingSingleVideoApiV1HybridVideoDataGetOpts - Optional Parameters:
  - @param "Minimal" (optional.Bool) -  是否返回最小数据/Whether to return minimal data
  - @param "Base64Url" (optional.Bool) -  是否Base64编码提交URL/Base64 encoding URL

@return ResponseModel
*/
func (a *HybridParsingApiService) HybridParsingSingleVideoApiV1HybridVideoDataGet(ctx _context.Context, url string, localVarOptionals *HybridParsingApiHybridParsingSingleVideoApiV1HybridVideoDataGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/hybrid/video_data"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	if localVarOptionals != nil && localVarOptionals.Minimal.IsSet() {
		localVarQueryParams.Add("minimal", parameterToString(localVarOptionals.Minimal.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Base64Url.IsSet() {
		localVarQueryParams.Add("base64_url", parameterToString(localVarOptionals.Base64Url.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// HybridParsingApiHybridParsingSingleVideoApiV1HybridVideoDataGet_1Opts Optional parameters for the method 'HybridParsingSingleVideoApiV1HybridVideoDataGet_1'
type HybridParsingApiHybridParsingSingleVideoApiV1HybridVideoDataGet_1Opts struct {
	Minimal   optional.Bool
	Base64Url optional.Bool
}

/*
HybridParsingSingleVideoApiV1HybridVideoDataGet_0 混合解析单一视频接口/Hybrid parsing single video endpoint
# [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - &#x60;url&#x60;: 视频链接、分享链接、分享文本。 ### 返回: - &#x60;data&#x60;: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - &#x60;url&#x60;: Video link, share link, or share text. ### Returns: - &#x60;data&#x60;: Video data.  # [Example] url &#x3D; \&quot;https://v.douyin.com/L4FJNR3/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param url
  - @param optional nil or *HybridParsingApiHybridParsingSingleVideoApiV1HybridVideoDataGet_1Opts - Optional Parameters:
  - @param "Minimal" (optional.Bool) -  是否返回最小数据/Whether to return minimal data
  - @param "Base64Url" (optional.Bool) -  是否Base64编码提交URL/Base64 encoding URL

@return ResponseModel
*/
func (a *HybridParsingApiService) HybridParsingSingleVideoApiV1HybridVideoDataGet_1(ctx _context.Context, url string, localVarOptionals *HybridParsingApiHybridParsingSingleVideoApiV1HybridVideoDataGet_1Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/hybrid/video_data"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	if localVarOptionals != nil && localVarOptionals.Minimal.IsSet() {
		localVarQueryParams.Add("minimal", parameterToString(localVarOptionals.Minimal.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Base64Url.IsSet() {
		localVarQueryParams.Add("base64_url", parameterToString(localVarOptionals.Base64Url.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// HybridParsingApiHybridParsingSingleVideoApiV1HybridVideoDataGet_2Opts Optional parameters for the method 'HybridParsingSingleVideoApiV1HybridVideoDataGet_2'
type HybridParsingApiHybridParsingSingleVideoApiV1HybridVideoDataGet_2Opts struct {
	Minimal   optional.Bool
	Base64Url optional.Bool
}

/*
HybridParsingSingleVideoApiV1HybridVideoDataGet_1 混合解析单一视频接口/Hybrid parsing single video endpoint
# [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - &#x60;url&#x60;: 视频链接、分享链接、分享文本。 ### 返回: - &#x60;data&#x60;: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - &#x60;url&#x60;: Video link, share link, or share text. ### Returns: - &#x60;data&#x60;: Video data.  # [Example] url &#x3D; \&quot;https://v.douyin.com/L4FJNR3/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param url
  - @param optional nil or *HybridParsingApiHybridParsingSingleVideoApiV1HybridVideoDataGet_2Opts - Optional Parameters:
  - @param "Minimal" (optional.Bool) -  是否返回最小数据/Whether to return minimal data
  - @param "Base64Url" (optional.Bool) -  是否Base64编码提交URL/Base64 encoding URL

@return ResponseModel
*/
func (a *HybridParsingApiService) HybridParsingSingleVideoApiV1HybridVideoDataGet_2(ctx _context.Context, url string, localVarOptionals *HybridParsingApiHybridParsingSingleVideoApiV1HybridVideoDataGet_2Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/hybrid/video_data"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	if localVarOptionals != nil && localVarOptionals.Minimal.IsSet() {
		localVarQueryParams.Add("minimal", parameterToString(localVarOptionals.Minimal.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Base64Url.IsSet() {
		localVarQueryParams.Add("base64_url", parameterToString(localVarOptionals.Base64Url.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
