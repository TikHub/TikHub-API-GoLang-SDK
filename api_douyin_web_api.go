/*
 * TikHub Private API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tikhub

import (
	_context "context"
	"github.com/antihax/optional"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// DouyinWebAPIApiService DouyinWebAPIApi service
type DouyinWebAPIApiService service

/*
DouyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet 提取直播间弹幕/Extract live room danmaku
# [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param liveRoomUrl 直播间链接/Live room link
  - @param danmakuType 消息类型/Message type

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) DouyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet(ctx _context.Context, liveRoomUrl string, danmakuType string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/douyin_live_room"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("live_room_url", parameterToString(liveRoomUrl, ""))
	localVarQueryParams.Add("danmaku_type", parameterToString(danmakuType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
DouyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_0 提取直播间弹幕/Extract live room danmaku
# [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param liveRoomUrl 直播间链接/Live room link
  - @param danmakuType 消息类型/Message type

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) DouyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_1(ctx _context.Context, liveRoomUrl string, danmakuType string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/douyin_live_room"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("live_room_url", parameterToString(liveRoomUrl, ""))
	localVarQueryParams.Add("danmaku_type", parameterToString(danmakuType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet 抖音热点分类/Douyin Billboard Categories
# [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param billboardType 热点类型/Hotspot type

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet(ctx _context.Context, billboardType string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_billboard_categories"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("billboard_type", parameterToString(billboardType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_0 抖音热点分类/Douyin Billboard Categories
# [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param billboardType 热点类型/Hotspot type

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_2(ctx _context.Context, billboardType string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_billboard_categories"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("billboard_type", parameterToString(billboardType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet 抖音榜单相关视频/Douyin Billboard Related Videos
# [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param page 页码/Page number
  - @param pageSize 每页数量/Number per page
  - @param sentenceId 分类ID/Category ID

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet(ctx _context.Context, page int32, pageSize int32, sentenceId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_billboard_related_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("page_size", parameterToString(pageSize, ""))
	localVarQueryParams.Add("sentence_id", parameterToString(sentenceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_0 抖音榜单相关视频/Douyin Billboard Related Videos
# [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param page 页码/Page number
  - @param pageSize 每页数量/Number per page
  - @param sentenceId 分类ID/Category ID

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_3(ctx _context.Context, page int32, pageSize int32, sentenceId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_billboard_related_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("page_size", parameterToString(pageSize, ""))
	localVarQueryParams.Add("sentence_id", parameterToString(sentenceId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGetOpts Optional parameters for the method 'FetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet'
type DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGetOpts struct {
	RefreshIndex optional.Int32
	Cookie       optional.String
}

/*
FetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet 二次元作品推荐/Knowledge Video
# [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param count 每页数量/Number per page
  - @param optional nil or *DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGetOpts - Optional Parameters:
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index
  - @param "Cookie" (optional.String) -  用户自行提供的Cookie/User provided Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet(ctx _context.Context, count int32, localVarOptionals *DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_cartoon_aweme"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("count", parameterToString(count, ""))
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4Opts Optional parameters for the method 'FetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4'
type DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4Opts struct {
	RefreshIndex optional.Int32
	Cookie       optional.String
}

/*
FetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_0 二次元作品推荐/Knowledge Video
# [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param count 每页数量/Number per page
  - @param optional nil or *DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4Opts - Optional Parameters:
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index
  - @param "Cookie" (optional.String) -  用户自行提供的Cookie/User provided Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4(ctx _context.Context, count int32, localVarOptionals *DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_cartoon_aweme"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("count", parameterToString(count, ""))
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGetOpts Optional parameters for the method 'FetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet'
type DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGetOpts struct {
	RefreshIndex optional.Int32
	Cookie       optional.String
}

/*
FetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet 美食作品推荐/Knowledge Video
# [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param count 每页数量/Number per page
  - @param optional nil or *DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGetOpts - Optional Parameters:
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index
  - @param "Cookie" (optional.String) -  用户自行提供的Cookie/User provided Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet(ctx _context.Context, count int32, localVarOptionals *DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_food_aweme"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("count", parameterToString(count, ""))
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5Opts Optional parameters for the method 'FetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5'
type DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5Opts struct {
	RefreshIndex optional.Int32
	Cookie       optional.String
}

/*
FetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_0 美食作品推荐/Knowledge Video
# [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param count 每页数量/Number per page
  - @param optional nil or *DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5Opts - Optional Parameters:
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index
  - @param "Cookie" (optional.String) -  用户自行提供的Cookie/User provided Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5(ctx _context.Context, count int32, localVarOptionals *DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_food_aweme"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("count", parameterToString(count, ""))
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGetOpts Optional parameters for the method 'FetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet'
type DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGetOpts struct {
	RefreshIndex optional.Int32
	Cookie       optional.String
}

/*
FetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet 音乐作品推荐/Knowledge Video
# [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param count 每页数量/Number per page
  - @param optional nil or *DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGetOpts - Optional Parameters:
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index
  - @param "Cookie" (optional.String) -  用户自行提供的Cookie/User provided Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet(ctx _context.Context, count int32, localVarOptionals *DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_music_aweme"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("count", parameterToString(count, ""))
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6Opts Optional parameters for the method 'FetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6'
type DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6Opts struct {
	RefreshIndex optional.Int32
	Cookie       optional.String
}

/*
FetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_0 音乐作品推荐/Knowledge Video
# [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param count 每页数量/Number per page
  - @param optional nil or *DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6Opts - Optional Parameters:
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index
  - @param "Cookie" (optional.String) -  用户自行提供的Cookie/User provided Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6(ctx _context.Context, count int32, localVarOptionals *DouyinWebAPIApiFetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_music_aweme"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("count", parameterToString(count, ""))
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchChallengePostsApiV1DouyinWebFetchChallengePostsPostOpts Optional parameters for the method 'FetchChallengePostsApiV1DouyinWebFetchChallengePostsPost'
type DouyinWebAPIApiFetchChallengePostsApiV1DouyinWebFetchChallengePostsPostOpts struct {
	ChallengePostRequest optional.Interface
}

/*
FetchChallengePostsApiV1DouyinWebFetchChallengePostsPost 话题作品/Challenge Posts
# [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id &#x3D; \&quot;1750525814851611\&quot; sort_type &#x3D; 0 offset &#x3D; 0 cursor &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiFetchChallengePostsApiV1DouyinWebFetchChallengePostsPostOpts - Optional Parameters:
  - @param "ChallengePostRequest" (optional.Interface of ChallengePostRequest) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchChallengePostsApiV1DouyinWebFetchChallengePostsPost(ctx _context.Context, localVarOptionals *DouyinWebAPIApiFetchChallengePostsApiV1DouyinWebFetchChallengePostsPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_challenge_posts"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.ChallengePostRequest.IsSet() {
		localVarOptionalChallengePostRequest, localVarOptionalChallengePostRequestok := localVarOptionals.ChallengePostRequest.Value().(ChallengePostRequest)
		if !localVarOptionalChallengePostRequestok {
			return localVarReturnValue, nil, reportError("challengePostRequest should be ChallengePostRequest")
		}
		localVarPostBody = &localVarOptionalChallengePostRequest
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7Opts Optional parameters for the method 'FetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7'
type DouyinWebAPIApiFetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7Opts struct {
	ChallengePostRequest optional.Interface
}

/*
FetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_0 话题作品/Challenge Posts
# [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id &#x3D; \&quot;1750525814851611\&quot; sort_type &#x3D; 0 offset &#x3D; 0 cursor &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiFetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7Opts - Optional Parameters:
  - @param "ChallengePostRequest" (optional.Interface of ChallengePostRequest) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7(ctx _context.Context, localVarOptionals *DouyinWebAPIApiFetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_challenge_posts"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.ChallengePostRequest.IsSet() {
		localVarOptionalChallengePostRequest, localVarOptionalChallengePostRequestok := localVarOptionals.ChallengePostRequest.Value().(ChallengePostRequest)
		if !localVarOptionalChallengePostRequestok {
			return localVarReturnValue, nil, reportError("challengePostRequest should be ChallengePostRequest")
		}
		localVarPostBody = &localVarOptionalChallengePostRequest
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchCityHotListApiV1DouyinWebFetchCityHotListGet 抖音同城热点榜单/Douyin City Hot List
# [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\&quot;{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\&quot; ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\&quot;{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\&quot; ### Return: - Hotspot list data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param page 页码/Page number
  - @param pageSize 每页数量/Number per page
  - @param sentenceTag 分类标签/Category tag
  - @param order 排序方式/Sorting method
  - @param cityCode 城市代码/City code

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchCityHotListApiV1DouyinWebFetchCityHotListGet(ctx _context.Context, page int32, pageSize int32, sentenceTag string, order string, cityCode string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_city_hot_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("page_size", parameterToString(pageSize, ""))
	localVarQueryParams.Add("sentence_tag", parameterToString(sentenceTag, ""))
	localVarQueryParams.Add("order", parameterToString(order, ""))
	localVarQueryParams.Add("city_code", parameterToString(cityCode, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchCityHotListApiV1DouyinWebFetchCityHotListGet_0 抖音同城热点榜单/Douyin City Hot List
# [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\&quot;{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\&quot; ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\&quot;{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\&quot; ### Return: - Hotspot list data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param page 页码/Page number
  - @param pageSize 每页数量/Number per page
  - @param sentenceTag 分类标签/Category tag
  - @param order 排序方式/Sorting method
  - @param cityCode 城市代码/City code

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchCityHotListApiV1DouyinWebFetchCityHotListGet_8(ctx _context.Context, page int32, pageSize int32, sentenceTag string, order string, cityCode string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_city_hot_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("page_size", parameterToString(pageSize, ""))
	localVarQueryParams.Add("sentence_tag", parameterToString(sentenceTag, ""))
	localVarQueryParams.Add("order", parameterToString(order, ""))
	localVarQueryParams.Add("city_code", parameterToString(cityCode, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchCityListApiV1DouyinWebFetchCityListGet 抖音城市列表/Douyin City List
# [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchCityListApiV1DouyinWebFetchCityListGet(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_city_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchCityListApiV1DouyinWebFetchCityListGet_0 抖音城市列表/Douyin City List
# [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchCityListApiV1DouyinWebFetchCityListGet_9(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_city_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
# [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent &#x3D; \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userAgent 用户浏览器代理/User browser agent

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet(ctx _context.Context, userAgent string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_douyin_web_guest_cookie"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_agent", parameterToString(userAgent, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_0 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
# [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent &#x3D; \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userAgent 用户浏览器代理/User browser agent

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_10(ctx _context.Context, userAgent string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_douyin_web_guest_cookie"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_agent", parameterToString(userAgent, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchGameAwemeApiV1DouyinWebFetchGameAwemeGetOpts Optional parameters for the method 'FetchGameAwemeApiV1DouyinWebFetchGameAwemeGet'
type DouyinWebAPIApiFetchGameAwemeApiV1DouyinWebFetchGameAwemeGetOpts struct {
	RefreshIndex optional.Int32
	Cookie       optional.String
}

/*
FetchGameAwemeApiV1DouyinWebFetchGameAwemeGet 游戏作品推荐/Knowledge Video
# [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param count 每页数量/Number per page
  - @param optional nil or *DouyinWebAPIApiFetchGameAwemeApiV1DouyinWebFetchGameAwemeGetOpts - Optional Parameters:
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index
  - @param "Cookie" (optional.String) -  用户自行提供的Cookie/User provided Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchGameAwemeApiV1DouyinWebFetchGameAwemeGet(ctx _context.Context, count int32, localVarOptionals *DouyinWebAPIApiFetchGameAwemeApiV1DouyinWebFetchGameAwemeGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_game_aweme"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("count", parameterToString(count, ""))
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11Opts Optional parameters for the method 'FetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11'
type DouyinWebAPIApiFetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11Opts struct {
	RefreshIndex optional.Int32
	Cookie       optional.String
}

/*
FetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_0 游戏作品推荐/Knowledge Video
# [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param count 每页数量/Number per page
  - @param optional nil or *DouyinWebAPIApiFetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11Opts - Optional Parameters:
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index
  - @param "Cookie" (optional.String) -  用户自行提供的Cookie/User provided Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11(ctx _context.Context, count int32, localVarOptionals *DouyinWebAPIApiFetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_game_aweme"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("count", parameterToString(count, ""))
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGetOpts Optional parameters for the method 'FetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet'
type DouyinWebAPIApiFetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGetOpts struct {
	Offset         optional.Int32
	Count          optional.Int32
	SortType       optional.String
	PublishTime    optional.String
	FilterDuration optional.String
	SearchRange    optional.String
	ContentType    optional.String
	SearchId       optional.String
}

/*
FetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; \&quot;0\&quot; publish_time &#x3D; \&quot;0\&quot; filter_duration &#x3D; \&quot;0\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGetOpts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SortType" (optional.String) -  排序类型/Sort type
  - @param "PublishTime" (optional.String) -  发布时间/Publish time
  - @param "FilterDuration" (optional.String) -  视频时长/Duration filter
  - @param "SearchRange" (optional.String) -  搜索范围/Search range
  - @param "ContentType" (optional.String) -  内容类型/Content type
  - @param "SearchId" (optional.String) -  搜索id，翻页时需要提供/Search id, need to provide when paging

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_general_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishTime.IsSet() {
		localVarQueryParams.Add("publish_time", parameterToString(localVarOptionals.PublishTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterDuration.IsSet() {
		localVarQueryParams.Add("filter_duration", parameterToString(localVarOptionals.FilterDuration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchRange.IsSet() {
		localVarQueryParams.Add("search_range", parameterToString(localVarOptionals.SearchRange.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ContentType.IsSet() {
		localVarQueryParams.Add("content_type", parameterToString(localVarOptionals.ContentType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchId.IsSet() {
		localVarQueryParams.Add("search_id", parameterToString(localVarOptionals.SearchId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12Opts Optional parameters for the method 'FetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12'
type DouyinWebAPIApiFetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12Opts struct {
	Offset         optional.Int32
	Count          optional.Int32
	SortType       optional.String
	PublishTime    optional.String
	FilterDuration optional.String
	SearchRange    optional.String
	ContentType    optional.String
	SearchId       optional.String
}

/*
FetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_0 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; \&quot;0\&quot; publish_time &#x3D; \&quot;0\&quot; filter_duration &#x3D; \&quot;0\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12Opts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SortType" (optional.String) -  排序类型/Sort type
  - @param "PublishTime" (optional.String) -  发布时间/Publish time
  - @param "FilterDuration" (optional.String) -  视频时长/Duration filter
  - @param "SearchRange" (optional.String) -  搜索范围/Search range
  - @param "ContentType" (optional.String) -  内容类型/Content type
  - @param "SearchId" (optional.String) -  搜索id，翻页时需要提供/Search id, need to provide when paging

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_general_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishTime.IsSet() {
		localVarQueryParams.Add("publish_time", parameterToString(localVarOptionals.PublishTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterDuration.IsSet() {
		localVarQueryParams.Add("filter_duration", parameterToString(localVarOptionals.FilterDuration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchRange.IsSet() {
		localVarQueryParams.Add("search_range", parameterToString(localVarOptionals.SearchRange.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ContentType.IsSet() {
		localVarQueryParams.Add("content_type", parameterToString(localVarOptionals.ContentType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchId.IsSet() {
		localVarQueryParams.Add("search_id", parameterToString(localVarOptionals.SearchId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchHomeFeedApiV1DouyinWebFetchHomeFeedGetOpts Optional parameters for the method 'FetchHomeFeedApiV1DouyinWebFetchHomeFeedGet'
type DouyinWebAPIApiFetchHomeFeedApiV1DouyinWebFetchHomeFeedGetOpts struct {
	Count        optional.Int32
	RefreshIndex optional.Int32
}

/*
FetchHomeFeedApiV1DouyinWebFetchHomeFeedGet 获取首页推荐数据/Get home feed data
# [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count &#x3D; 10 refresh_index &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiFetchHomeFeedApiV1DouyinWebFetchHomeFeedGetOpts - Optional Parameters:
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchHomeFeedApiV1DouyinWebFetchHomeFeedGet(ctx _context.Context, localVarOptionals *DouyinWebAPIApiFetchHomeFeedApiV1DouyinWebFetchHomeFeedGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_home_feed"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13Opts Optional parameters for the method 'FetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13'
type DouyinWebAPIApiFetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13Opts struct {
	Count        optional.Int32
	RefreshIndex optional.Int32
}

/*
FetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_0 获取首页推荐数据/Get home feed data
# [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count &#x3D; 10 refresh_index &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiFetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13Opts - Optional Parameters:
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13(ctx _context.Context, localVarOptionals *DouyinWebAPIApiFetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_home_feed"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchHotListApiV1DouyinWebFetchHotListGet 抖音热点总榜单/Douyin Hot List
# [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param page 页码/Page number
  - @param pageSize 每页数量/Number per page
  - @param sentenceTag 分类标签/Category tag

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchHotListApiV1DouyinWebFetchHotListGet(ctx _context.Context, page int32, pageSize int32, sentenceTag string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_hot_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("page_size", parameterToString(pageSize, ""))
	localVarQueryParams.Add("sentence_tag", parameterToString(sentenceTag, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchHotListApiV1DouyinWebFetchHotListGet_0 抖音热点总榜单/Douyin Hot List
# [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param page 页码/Page number
  - @param pageSize 每页数量/Number per page
  - @param sentenceTag 分类标签/Category tag

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchHotListApiV1DouyinWebFetchHotListGet_14(ctx _context.Context, page int32, pageSize int32, sentenceTag string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_hot_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("page_size", parameterToString(pageSize, ""))
	localVarQueryParams.Add("sentence_tag", parameterToString(sentenceTag, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet 获取抖音热榜数据/Get Douyin hot search results
# [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_hot_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet_0 获取抖音热榜数据/Get Douyin hot search results
# [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet_15(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_hot_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGetOpts Optional parameters for the method 'FetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet'
type DouyinWebAPIApiFetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGetOpts struct {
	RefreshIndex optional.Int32
	Cookie       optional.String
}

/*
FetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet 知识作品推荐/Knowledge Video
# [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param count 每页数量/Number per page
  - @param optional nil or *DouyinWebAPIApiFetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGetOpts - Optional Parameters:
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index
  - @param "Cookie" (optional.String) -  用户自行提供的Cookie/User provided Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet(ctx _context.Context, count int32, localVarOptionals *DouyinWebAPIApiFetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_knowledge_aweme"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("count", parameterToString(count, ""))
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16Opts Optional parameters for the method 'FetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16'
type DouyinWebAPIApiFetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16Opts struct {
	RefreshIndex optional.Int32
	Cookie       optional.String
}

/*
FetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_0 知识作品推荐/Knowledge Video
# [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param count 每页数量/Number per page
  - @param optional nil or *DouyinWebAPIApiFetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16Opts - Optional Parameters:
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index
  - @param "Cookie" (optional.String) -  用户自行提供的Cookie/User provided Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16(ctx _context.Context, count int32, localVarOptionals *DouyinWebAPIApiFetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_knowledge_aweme"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("count", parameterToString(count, ""))
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGetOpts Optional parameters for the method 'FetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet'
type DouyinWebAPIApiFetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGetOpts struct {
	RankType optional.Int32
}

/*
FetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet 获取直播间送礼用户排行榜/Get live room gift user ranking
# [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id &#x3D; \&quot;7356585666190461731\&quot; rank_type &#x3D; 30
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间room_id/Room room_id
  - @param optional nil or *DouyinWebAPIApiFetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGetOpts - Optional Parameters:
  - @param "RankType" (optional.Int32) -  排行类型/Leaderboard type

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet(ctx _context.Context, roomId string, localVarOptionals *DouyinWebAPIApiFetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_live_gift_ranking"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	if localVarOptionals != nil && localVarOptionals.RankType.IsSet() {
		localVarQueryParams.Add("rank_type", parameterToString(localVarOptionals.RankType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17Opts Optional parameters for the method 'FetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17'
type DouyinWebAPIApiFetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17Opts struct {
	RankType optional.Int32
}

/*
FetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_0 获取直播间送礼用户排行榜/Get live room gift user ranking
# [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id &#x3D; \&quot;7356585666190461731\&quot; rank_type &#x3D; 30
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间room_id/Room room_id
  - @param optional nil or *DouyinWebAPIApiFetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17Opts - Optional Parameters:
  - @param "RankType" (optional.Int32) -  排行类型/Leaderboard type

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17(ctx _context.Context, roomId string, localVarOptionals *DouyinWebAPIApiFetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_live_gift_ranking"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	if localVarOptionals != nil && localVarOptionals.RankType.IsSet() {
		localVarQueryParams.Add("rank_type", parameterToString(localVarOptionals.RankType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGetOpts Optional parameters for the method 'FetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet'
type DouyinWebAPIApiFetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGetOpts struct {
	Limit optional.Int32
}

/*
FetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet 抖音直播间商品信息/Douyin live room product information
# [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User&#39;s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie &#x3D; \&quot;YOUR_COOKIE\&quot; room_id &#x3D; \&quot;7356742011975715619\&quot; author_id &#x3D; \&quot;2207432981615527\&quot; limit &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间room_id/Room room_id
  - @param authorId 作者id/Author id
  - @param optional nil or *DouyinWebAPIApiFetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGetOpts - Optional Parameters:
  - @param "Limit" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet(ctx _context.Context, roomId string, authorId string, localVarOptionals *DouyinWebAPIApiFetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_live_room_product_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	localVarQueryParams.Add("author_id", parameterToString(authorId, ""))
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18Opts Optional parameters for the method 'FetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18'
type DouyinWebAPIApiFetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18Opts struct {
	Limit optional.Int32
}

/*
FetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_0 抖音直播间商品信息/Douyin live room product information
# [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User&#39;s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie &#x3D; \&quot;YOUR_COOKIE\&quot; room_id &#x3D; \&quot;7356742011975715619\&quot; author_id &#x3D; \&quot;2207432981615527\&quot; limit &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间room_id/Room room_id
  - @param authorId 作者id/Author id
  - @param optional nil or *DouyinWebAPIApiFetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18Opts - Optional Parameters:
  - @param "Limit" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18(ctx _context.Context, roomId string, authorId string, localVarOptionals *DouyinWebAPIApiFetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_live_room_product_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	localVarQueryParams.Add("author_id", parameterToString(authorId, ""))
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGetOpts Optional parameters for the method 'FetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet'
type DouyinWebAPIApiFetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGetOpts struct {
	Offset   optional.Int32
	Count    optional.Int32
	SearchId optional.String
}

/*
FetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet 获取指定关键词的直播搜索结果/Get live search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;动漫\&quot; offset &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGetOpts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SearchId" (optional.String) -  搜索id，翻页时需要提供/Search id, need to provide when paging

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_live_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchId.IsSet() {
		localVarQueryParams.Add("search_id", parameterToString(localVarOptionals.SearchId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19Opts Optional parameters for the method 'FetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19'
type DouyinWebAPIApiFetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19Opts struct {
	Offset   optional.Int32
	Count    optional.Int32
	SearchId optional.String
}

/*
FetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_0 获取指定关键词的直播搜索结果/Get live search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;动漫\&quot; offset &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19Opts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SearchId" (optional.String) -  搜索id，翻页时需要提供/Search id, need to provide when paging

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_live_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchId.IsSet() {
		localVarQueryParams.Add("search_id", parameterToString(localVarOptionals.SearchId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchMultiVideoApiV1DouyinWebFetchMultiVideoPostOpts Optional parameters for the method 'FetchMultiVideoApiV1DouyinWebFetchMultiVideoPost'
type DouyinWebAPIApiFetchMultiVideoApiV1DouyinWebFetchMultiVideoPostOpts struct {
	RequestBody optional.Interface
}

/*
FetchMultiVideoApiV1DouyinWebFetchMultiVideoPost 批量获取视频信息/Batch Get Video Information
# [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 &#x3D; 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 &#x3D; 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [\&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;]
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiFetchMultiVideoApiV1DouyinWebFetchMultiVideoPostOpts - Optional Parameters:
  - @param "RequestBody" (optional.Interface of []string) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchMultiVideoApiV1DouyinWebFetchMultiVideoPost(ctx _context.Context, localVarOptionals *DouyinWebAPIApiFetchMultiVideoApiV1DouyinWebFetchMultiVideoPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_multi_video"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.RequestBody.IsSet() {
		localVarOptionalRequestBody, localVarOptionalRequestBodyok := localVarOptionals.RequestBody.Value().([]string)
		if !localVarOptionalRequestBodyok {
			return localVarReturnValue, nil, reportError("requestBody should be []string")
		}
		localVarPostBody = &localVarOptionalRequestBody
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20Opts Optional parameters for the method 'FetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20'
type DouyinWebAPIApiFetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20Opts struct {
	RequestBody optional.Interface
}

/*
FetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_0 批量获取视频信息/Batch Get Video Information
# [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 &#x3D; 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 &#x3D; 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [\&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;]
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiFetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20Opts - Optional Parameters:
  - @param "RequestBody" (optional.Interface of []string) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20(ctx _context.Context, localVarOptionals *DouyinWebAPIApiFetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_multi_video"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.RequestBody.IsSet() {
		localVarOptionalRequestBody, localVarOptionalRequestBodyok := localVarOptionals.RequestBody.Value().([]string)
		if !localVarOptionalRequestBodyok {
			return localVarReturnValue, nil, reportError("requestBody should be []string")
		}
		localVarPostBody = &localVarOptionalRequestBody
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoApiV1DouyinWebFetchOneVideoGet 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
# [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7372484719365098803\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchOneVideoApiV1DouyinWebFetchOneVideoGet(ctx _context.Context, awemeId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_one_video"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoApiV1DouyinWebFetchOneVideoGet_0 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
# [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7372484719365098803\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchOneVideoApiV1DouyinWebFetchOneVideoGet_21(ctx _context.Context, awemeId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_one_video"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoApiV1DouyinWebFetchOneVideoV2Get 获取单个作品数据 V2/Get single video data V2
# [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7372484719365098803\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchOneVideoApiV1DouyinWebFetchOneVideoV2Get(ctx _context.Context, awemeId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_one_video_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_0 获取单个作品数据 V2/Get single video data V2
# [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7372484719365098803\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_22(ctx _context.Context, awemeId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_one_video_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet 根据分享链接获取单个作品数据/Get single video data by sharing link
# [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://v.douyin.com/e3x2fjE/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareUrl 分享链接/Share link

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet(ctx _context.Context, shareUrl string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_one_video_by_share_url"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_url", parameterToString(shareUrl, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_0 根据分享链接获取单个作品数据/Get single video data by sharing link
# [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://v.douyin.com/e3x2fjE/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareUrl 分享链接/Share link

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_23(ctx _context.Context, shareUrl string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_one_video_by_share_url"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_url", parameterToString(shareUrl, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet 获取单个作品视频弹幕数据/Get single video danmaku data
# [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id &#x3D; \&quot;7355433624046472498\&quot; duration &#x3D; 15134 end_time &#x3D; 15133 start_time &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param itemId 作品id/Video id
  - @param duration 视频总时长/Video total duration
  - @param endTime 结束时间/End time
  - @param startTime 开始时间/Start time

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet(ctx _context.Context, itemId string, duration int32, endTime int32, startTime int32) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_one_video_danmaku"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("item_id", parameterToString(itemId, ""))
	localVarQueryParams.Add("duration", parameterToString(duration, ""))
	localVarQueryParams.Add("end_time", parameterToString(endTime, ""))
	localVarQueryParams.Add("start_time", parameterToString(startTime, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_0 获取单个作品视频弹幕数据/Get single video danmaku data
# [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id &#x3D; \&quot;7355433624046472498\&quot; duration &#x3D; 15134 end_time &#x3D; 15133 start_time &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param itemId 作品id/Video id
  - @param duration 视频总时长/Video total duration
  - @param endTime 结束时间/End time
  - @param startTime 开始时间/Start time

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24(ctx _context.Context, itemId string, duration int32, endTime int32, startTime int32) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_one_video_danmaku"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("item_id", parameterToString(itemId, ""))
	localVarQueryParams.Add("duration", parameterToString(duration, ""))
	localVarQueryParams.Add("end_time", parameterToString(endTime, ""))
	localVarQueryParams.Add("start_time", parameterToString(startTime, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet 抖音实时挑战榜单/Douyin Real-time Challenge List
# [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param page 页码/Page number
  - @param pageSize 每页数量/Number per page

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet(ctx _context.Context, page int32, pageSize int32) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_real_time_challenge_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("page_size", parameterToString(pageSize, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_0 抖音实时挑战榜单/Douyin Real-time Challenge List
# [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param page 页码/Page number
  - @param pageSize 每页数量/Number per page

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_25(ctx _context.Context, page int32, pageSize int32) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_real_time_challenge_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("page_size", parameterToString(pageSize, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet 抖音实时上升热点榜/Douyin Real-time Rising Hot List
# [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param page 页码/Page number
  - @param pageSize 每页数量/Number per page
  - @param sentenceTag 分类标签/Category tag
  - @param order 排序方式/Sorting method

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet(ctx _context.Context, page int32, pageSize int32, sentenceTag string, order string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_real_time_rising_hot_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("page_size", parameterToString(pageSize, ""))
	localVarQueryParams.Add("sentence_tag", parameterToString(sentenceTag, ""))
	localVarQueryParams.Add("order", parameterToString(order, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_0 抖音实时上升热点榜/Douyin Real-time Rising Hot List
# [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param page 页码/Page number
  - @param pageSize 每页数量/Number per page
  - @param sentenceTag 分类标签/Category tag
  - @param order 排序方式/Sorting method

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26(ctx _context.Context, page int32, pageSize int32, sentenceTag string, order string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_real_time_rising_hot_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("page_size", parameterToString(pageSize, ""))
	localVarQueryParams.Add("sentence_tag", parameterToString(sentenceTag, ""))
	localVarQueryParams.Add("order", parameterToString(order, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGetOpts Optional parameters for the method 'FetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet'
type DouyinWebAPIApiFetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGetOpts struct {
	RefreshIndex optional.Int32
	Count        optional.Int32
}

/*
FetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet 获取相关作品推荐数据/Get related posts recommendation data
# [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7393365489105358132\&quot; refresh_index &#x3D; 1 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id
  - @param optional nil or *DouyinWebAPIApiFetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGetOpts - Optional Parameters:
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet(ctx _context.Context, awemeId string, localVarOptionals *DouyinWebAPIApiFetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_related_posts"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27Opts Optional parameters for the method 'FetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27'
type DouyinWebAPIApiFetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27Opts struct {
	RefreshIndex optional.Int32
	Count        optional.Int32
}

/*
FetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_0 获取相关作品推荐数据/Get related posts recommendation data
# [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7393365489105358132\&quot; refresh_index &#x3D; 1 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id
  - @param optional nil or *DouyinWebAPIApiFetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27Opts - Optional Parameters:
  - @param "RefreshIndex" (optional.Int32) -  翻页索引/Paging index
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27(ctx _context.Context, awemeId string, localVarOptionals *DouyinWebAPIApiFetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_related_posts"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchSearchChallengeApiV1DouyinWebFetchSearchChallengePostOpts Optional parameters for the method 'FetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost'
type DouyinWebAPIApiFetchSearchChallengeApiV1DouyinWebFetchSearchChallengePostOpts struct {
	SearchChallengeRequest optional.Interface
}

/*
FetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost 搜索话题/Search Challenge
# [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword &#x3D; \&quot;动漫\&quot; cursor &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiFetchSearchChallengeApiV1DouyinWebFetchSearchChallengePostOpts - Optional Parameters:
  - @param "SearchChallengeRequest" (optional.Interface of SearchChallengeRequest) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost(ctx _context.Context, localVarOptionals *DouyinWebAPIApiFetchSearchChallengeApiV1DouyinWebFetchSearchChallengePostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_search_challenge"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.SearchChallengeRequest.IsSet() {
		localVarOptionalSearchChallengeRequest, localVarOptionalSearchChallengeRequestok := localVarOptionals.SearchChallengeRequest.Value().(SearchChallengeRequest)
		if !localVarOptionalSearchChallengeRequestok {
			return localVarReturnValue, nil, reportError("searchChallengeRequest should be SearchChallengeRequest")
		}
		localVarPostBody = &localVarOptionalSearchChallengeRequest
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28Opts Optional parameters for the method 'FetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28'
type DouyinWebAPIApiFetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28Opts struct {
	SearchChallengeRequest optional.Interface
}

/*
FetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_0 搜索话题/Search Challenge
# [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword &#x3D; \&quot;动漫\&quot; cursor &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiFetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28Opts - Optional Parameters:
  - @param "SearchChallengeRequest" (optional.Interface of SearchChallengeRequest) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28(ctx _context.Context, localVarOptionals *DouyinWebAPIApiFetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_search_challenge"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.SearchChallengeRequest.IsSet() {
		localVarOptionalSearchChallengeRequest, localVarOptionalSearchChallengeRequestok := localVarOptionals.SearchChallengeRequest.Value().(SearchChallengeRequest)
		if !localVarOptionalSearchChallengeRequestok {
			return localVarReturnValue, nil, reportError("searchChallengeRequest should be SearchChallengeRequest")
		}
		localVarPostBody = &localVarOptionalSearchChallengeRequest
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGetOpts Optional parameters for the method 'FetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet'
type DouyinWebAPIApiFetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGetOpts struct {
	Cookie optional.String
}

/*
FetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet 短剧作品/Series Video
# [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param offset 页码/Page number
  - @param count 每页数量/Number per page
  - @param contentType 短剧类型/Subtype
  - @param optional nil or *DouyinWebAPIApiFetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGetOpts - Optional Parameters:
  - @param "Cookie" (optional.String) -  用户自行提供的Cookie/User provided Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet(ctx _context.Context, offset int32, count int32, contentType int32, localVarOptionals *DouyinWebAPIApiFetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_series_aweme"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("offset", parameterToString(offset, ""))
	localVarQueryParams.Add("count", parameterToString(count, ""))
	localVarQueryParams.Add("content_type", parameterToString(contentType, ""))
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29Opts Optional parameters for the method 'FetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29'
type DouyinWebAPIApiFetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29Opts struct {
	Cookie optional.String
}

/*
FetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_0 短剧作品/Series Video
# [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param offset 页码/Page number
  - @param count 每页数量/Number per page
  - @param contentType 短剧类型/Subtype
  - @param optional nil or *DouyinWebAPIApiFetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29Opts - Optional Parameters:
  - @param "Cookie" (optional.String) -  用户自行提供的Cookie/User provided Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29(ctx _context.Context, offset int32, count int32, contentType int32, localVarOptionals *DouyinWebAPIApiFetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_series_aweme"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("offset", parameterToString(offset, ""))
	localVarQueryParams.Add("count", parameterToString(count, ""))
	localVarQueryParams.Add("content_type", parameterToString(contentType, ""))
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGetOpts Optional parameters for the method 'FetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet'
type DouyinWebAPIApiFetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGetOpts struct {
	MaxCursor optional.Int32
	Counts    optional.Int32
}

/*
FetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet 获取用户收藏作品数据/Get user collection video data
# [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User&#39;s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie &#x3D; \&quot;YOUR_COOKIE\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie
  - @param optional nil or *DouyinWebAPIApiFetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGetOpts - Optional Parameters:
  - @param "MaxCursor" (optional.Int32) -  最大游标/Maximum cursor
  - @param "Counts" (optional.Int32) -  每页数量/Number per page

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet(ctx _context.Context, cookie string, localVarOptionals *DouyinWebAPIApiFetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_collection_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("cookie", parameterToString(cookie, ""))
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Counts.IsSet() {
		localVarQueryParams.Add("counts", parameterToString(localVarOptionals.Counts.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30Opts Optional parameters for the method 'FetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30'
type DouyinWebAPIApiFetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30Opts struct {
	MaxCursor optional.Int32
	Counts    optional.Int32
}

/*
FetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_0 获取用户收藏作品数据/Get user collection video data
# [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User&#39;s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie &#x3D; \&quot;YOUR_COOKIE\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie
  - @param optional nil or *DouyinWebAPIApiFetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30Opts - Optional Parameters:
  - @param "MaxCursor" (optional.Int32) -  最大游标/Maximum cursor
  - @param "Counts" (optional.Int32) -  每页数量/Number per page

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30(ctx _context.Context, cookie string, localVarOptionals *DouyinWebAPIApiFetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_collection_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("cookie", parameterToString(cookie, ""))
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Counts.IsSet() {
		localVarQueryParams.Add("counts", parameterToString(localVarOptionals.Counts.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGetOpts Optional parameters for the method 'FetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet'
type DouyinWebAPIApiFetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGetOpts struct {
	MaxCursor optional.Int32
	Counts    optional.Int32
}

/*
FetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet 获取用户收藏夹数据/Get user collection data
# [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id &#x3D; \&quot;\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param collectsId 收藏夹id/Collection id
  - @param optional nil or *DouyinWebAPIApiFetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGetOpts - Optional Parameters:
  - @param "MaxCursor" (optional.Int32) -  最大游标/Maximum cursor
  - @param "Counts" (optional.Int32) -  每页数量/Number per page

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet(ctx _context.Context, collectsId string, localVarOptionals *DouyinWebAPIApiFetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_collects_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("collects_id", parameterToString(collectsId, ""))
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Counts.IsSet() {
		localVarQueryParams.Add("counts", parameterToString(localVarOptionals.Counts.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31Opts Optional parameters for the method 'FetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31'
type DouyinWebAPIApiFetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31Opts struct {
	MaxCursor optional.Int32
	Counts    optional.Int32
}

/*
FetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_0 获取用户收藏夹数据/Get user collection data
# [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id &#x3D; \&quot;\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param collectsId 收藏夹id/Collection id
  - @param optional nil or *DouyinWebAPIApiFetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31Opts - Optional Parameters:
  - @param "MaxCursor" (optional.Int32) -  最大游标/Maximum cursor
  - @param "Counts" (optional.Int32) -  每页数量/Number per page

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31(ctx _context.Context, collectsId string, localVarOptionals *DouyinWebAPIApiFetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_collects_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("collects_id", parameterToString(collectsId, ""))
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Counts.IsSet() {
		localVarQueryParams.Add("counts", parameterToString(localVarOptionals.Counts.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet 抖音用户粉丝兴趣/Douyin User Fans Interest
# [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUid 用户sec_uid/Sec_uid of user
  - @param interestType 兴趣类型/Interest type

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet(ctx _context.Context, secUid string, interestType string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_fans_interest"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_uid", parameterToString(secUid, ""))
	localVarQueryParams.Add("interest_type", parameterToString(interestType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_0 抖音用户粉丝兴趣/Douyin User Fans Interest
# [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUid 用户sec_uid/Sec_uid of user
  - @param interestType 兴趣类型/Interest type

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_32(ctx _context.Context, secUid string, interestType string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_fans_interest"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_uid", parameterToString(secUid, ""))
	localVarQueryParams.Add("interest_type", parameterToString(interestType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserFansListApiV1DouyinWebFetchUserFansListGetOpts Optional parameters for the method 'FetchUserFansListApiV1DouyinWebFetchUserFansListGet'
type DouyinWebAPIApiFetchUserFansListApiV1DouyinWebFetchUserFansListGetOpts struct {
	SecUserId  optional.String
	MaxTime    optional.String
	Count      optional.Int32
	SourceType optional.Int32
}

/*
FetchUserFansListApiV1DouyinWebFetchUserFansListGet 获取用户粉丝列表/Get user fans list
# [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传&#x60;0&#x60;，source_type传&#x60;2&#x60;，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传&#x60;1&#x60;，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为&#x60;1&#x60;，第一次请求时使用&#x60;2&#x60;作为来源类型，然后再次请求时使用&#x60;1&#x60;作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass &#x60;0&#x60; for max_time, pass &#x60;2&#x60; for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass &#x60;1&#x60; for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is &#x60;1&#x60;, use &#x60;2&#x60; as the source type for the first request, and then use &#x60;1&#x60; as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\&quot; max_time &#x3D; \&quot;0\&quot; count &#x3D; 20 source_type &#x3D; 2
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiFetchUserFansListApiV1DouyinWebFetchUserFansListGetOpts - Optional Parameters:
  - @param "SecUserId" (optional.String) -  用户sec_user_id/User sec_user_id
  - @param "MaxTime" (optional.String) -  最大时间戳/Maximum timestamp
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SourceType" (optional.Int32) -  来源类型/Source type

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserFansListApiV1DouyinWebFetchUserFansListGet(ctx _context.Context, localVarOptionals *DouyinWebAPIApiFetchUserFansListApiV1DouyinWebFetchUserFansListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_fans_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.SecUserId.IsSet() {
		localVarQueryParams.Add("sec_user_id", parameterToString(localVarOptionals.SecUserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxTime.IsSet() {
		localVarQueryParams.Add("max_time", parameterToString(localVarOptionals.MaxTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceType.IsSet() {
		localVarQueryParams.Add("source_type", parameterToString(localVarOptionals.SourceType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserFansListApiV1DouyinWebFetchUserFansListGet_33Opts Optional parameters for the method 'FetchUserFansListApiV1DouyinWebFetchUserFansListGet_33'
type DouyinWebAPIApiFetchUserFansListApiV1DouyinWebFetchUserFansListGet_33Opts struct {
	SecUserId  optional.String
	MaxTime    optional.String
	Count      optional.Int32
	SourceType optional.Int32
}

/*
FetchUserFansListApiV1DouyinWebFetchUserFansListGet_0 获取用户粉丝列表/Get user fans list
# [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传&#x60;0&#x60;，source_type传&#x60;2&#x60;，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传&#x60;1&#x60;，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为&#x60;1&#x60;，第一次请求时使用&#x60;2&#x60;作为来源类型，然后再次请求时使用&#x60;1&#x60;作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass &#x60;0&#x60; for max_time, pass &#x60;2&#x60; for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass &#x60;1&#x60; for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is &#x60;1&#x60;, use &#x60;2&#x60; as the source type for the first request, and then use &#x60;1&#x60; as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\&quot; max_time &#x3D; \&quot;0\&quot; count &#x3D; 20 source_type &#x3D; 2
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiFetchUserFansListApiV1DouyinWebFetchUserFansListGet_33Opts - Optional Parameters:
  - @param "SecUserId" (optional.String) -  用户sec_user_id/User sec_user_id
  - @param "MaxTime" (optional.String) -  最大时间戳/Maximum timestamp
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SourceType" (optional.Int32) -  来源类型/Source type

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserFansListApiV1DouyinWebFetchUserFansListGet_33(ctx _context.Context, localVarOptionals *DouyinWebAPIApiFetchUserFansListApiV1DouyinWebFetchUserFansListGet_33Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_fans_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.SecUserId.IsSet() {
		localVarQueryParams.Add("sec_user_id", parameterToString(localVarOptionals.SecUserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxTime.IsSet() {
		localVarQueryParams.Add("max_time", parameterToString(localVarOptionals.MaxTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceType.IsSet() {
		localVarQueryParams.Add("source_type", parameterToString(localVarOptionals.SourceType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGetOpts Optional parameters for the method 'FetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet'
type DouyinWebAPIApiFetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGetOpts struct {
	Option optional.String
}

/*
FetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet 抖音用户粉丝画像/Douyin User Fans Portrait
# [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUid 用户sec_uid/Sec_uid of user
  - @param optional nil or *DouyinWebAPIApiFetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGetOpts - Optional Parameters:
  - @param "Option" (optional.String) -  选项/Option

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet(ctx _context.Context, secUid string, localVarOptionals *DouyinWebAPIApiFetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_fans_portrait"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_uid", parameterToString(secUid, ""))
	if localVarOptionals != nil && localVarOptionals.Option.IsSet() {
		localVarQueryParams.Add("option", parameterToString(localVarOptionals.Option.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34Opts Optional parameters for the method 'FetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34'
type DouyinWebAPIApiFetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34Opts struct {
	Option optional.String
}

/*
FetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_0 抖音用户粉丝画像/Douyin User Fans Portrait
# [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUid 用户sec_uid/Sec_uid of user
  - @param optional nil or *DouyinWebAPIApiFetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34Opts - Optional Parameters:
  - @param "Option" (optional.String) -  选项/Option

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34(ctx _context.Context, secUid string, localVarOptionals *DouyinWebAPIApiFetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_fans_portrait"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_uid", parameterToString(secUid, ""))
	if localVarOptionals != nil && localVarOptionals.Option.IsSet() {
		localVarQueryParams.Add("option", parameterToString(localVarOptionals.Option.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGetOpts Optional parameters for the method 'FetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet'
type DouyinWebAPIApiFetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGetOpts struct {
	SecUserId  optional.String
	MaxTime    optional.String
	Count      optional.Int32
	SourceType optional.Int32
}

/*
FetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet 获取用户关注列表/Get user following list
# [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传&#x60;0&#x60;，source_type传&#x60;2&#x60;，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传&#x60;1&#x60;，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为&#x60;1&#x60;，第一次请求时使用&#x60;2&#x60;作为来源类型，然后再次请求时使用&#x60;1&#x60;作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass &#x60;0&#x60; for max_time, pass &#x60;2&#x60; for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass &#x60;1&#x60; for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is &#x60;1&#x60;, use &#x60;2&#x60; as the source type for the first request, and then use &#x60;1&#x60; as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\&quot; max_time &#x3D; \&quot;0\&quot; count &#x3D; 20 source_type &#x3D; 2
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiFetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGetOpts - Optional Parameters:
  - @param "SecUserId" (optional.String) -  用户sec_user_id/User sec_user_id
  - @param "MaxTime" (optional.String) -  最大时间戳/Maximum timestamp
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SourceType" (optional.Int32) -  来源类型/Source type

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet(ctx _context.Context, localVarOptionals *DouyinWebAPIApiFetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_following_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.SecUserId.IsSet() {
		localVarQueryParams.Add("sec_user_id", parameterToString(localVarOptionals.SecUserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxTime.IsSet() {
		localVarQueryParams.Add("max_time", parameterToString(localVarOptionals.MaxTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceType.IsSet() {
		localVarQueryParams.Add("source_type", parameterToString(localVarOptionals.SourceType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35Opts Optional parameters for the method 'FetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35'
type DouyinWebAPIApiFetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35Opts struct {
	SecUserId  optional.String
	MaxTime    optional.String
	Count      optional.Int32
	SourceType optional.Int32
}

/*
FetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_0 获取用户关注列表/Get user following list
# [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传&#x60;0&#x60;，source_type传&#x60;2&#x60;，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传&#x60;1&#x60;，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为&#x60;1&#x60;，第一次请求时使用&#x60;2&#x60;作为来源类型，然后再次请求时使用&#x60;1&#x60;作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass &#x60;0&#x60; for max_time, pass &#x60;2&#x60; for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass &#x60;1&#x60; for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is &#x60;1&#x60;, use &#x60;2&#x60; as the source type for the first request, and then use &#x60;1&#x60; as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\&quot; max_time &#x3D; \&quot;0\&quot; count &#x3D; 20 source_type &#x3D; 2
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiFetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35Opts - Optional Parameters:
  - @param "SecUserId" (optional.String) -  用户sec_user_id/User sec_user_id
  - @param "MaxTime" (optional.String) -  最大时间戳/Maximum timestamp
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SourceType" (optional.Int32) -  来源类型/Source type

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35(ctx _context.Context, localVarOptionals *DouyinWebAPIApiFetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_following_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.SecUserId.IsSet() {
		localVarQueryParams.Add("sec_user_id", parameterToString(localVarOptionals.SecUserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxTime.IsSet() {
		localVarQueryParams.Add("max_time", parameterToString(localVarOptionals.MaxTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SourceType.IsSet() {
		localVarQueryParams.Add("source_type", parameterToString(localVarOptionals.SourceType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGetOpts Optional parameters for the method 'FetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet'
type DouyinWebAPIApiFetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGetOpts struct {
	MaxCursor optional.Int32
	Counts    optional.Int32
	Cookie    optional.String
}

/*
FetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet 获取用户喜欢作品数据/Get user like video data
# [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User&#39;s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id
  - @param optional nil or *DouyinWebAPIApiFetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGetOpts - Optional Parameters:
  - @param "MaxCursor" (optional.Int32) -  最大游标/Maximum cursor
  - @param "Counts" (optional.Int32) -  每页数量/Number per page
  - @param "Cookie" (optional.String) -  用户网页版抖音Cookie/Your web version of Douyin Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet(ctx _context.Context, secUserId string, localVarOptionals *DouyinWebAPIApiFetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_like_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Counts.IsSet() {
		localVarQueryParams.Add("counts", parameterToString(localVarOptionals.Counts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36Opts Optional parameters for the method 'FetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36'
type DouyinWebAPIApiFetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36Opts struct {
	MaxCursor optional.Int32
	Counts    optional.Int32
	Cookie    optional.String
}

/*
FetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_0 获取用户喜欢作品数据/Get user like video data
# [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User&#39;s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id
  - @param optional nil or *DouyinWebAPIApiFetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36Opts - Optional Parameters:
  - @param "MaxCursor" (optional.Int32) -  最大游标/Maximum cursor
  - @param "Counts" (optional.Int32) -  每页数量/Number per page
  - @param "Cookie" (optional.String) -  用户网页版抖音Cookie/Your web version of Douyin Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36(ctx _context.Context, secUserId string, localVarOptionals *DouyinWebAPIApiFetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_like_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Counts.IsSet() {
		localVarQueryParams.Add("counts", parameterToString(localVarOptionals.Counts.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet 使用UID获取用户开播信息/Get user live information by UID
# [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid &#x3D; \&quot;3081254195702747\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uid 用户UID/User UID

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet(ctx _context.Context, uid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_live_info_by_uid"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_0 使用UID获取用户开播信息/Get user live information by UID
# [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid &#x3D; \&quot;3081254195702747\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uid 用户UID/User UID

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_37(ctx _context.Context, uid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_live_info_by_uid"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet 获取用户直播流数据/Get user live video data
# [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id &#x3D; \&quot;376034101029\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param webcastId 直播间webcast_id/Room webcast_id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet(ctx _context.Context, webcastId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_live_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("webcast_id", parameterToString(webcastId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_0 获取用户直播流数据/Get user live video data
# [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id &#x3D; \&quot;376034101029\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param webcastId 直播间webcast_id/Room webcast_id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_38(ctx _context.Context, webcastId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_live_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("webcast_id", parameterToString(webcastId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet 获取指定用户的直播流数据/Get live video data of specified user
# [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id &#x3D; \&quot;7318296342189919011\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间room_id/Room room_id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet(ctx _context.Context, roomId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_live_videos_by_room_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_0 获取指定用户的直播流数据/Get live video data of specified user
# [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id &#x3D; \&quot;7318296342189919011\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间room_id/Room room_id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_39(ctx _context.Context, roomId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_live_videos_by_room_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
# [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id &#x3D; \&quot;7462723839303093032\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间room_id/Room room_id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get(ctx _context.Context, roomId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_live_videos_by_room_id_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_0 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
# [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id &#x3D; \&quot;7462723839303093032\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间room_id/Room room_id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_40(ctx _context.Context, roomId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_live_videos_by_room_id_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
# [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user&#39;s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid &#x3D; \&quot;MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUid 用户sec_uid/User sec_uid

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet(ctx _context.Context, secUid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_live_videos_by_sec_uid"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_uid", parameterToString(secUid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_0 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
# [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user&#39;s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid &#x3D; \&quot;MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUid 用户sec_uid/User sec_uid

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_41(ctx _context.Context, secUid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_live_videos_by_sec_uid"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_uid", parameterToString(secUid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGetOpts Optional parameters for the method 'FetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet'
type DouyinWebAPIApiFetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGetOpts struct {
	MaxCursor optional.Int32
	Counts    optional.Int32
}

/*
FetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet 获取用户合辑作品数据/Get user mix video data
# [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url &#x3D; https://www.douyin.com/collection/7348687990509553679 mix_id &#x3D; \&quot;7348687990509553679\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param mixId 合辑id/Mix id
  - @param optional nil or *DouyinWebAPIApiFetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGetOpts - Optional Parameters:
  - @param "MaxCursor" (optional.Int32) -  最大游标/Maximum cursor
  - @param "Counts" (optional.Int32) -  每页数量/Number per page

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet(ctx _context.Context, mixId string, localVarOptionals *DouyinWebAPIApiFetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_mix_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("mix_id", parameterToString(mixId, ""))
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Counts.IsSet() {
		localVarQueryParams.Add("counts", parameterToString(localVarOptionals.Counts.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42Opts Optional parameters for the method 'FetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42'
type DouyinWebAPIApiFetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42Opts struct {
	MaxCursor optional.Int32
	Counts    optional.Int32
}

/*
FetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_0 获取用户合辑作品数据/Get user mix video data
# [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url &#x3D; https://www.douyin.com/collection/7348687990509553679 mix_id &#x3D; \&quot;7348687990509553679\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param mixId 合辑id/Mix id
  - @param optional nil or *DouyinWebAPIApiFetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42Opts - Optional Parameters:
  - @param "MaxCursor" (optional.Int32) -  最大游标/Maximum cursor
  - @param "Counts" (optional.Int32) -  每页数量/Number per page

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42(ctx _context.Context, mixId string, localVarOptionals *DouyinWebAPIApiFetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_mix_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("mix_id", parameterToString(mixId, ""))
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Counts.IsSet() {
		localVarQueryParams.Add("counts", parameterToString(localVarOptionals.Counts.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGetOpts Optional parameters for the method 'FetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet'
type DouyinWebAPIApiFetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGetOpts struct {
	MaxCursor  optional.String
	Count      optional.Int32
	FilterType optional.String
	Cookie     optional.String
}

/*
FetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet 获取用户主页作品数据/Get user homepage video data
# [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User&#39;s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\&quot; max_cursor &#x3D; \&quot;0\&quot; counts &#x3D; 20 filter_type &#x3D; \&quot;0\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id
  - @param optional nil or *DouyinWebAPIApiFetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGetOpts - Optional Parameters:
  - @param "MaxCursor" (optional.String) -  最大游标/Maximum cursor
  - @param "Count" (optional.Int32) -  每页数量/Number per page
  - @param "FilterType" (optional.String) -  过滤类型/Filter type
  - @param "Cookie" (optional.String) -  用户网页版抖音Cookie/Your web version of Douyin Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet(ctx _context.Context, secUserId string, localVarOptionals *DouyinWebAPIApiFetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_post_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterType.IsSet() {
		localVarQueryParams.Add("filter_type", parameterToString(localVarOptionals.FilterType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43Opts Optional parameters for the method 'FetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43'
type DouyinWebAPIApiFetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43Opts struct {
	MaxCursor  optional.String
	Count      optional.Int32
	FilterType optional.String
	Cookie     optional.String
}

/*
FetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_0 获取用户主页作品数据/Get user homepage video data
# [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User&#39;s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\&quot; max_cursor &#x3D; \&quot;0\&quot; counts &#x3D; 20 filter_type &#x3D; \&quot;0\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id
  - @param optional nil or *DouyinWebAPIApiFetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43Opts - Optional Parameters:
  - @param "MaxCursor" (optional.String) -  最大游标/Maximum cursor
  - @param "Count" (optional.Int32) -  每页数量/Number per page
  - @param "FilterType" (optional.String) -  过滤类型/Filter type
  - @param "Cookie" (optional.String) -  用户网页版抖音Cookie/Your web version of Douyin Cookie

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43(ctx _context.Context, secUserId string, localVarOptionals *DouyinWebAPIApiFetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_post_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterType.IsSet() {
		localVarQueryParams.Add("filter_type", parameterToString(localVarOptionals.FilterType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet 使用Short ID获取用户信息/Get user information by Short ID
# [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id &#x3D; \&quot;114131058\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shortId 用户Short ID/User Short ID

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet(ctx _context.Context, shortId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_profile_by_short_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("short_id", parameterToString(shortId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_0 使用Short ID获取用户信息/Get user information by Short ID
# [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id &#x3D; \&quot;114131058\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shortId 用户Short ID/User Short ID

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_44(ctx _context.Context, shortId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_profile_by_short_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("short_id", parameterToString(shortId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet 使用UID获取用户信息/Get user information by UID
# [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid &#x3D; \&quot;68141954464\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uid 用户UID/User UID

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet(ctx _context.Context, uid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_profile_by_uid"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_0 使用UID获取用户信息/Get user information by UID
# [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid &#x3D; \&quot;68141954464\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uid 用户UID/User UID

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_45(ctx _context.Context, uid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_profile_by_uid"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGetOpts Optional parameters for the method 'FetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet'
type DouyinWebAPIApiFetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGetOpts struct {
	Offset         optional.Int32
	Count          optional.Int32
	DouyinUserFans optional.String
	DouyinUserType optional.String
	SearchId       optional.String
}

/*
FetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
# [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \&quot;0_1k\&quot;: 1000以下, \&quot;1k_1w\&quot;: 1000-1万, \&quot;1w_10w\&quot;: 1w-10w, \&quot;10w_100w\&quot;: 10w-100w，\&quot;100w_\&quot;: 100w以上 - douyin_user_type: 留空:不限, \&quot;common_user\&quot;: 普通用户, \&quot;enterprise_user\&quot;: 企业认证, \&quot;personal_user\&quot;: 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \&quot;0_1k\&quot;: Below 1000, \&quot;1k_1w\&quot;: 1000-10,000, \&quot;1w_10w\&quot;: 10,000-100,000, \&quot;10w_100w\&quot;: 100,000-1 million, \&quot;100w_\&quot;: More than 1 million - douyin_user_type: Leave blank: Unlimited, \&quot;common_user\&quot;: Ordinary user, \&quot;enterprise_user\&quot;: Enterprise certification, \&quot;personal_user\&quot;: Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;动漫\&quot; offset &#x3D; 0 count &#x3D; 20 douyin_user_fans &#x3D; \&quot;\&quot; douyin_user_type &#x3D; \&quot;\&quot; search_id &#x3D; \&quot;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGetOpts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "DouyinUserFans" (optional.String) -  粉丝数/Fans
  - @param "DouyinUserType" (optional.String) -  用户类型/User type
  - @param "SearchId" (optional.String) -  搜索id，翻页时需要提供/Search id, need to provide when paging

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DouyinUserFans.IsSet() {
		localVarQueryParams.Add("douyin_user_fans", parameterToString(localVarOptionals.DouyinUserFans.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DouyinUserType.IsSet() {
		localVarQueryParams.Add("douyin_user_type", parameterToString(localVarOptionals.DouyinUserType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchId.IsSet() {
		localVarQueryParams.Add("search_id", parameterToString(localVarOptionals.SearchId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46Opts Optional parameters for the method 'FetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46'
type DouyinWebAPIApiFetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46Opts struct {
	Offset         optional.Int32
	Count          optional.Int32
	DouyinUserFans optional.String
	DouyinUserType optional.String
	SearchId       optional.String
}

/*
FetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_0 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
# [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \&quot;0_1k\&quot;: 1000以下, \&quot;1k_1w\&quot;: 1000-1万, \&quot;1w_10w\&quot;: 1w-10w, \&quot;10w_100w\&quot;: 10w-100w，\&quot;100w_\&quot;: 100w以上 - douyin_user_type: 留空:不限, \&quot;common_user\&quot;: 普通用户, \&quot;enterprise_user\&quot;: 企业认证, \&quot;personal_user\&quot;: 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \&quot;0_1k\&quot;: Below 1000, \&quot;1k_1w\&quot;: 1000-10,000, \&quot;1w_10w\&quot;: 10,000-100,000, \&quot;10w_100w\&quot;: 100,000-1 million, \&quot;100w_\&quot;: More than 1 million - douyin_user_type: Leave blank: Unlimited, \&quot;common_user\&quot;: Ordinary user, \&quot;enterprise_user\&quot;: Enterprise certification, \&quot;personal_user\&quot;: Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;动漫\&quot; offset &#x3D; 0 count &#x3D; 20 douyin_user_fans &#x3D; \&quot;\&quot; douyin_user_type &#x3D; \&quot;\&quot; search_id &#x3D; \&quot;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46Opts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "DouyinUserFans" (optional.String) -  粉丝数/Fans
  - @param "DouyinUserType" (optional.String) -  用户类型/User type
  - @param "SearchId" (optional.String) -  搜索id，翻页时需要提供/Search id, need to provide when paging

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DouyinUserFans.IsSet() {
		localVarQueryParams.Add("douyin_user_fans", parameterToString(localVarOptionals.DouyinUserFans.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DouyinUserType.IsSet() {
		localVarQueryParams.Add("douyin_user_type", parameterToString(localVarOptionals.DouyinUserType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchId.IsSet() {
		localVarQueryParams.Add("search_id", parameterToString(localVarOptionals.SearchId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2GetOpts Optional parameters for the method 'FetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get'
type DouyinWebAPIApiFetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2GetOpts struct {
	Cursor optional.Int32
}

/*
FetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
# [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; cursor &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2GetOpts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_search_result_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47Opts Optional parameters for the method 'FetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47'
type DouyinWebAPIApiFetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47Opts struct {
	Cursor optional.Int32
}

/*
FetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_0 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
# [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; cursor &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47Opts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_search_result_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3GetOpts Optional parameters for the method 'FetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get'
type DouyinWebAPIApiFetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3GetOpts struct {
	Cursor         optional.String
	DouyinUserType optional.String
	DouyinUserFans optional.String
}

/*
FetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
# [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \&quot;0_1k\&quot;: 1000以下, \&quot;1k_1w\&quot;: 1000-1万, \&quot;1w_10w\&quot;: 1w-10w, \&quot;10w_100w\&quot;: 10w-100w，\&quot;100w_\&quot;: 100w以上 - douyin_user_type: 留空:不限, \&quot;common_user\&quot;: 普通用户, \&quot;enterprise_user\&quot;: 企业认证, \&quot;personal_user\&quot;: 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \&quot;0_1k\&quot;: Below 1000, \&quot;1k_1w\&quot;: 1000-10,000, \&quot;1w_10w\&quot;: 10,000-100,000, \&quot;10w_100w\&quot;: 100,000-1 million, \&quot;100w_\&quot;: More than 1 million - douyin_user_type: Leave blank: Unlimited, \&quot;common_user\&quot;: Ordinary user, \&quot;enterprise_user\&quot;: Enterprise certification, \&quot;personal_user\&quot;: Personal certification ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; cursor &#x3D; \&quot;0\&quot; douyin_user_fans &#x3D; \&quot;\&quot; douyin_user_type &#x3D; \&quot;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3GetOpts - Optional Parameters:
  - @param "Cursor" (optional.String) -  游标/Cursor
  - @param "DouyinUserType" (optional.String) -  用户类型/User type
  - @param "DouyinUserFans" (optional.String) -  粉丝数/Fans

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_search_result_v3"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DouyinUserType.IsSet() {
		localVarQueryParams.Add("douyin_user_type", parameterToString(localVarOptionals.DouyinUserType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DouyinUserFans.IsSet() {
		localVarQueryParams.Add("douyin_user_fans", parameterToString(localVarOptionals.DouyinUserFans.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48Opts Optional parameters for the method 'FetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48'
type DouyinWebAPIApiFetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48Opts struct {
	Cursor         optional.String
	DouyinUserType optional.String
	DouyinUserFans optional.String
}

/*
FetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_0 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
# [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \&quot;0_1k\&quot;: 1000以下, \&quot;1k_1w\&quot;: 1000-1万, \&quot;1w_10w\&quot;: 1w-10w, \&quot;10w_100w\&quot;: 10w-100w，\&quot;100w_\&quot;: 100w以上 - douyin_user_type: 留空:不限, \&quot;common_user\&quot;: 普通用户, \&quot;enterprise_user\&quot;: 企业认证, \&quot;personal_user\&quot;: 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \&quot;0_1k\&quot;: Below 1000, \&quot;1k_1w\&quot;: 1000-10,000, \&quot;1w_10w\&quot;: 10,000-100,000, \&quot;10w_100w\&quot;: 100,000-1 million, \&quot;100w_\&quot;: More than 1 million - douyin_user_type: Leave blank: Unlimited, \&quot;common_user\&quot;: Ordinary user, \&quot;enterprise_user\&quot;: Enterprise certification, \&quot;personal_user\&quot;: Personal certification ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; cursor &#x3D; \&quot;0\&quot; douyin_user_fans &#x3D; \&quot;\&quot; douyin_user_type &#x3D; \&quot;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48Opts - Optional Parameters:
  - @param "Cursor" (optional.String) -  游标/Cursor
  - @param "DouyinUserType" (optional.String) -  用户类型/User type
  - @param "DouyinUserFans" (optional.String) -  粉丝数/Fans

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_user_search_result_v3"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DouyinUserType.IsSet() {
		localVarQueryParams.Add("douyin_user_type", parameterToString(localVarOptionals.DouyinUserType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DouyinUserFans.IsSet() {
		localVarQueryParams.Add("douyin_user_fans", parameterToString(localVarOptionals.DouyinUserFans.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet 抖音视频榜单/Douyin Video Billboard
# [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param date 日期/Date
  - @param page 页码/Page number
  - @param pageSize 每页数量/Number per page
  - @param subType 子类型/Subtype

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet(ctx _context.Context, date int32, page int32, pageSize int32, subType int32) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_billboard"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("date", parameterToString(date, ""))
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("page_size", parameterToString(pageSize, ""))
	localVarQueryParams.Add("sub_type", parameterToString(subType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_0 抖音视频榜单/Douyin Video Billboard
# [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param date 日期/Date
  - @param page 页码/Page number
  - @param pageSize 每页数量/Number per page
  - @param subType 子类型/Subtype

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49(ctx _context.Context, date int32, page int32, pageSize int32, subType int32) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_billboard"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("date", parameterToString(date, ""))
	localVarQueryParams.Add("page", parameterToString(page, ""))
	localVarQueryParams.Add("page_size", parameterToString(pageSize, ""))
	localVarQueryParams.Add("sub_type", parameterToString(subType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGetOpts Optional parameters for the method 'FetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet'
type DouyinWebAPIApiFetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGetOpts struct {
	Count        optional.Int32
	RefreshIndex optional.Int32
}

/*
FetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet 抖音视频频道数据/Douyin video channel data
# [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id &#x3D; 300203 count &#x3D; 10 refresh_index &#x3D; 1
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param tagId 标签id/Tag id
  - @param optional nil or *DouyinWebAPIApiFetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGetOpts - Optional Parameters:
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "RefreshIndex" (optional.Int32) -  刷新索引/Refresh index

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet(ctx _context.Context, tagId int32, localVarOptionals *DouyinWebAPIApiFetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_channel_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("tag_id", parameterToString(tagId, ""))
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50Opts Optional parameters for the method 'FetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50'
type DouyinWebAPIApiFetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50Opts struct {
	Count        optional.Int32
	RefreshIndex optional.Int32
}

/*
FetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_0 抖音视频频道数据/Douyin video channel data
# [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id &#x3D; 300203 count &#x3D; 10 refresh_index &#x3D; 1
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param tagId 标签id/Tag id
  - @param optional nil or *DouyinWebAPIApiFetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50Opts - Optional Parameters:
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "RefreshIndex" (optional.Int32) -  刷新索引/Refresh index

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50(ctx _context.Context, tagId int32, localVarOptionals *DouyinWebAPIApiFetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_channel_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("tag_id", parameterToString(tagId, ""))
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RefreshIndex.IsSet() {
		localVarQueryParams.Add("refresh_index", parameterToString(localVarOptionals.RefreshIndex.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGetOpts Optional parameters for the method 'FetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet'
type DouyinWebAPIApiFetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGetOpts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet 获取单个视频评论数据/Get single video comments data
# [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7372484719365098803\&quot; cursor &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id
  - @param optional nil or *DouyinWebAPIApiFetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGetOpts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet(ctx _context.Context, awemeId string, localVarOptionals *DouyinWebAPIApiFetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_comments"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51Opts Optional parameters for the method 'FetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51'
type DouyinWebAPIApiFetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51Opts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_0 获取单个视频评论数据/Get single video comments data
# [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7372484719365098803\&quot; cursor &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id
  - @param optional nil or *DouyinWebAPIApiFetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51Opts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51(ctx _context.Context, awemeId string, localVarOptionals *DouyinWebAPIApiFetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_comments"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGetOpts Optional parameters for the method 'FetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet'
type DouyinWebAPIApiFetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGetOpts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet 获取指定视频的评论回复数据/Get comment replies data of specified video
# [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7354666303006723354\&quot; comment_id &#x3D; \&quot;7354669356632638218\&quot; cursor &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param itemId 作品id/Video id
  - @param commentId 评论id/Comment id
  - @param optional nil or *DouyinWebAPIApiFetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGetOpts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet(ctx _context.Context, itemId string, commentId string, localVarOptionals *DouyinWebAPIApiFetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_comment_replies"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("item_id", parameterToString(itemId, ""))
	localVarQueryParams.Add("comment_id", parameterToString(commentId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52Opts Optional parameters for the method 'FetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52'
type DouyinWebAPIApiFetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52Opts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_0 获取指定视频的评论回复数据/Get comment replies data of specified video
# [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7354666303006723354\&quot; comment_id &#x3D; \&quot;7354669356632638218\&quot; cursor &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param itemId 作品id/Video id
  - @param commentId 评论id/Comment id
  - @param optional nil or *DouyinWebAPIApiFetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52Opts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52(ctx _context.Context, itemId string, commentId string, localVarOptionals *DouyinWebAPIApiFetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_comment_replies"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("item_id", parameterToString(itemId, ""))
	localVarQueryParams.Add("comment_id", parameterToString(commentId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet 获取视频新增粉丝数量/Get video new fans count
# [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id &#x3D; \&quot;7429296623961853234\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet(ctx _context.Context, awemeId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_fans_add_count"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_0 获取视频新增粉丝数量/Get video new fans count
# [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id &#x3D; \&quot;7429296623961853234\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_53(ctx _context.Context, awemeId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_fans_add_count"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
# [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 视频aweme_id/Aweme_id of video
  - @param option 选项/Option

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet(ctx _context.Context, awemeId string, option string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_like_portrait"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	localVarQueryParams.Add("option", parameterToString(option, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_0 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
# [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 视频aweme_id/Aweme_id of video
  - @param option 选项/Option

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_54(ctx _context.Context, awemeId string, option string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_like_portrait"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	localVarQueryParams.Add("option", parameterToString(option, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGetOpts Optional parameters for the method 'FetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet'
type DouyinWebAPIApiFetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGetOpts struct {
	Offset         optional.Int32
	Count          optional.Int32
	SortType       optional.String
	PublishTime    optional.String
	FilterDuration optional.String
	SearchId       optional.String
}

/*
FetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet 获取指定关键词的视频搜索结果/Get video search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset &#x3D; 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset &#x3D; 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;游戏\&quot; offset &#x3D; 0 count &#x3D; 10 sort_type &#x3D; \&quot;0\&quot; publish_time &#x3D; \&quot;0\&quot; filter_duration &#x3D; \&quot;0\&quot; search_id &#x3D; \&quot;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGetOpts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SortType" (optional.String) -  排序类型/Sort type
  - @param "PublishTime" (optional.String) -  发布时间/Publish time
  - @param "FilterDuration" (optional.String) -  视频时长/Duration filter
  - @param "SearchId" (optional.String) -  搜索id，翻页时需要提供/Search id, need to provide when paging

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishTime.IsSet() {
		localVarQueryParams.Add("publish_time", parameterToString(localVarOptionals.PublishTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterDuration.IsSet() {
		localVarQueryParams.Add("filter_duration", parameterToString(localVarOptionals.FilterDuration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchId.IsSet() {
		localVarQueryParams.Add("search_id", parameterToString(localVarOptionals.SearchId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55Opts Optional parameters for the method 'FetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55'
type DouyinWebAPIApiFetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55Opts struct {
	Offset         optional.Int32
	Count          optional.Int32
	SortType       optional.String
	PublishTime    optional.String
	FilterDuration optional.String
	SearchId       optional.String
}

/*
FetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_0 获取指定关键词的视频搜索结果/Get video search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset &#x3D; 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset &#x3D; 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;游戏\&quot; offset &#x3D; 0 count &#x3D; 10 sort_type &#x3D; \&quot;0\&quot; publish_time &#x3D; \&quot;0\&quot; filter_duration &#x3D; \&quot;0\&quot; search_id &#x3D; \&quot;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55Opts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SortType" (optional.String) -  排序类型/Sort type
  - @param "PublishTime" (optional.String) -  发布时间/Publish time
  - @param "FilterDuration" (optional.String) -  视频时长/Duration filter
  - @param "SearchId" (optional.String) -  搜索id，翻页时需要提供/Search id, need to provide when paging

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishTime.IsSet() {
		localVarQueryParams.Add("publish_time", parameterToString(localVarOptionals.PublishTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterDuration.IsSet() {
		localVarQueryParams.Add("filter_duration", parameterToString(localVarOptionals.FilterDuration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchId.IsSet() {
		localVarQueryParams.Add("search_id", parameterToString(localVarOptionals.SearchId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2GetOpts Optional parameters for the method 'FetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get'
type DouyinWebAPIApiFetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2GetOpts struct {
	SortType       optional.String
	PublishTime    optional.String
	FilterDuration optional.String
	Page           optional.Int32
	SearchId       optional.String
}

/*
FetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
# [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当&#x60;/api/v1/douyin/web/fetch_video_search_result&#x60;接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the &#x60;/api/v1/douyin/web/fetch_video_search_result&#x60; interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; sort_type &#x3D; \&quot;_0\&quot; publish_time &#x3D; \&quot;_0\&quot; filter_duration &#x3D; \&quot;_0\&quot; page &#x3D; 1 search_id &#x3D; \&quot;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2GetOpts - Optional Parameters:
  - @param "SortType" (optional.String) -  排序类型/Sort type
  - @param "PublishTime" (optional.String) -  发布时间/Publish time
  - @param "FilterDuration" (optional.String) -  视频时长/Duration filter
  - @param "Page" (optional.Int32) -  页码/Page
  - @param "SearchId" (optional.String) -  搜索id，翻页时需要提供/Search id, need to provide when paging

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_search_result_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishTime.IsSet() {
		localVarQueryParams.Add("publish_time", parameterToString(localVarOptionals.PublishTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterDuration.IsSet() {
		localVarQueryParams.Add("filter_duration", parameterToString(localVarOptionals.FilterDuration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchId.IsSet() {
		localVarQueryParams.Add("search_id", parameterToString(localVarOptionals.SearchId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiFetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56Opts Optional parameters for the method 'FetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56'
type DouyinWebAPIApiFetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56Opts struct {
	SortType       optional.String
	PublishTime    optional.String
	FilterDuration optional.String
	Page           optional.Int32
	SearchId       optional.String
}

/*
FetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_0 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
# [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当&#x60;/api/v1/douyin/web/fetch_video_search_result&#x60;接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the &#x60;/api/v1/douyin/web/fetch_video_search_result&#x60; interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; sort_type &#x3D; \&quot;_0\&quot; publish_time &#x3D; \&quot;_0\&quot; filter_duration &#x3D; \&quot;_0\&quot; page &#x3D; 1 search_id &#x3D; \&quot;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *DouyinWebAPIApiFetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56Opts - Optional Parameters:
  - @param "SortType" (optional.String) -  排序类型/Sort type
  - @param "PublishTime" (optional.String) -  发布时间/Publish time
  - @param "FilterDuration" (optional.String) -  视频时长/Duration filter
  - @param "Page" (optional.Int32) -  页码/Page
  - @param "SearchId" (optional.String) -  搜索id，翻页时需要提供/Search id, need to provide when paging

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) FetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56(ctx _context.Context, keyword string, localVarOptionals *DouyinWebAPIApiFetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/fetch_video_search_result_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishTime.IsSet() {
		localVarQueryParams.Add("publish_time", parameterToString(localVarOptionals.PublishTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterDuration.IsSet() {
		localVarQueryParams.Add("filter_duration", parameterToString(localVarOptionals.FilterDuration.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SearchId.IsSet() {
		localVarQueryParams.Add("search_id", parameterToString(localVarOptionals.SearchId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiGenerateABogusApiV1DouyinWebGenerateABogusPostOpts Optional parameters for the method 'GenerateABogusApiV1DouyinWebGenerateABogusPost'
type DouyinWebAPIApiGenerateABogusApiV1DouyinWebGenerateABogusPostOpts struct {
	ABogusModel optional.Interface
}

/*
GenerateABogusApiV1DouyinWebGenerateABogusPost 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
# [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] &#x60;&#x60;&#x60;json { \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;search_channel&#x3D;aweme_general&amp;enable_history&#x3D;1&amp;keyword&#x3D;%E4%B8%AD%E5%8D%8E%E5%A8%98&amp;search_source&#x3D;normal_search&amp;query_correct_type&#x3D;1&amp;is_filter_search&#x3D;0&amp;from_group_id&#x3D;7346905902554844468&amp;offset&#x3D;0&amp;count&#x3D;15&amp;need_filter_settings&#x3D;1&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;190600&amp;version_name&#x3D;19.6.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1280&amp;screen_height&#x3D;800&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Firefox&amp;browser_version&#x3D;124.0&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Gecko&amp;engine_version&#x3D;124.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;16&amp;device_memory&#x3D;&amp;platform&#x3D;PC&amp;webid&#x3D;7348962975497324070&amp;msToken&#x3D;YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\&quot;, \&quot;data\&quot;: \&quot;\&quot;, \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\&quot;, \&quot;index_0\&quot;: 0, \&quot;index_1\&quot;: 1, \&quot;index_2\&quot;: 14 } &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiGenerateABogusApiV1DouyinWebGenerateABogusPostOpts - Optional Parameters:
  - @param "ABogusModel" (optional.Interface of ABogusModel) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GenerateABogusApiV1DouyinWebGenerateABogusPost(ctx _context.Context, localVarOptionals *DouyinWebAPIApiGenerateABogusApiV1DouyinWebGenerateABogusPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/generate_a_bogus"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.ABogusModel.IsSet() {
		localVarOptionalABogusModel, localVarOptionalABogusModelok := localVarOptionals.ABogusModel.Value().(ABogusModel)
		if !localVarOptionalABogusModelok {
			return localVarReturnValue, nil, reportError("aBogusModel should be ABogusModel")
		}
		localVarPostBody = &localVarOptionalABogusModel
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiGenerateABogusApiV1DouyinWebGenerateABogusPost_57Opts Optional parameters for the method 'GenerateABogusApiV1DouyinWebGenerateABogusPost_57'
type DouyinWebAPIApiGenerateABogusApiV1DouyinWebGenerateABogusPost_57Opts struct {
	ABogusModel optional.Interface
}

/*
GenerateABogusApiV1DouyinWebGenerateABogusPost_0 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
# [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] &#x60;&#x60;&#x60;json { \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;search_channel&#x3D;aweme_general&amp;enable_history&#x3D;1&amp;keyword&#x3D;%E4%B8%AD%E5%8D%8E%E5%A8%98&amp;search_source&#x3D;normal_search&amp;query_correct_type&#x3D;1&amp;is_filter_search&#x3D;0&amp;from_group_id&#x3D;7346905902554844468&amp;offset&#x3D;0&amp;count&#x3D;15&amp;need_filter_settings&#x3D;1&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;190600&amp;version_name&#x3D;19.6.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1280&amp;screen_height&#x3D;800&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Firefox&amp;browser_version&#x3D;124.0&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Gecko&amp;engine_version&#x3D;124.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;16&amp;device_memory&#x3D;&amp;platform&#x3D;PC&amp;webid&#x3D;7348962975497324070&amp;msToken&#x3D;YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\&quot;, \&quot;data\&quot;: \&quot;\&quot;, \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\&quot;, \&quot;index_0\&quot;: 0, \&quot;index_1\&quot;: 1, \&quot;index_2\&quot;: 14 } &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiGenerateABogusApiV1DouyinWebGenerateABogusPost_57Opts - Optional Parameters:
  - @param "ABogusModel" (optional.Interface of ABogusModel) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GenerateABogusApiV1DouyinWebGenerateABogusPost_57(ctx _context.Context, localVarOptionals *DouyinWebAPIApiGenerateABogusApiV1DouyinWebGenerateABogusPost_57Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/generate_a_bogus"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.ABogusModel.IsSet() {
		localVarOptionalABogusModel, localVarOptionalABogusModelok := localVarOptionals.ABogusModel.Value().(ABogusModel)
		if !localVarOptionalABogusModelok {
			return localVarReturnValue, nil, reportError("aBogusModel should be ABogusModel")
		}
		localVarPostBody = &localVarOptionalABogusModel
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GenerateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet 生成真实msToken/Generate real msToken
# [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GenerateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/generate_real_msToken"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GenerateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet_0 生成真实msToken/Generate real msToken
# [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GenerateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet_58(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/generate_real_msToken"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GenerateSVWebIdApiV1DouyinWebGenerateSVWebIdGet 生成s_v_web_id/Generate s_v_web_id
# [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GenerateSVWebIdApiV1DouyinWebGenerateSVWebIdGet(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/generate_s_v_web_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GenerateSVWebIdApiV1DouyinWebGenerateSVWebIdGet_0 生成s_v_web_id/Generate s_v_web_id
# [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GenerateSVWebIdApiV1DouyinWebGenerateSVWebIdGet_59(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/generate_s_v_web_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiGenerateTtwidApiV1DouyinWebGenerateTtwidGetOpts Optional parameters for the method 'GenerateTtwidApiV1DouyinWebGenerateTtwidGet'
type DouyinWebAPIApiGenerateTtwidApiV1DouyinWebGenerateTtwidGetOpts struct {
	UserAgent optional.String
}

/*
GenerateTtwidApiV1DouyinWebGenerateTtwidGet 生成ttwid/Generate ttwid
# [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiGenerateTtwidApiV1DouyinWebGenerateTtwidGetOpts - Optional Parameters:
  - @param "UserAgent" (optional.String) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GenerateTtwidApiV1DouyinWebGenerateTtwidGet(ctx _context.Context, localVarOptionals *DouyinWebAPIApiGenerateTtwidApiV1DouyinWebGenerateTtwidGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/generate_ttwid"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.UserAgent.IsSet() {
		localVarQueryParams.Add("user_agent", parameterToString(localVarOptionals.UserAgent.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiGenerateTtwidApiV1DouyinWebGenerateTtwidGet_60Opts Optional parameters for the method 'GenerateTtwidApiV1DouyinWebGenerateTtwidGet_60'
type DouyinWebAPIApiGenerateTtwidApiV1DouyinWebGenerateTtwidGet_60Opts struct {
	UserAgent optional.String
}

/*
GenerateTtwidApiV1DouyinWebGenerateTtwidGet_0 生成ttwid/Generate ttwid
# [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiGenerateTtwidApiV1DouyinWebGenerateTtwidGet_60Opts - Optional Parameters:
  - @param "UserAgent" (optional.String) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GenerateTtwidApiV1DouyinWebGenerateTtwidGet_60(ctx _context.Context, localVarOptionals *DouyinWebAPIApiGenerateTtwidApiV1DouyinWebGenerateTtwidGet_60Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/generate_ttwid"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.UserAgent.IsSet() {
		localVarQueryParams.Add("user_agent", parameterToString(localVarOptionals.UserAgent.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GenerateVerifyFpApiV1DouyinWebGenerateVerifyFpGet 生成verify_fp/Generate verify_fp
# [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GenerateVerifyFpApiV1DouyinWebGenerateVerifyFpGet(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/generate_verify_fp"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GenerateVerifyFpApiV1DouyinWebGenerateVerifyFpGet_0 生成verify_fp/Generate verify_fp
# [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GenerateVerifyFpApiV1DouyinWebGenerateVerifyFpGet_61(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/generate_verify_fp"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiGenerateXBogusApiV1DouyinWebGenerateXBogusPostOpts Optional parameters for the method 'GenerateXBogusApiV1DouyinWebGenerateXBogusPost'
type DouyinWebAPIApiGenerateXBogusApiV1DouyinWebGenerateXBogusPostOpts struct {
	XBogusModel optional.Interface
}

/*
GenerateXBogusApiV1DouyinWebGenerateXBogusPost 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
# [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  &#x60;&#x60;&#x60;json { \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id&#x3D;7148736076176215311&amp;device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1920&amp;screen_height&#x3D;1080&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Edge&amp;browser_version&#x3D;117.0.2045.47&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;117.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;128&amp;device_memory&#x3D;10240&amp;platform&#x3D;PC&amp;downlink&#x3D;10&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100\&quot;, \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot; } &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiGenerateXBogusApiV1DouyinWebGenerateXBogusPostOpts - Optional Parameters:
  - @param "XBogusModel" (optional.Interface of XBogusModel) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GenerateXBogusApiV1DouyinWebGenerateXBogusPost(ctx _context.Context, localVarOptionals *DouyinWebAPIApiGenerateXBogusApiV1DouyinWebGenerateXBogusPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/generate_x_bogus"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.XBogusModel.IsSet() {
		localVarOptionalXBogusModel, localVarOptionalXBogusModelok := localVarOptionals.XBogusModel.Value().(XBogusModel)
		if !localVarOptionalXBogusModelok {
			return localVarReturnValue, nil, reportError("xBogusModel should be XBogusModel")
		}
		localVarPostBody = &localVarOptionalXBogusModel
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiGenerateXBogusApiV1DouyinWebGenerateXBogusPost_62Opts Optional parameters for the method 'GenerateXBogusApiV1DouyinWebGenerateXBogusPost_62'
type DouyinWebAPIApiGenerateXBogusApiV1DouyinWebGenerateXBogusPost_62Opts struct {
	XBogusModel optional.Interface
}

/*
GenerateXBogusApiV1DouyinWebGenerateXBogusPost_0 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
# [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  &#x60;&#x60;&#x60;json { \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id&#x3D;7148736076176215311&amp;device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1920&amp;screen_height&#x3D;1080&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Edge&amp;browser_version&#x3D;117.0.2045.47&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;117.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;128&amp;device_memory&#x3D;10240&amp;platform&#x3D;PC&amp;downlink&#x3D;10&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100\&quot;, \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot; } &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiGenerateXBogusApiV1DouyinWebGenerateXBogusPost_62Opts - Optional Parameters:
  - @param "XBogusModel" (optional.Interface of XBogusModel) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GenerateXBogusApiV1DouyinWebGenerateXBogusPost_62(ctx _context.Context, localVarOptionals *DouyinWebAPIApiGenerateXBogusApiV1DouyinWebGenerateXBogusPost_62Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/generate_x_bogus"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.XBogusModel.IsSet() {
		localVarOptionalXBogusModel, localVarOptionalXBogusModelok := localVarOptionals.XBogusModel.Value().(XBogusModel)
		if !localVarOptionalXBogusModelok {
			return localVarReturnValue, nil, reportError("xBogusModel should be XBogusModel")
		}
		localVarPostBody = &localVarOptionalXBogusModel
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiGetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPostOpts Optional parameters for the method 'GetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost'
type DouyinWebAPIApiGetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPostOpts struct {
	RequestBody optional.Interface
}

/*
GetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost 提取列表作品id/Extract list video id
# [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  &#x60;&#x60;&#x60;json  { \&quot;urls\&quot;:[     \&quot;0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\&quot;,     \&quot;https://v.douyin.com/iRNBho6u/\&quot;,     \&quot;https://www.iesdouyin.com/share/video/7298145681699622182/?region&#x3D;CN&amp;mid&#x3D;7298145762238565171&amp;u_code&#x3D;l1j9bkbd&amp;did&#x3D;MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&amp;iid&#x3D;MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&amp;with_sec_did&#x3D;1&amp;titleType&#x3D;title&amp;share_sign&#x3D;05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&amp;share_version&#x3D;170400&amp;ts&#x3D;1699262937&amp;from_aid&#x3D;6383&amp;from_ssr&#x3D;1&amp;from&#x3D;web_code_link\&quot;,     \&quot;https://www.douyin.com/video/7298145681699622182?previous_page&#x3D;web_code_link\&quot;,     \&quot;https://www.douyin.com/video/7298145681699622182\&quot;,  ]  }  &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiGetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPostOpts - Optional Parameters:
  - @param "RequestBody" (optional.Interface of []string) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost(ctx _context.Context, localVarOptionals *DouyinWebAPIApiGetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/get_all_aweme_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.RequestBody.IsSet() {
		localVarOptionalRequestBody, localVarOptionalRequestBodyok := localVarOptionals.RequestBody.Value().([]string)
		if !localVarOptionalRequestBodyok {
			return localVarReturnValue, nil, reportError("requestBody should be []string")
		}
		localVarPostBody = &localVarOptionalRequestBody
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiGetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63Opts Optional parameters for the method 'GetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63'
type DouyinWebAPIApiGetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63Opts struct {
	RequestBody optional.Interface
}

/*
GetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_0 提取列表作品id/Extract list video id
# [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  &#x60;&#x60;&#x60;json  { \&quot;urls\&quot;:[     \&quot;0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\&quot;,     \&quot;https://v.douyin.com/iRNBho6u/\&quot;,     \&quot;https://www.iesdouyin.com/share/video/7298145681699622182/?region&#x3D;CN&amp;mid&#x3D;7298145762238565171&amp;u_code&#x3D;l1j9bkbd&amp;did&#x3D;MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&amp;iid&#x3D;MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&amp;with_sec_did&#x3D;1&amp;titleType&#x3D;title&amp;share_sign&#x3D;05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&amp;share_version&#x3D;170400&amp;ts&#x3D;1699262937&amp;from_aid&#x3D;6383&amp;from_ssr&#x3D;1&amp;from&#x3D;web_code_link\&quot;,     \&quot;https://www.douyin.com/video/7298145681699622182?previous_page&#x3D;web_code_link\&quot;,     \&quot;https://www.douyin.com/video/7298145681699622182\&quot;,  ]  }  &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiGetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63Opts - Optional Parameters:
  - @param "RequestBody" (optional.Interface of []string) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63(ctx _context.Context, localVarOptionals *DouyinWebAPIApiGetAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/get_all_aweme_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.RequestBody.IsSet() {
		localVarOptionalRequestBody, localVarOptionalRequestBodyok := localVarOptionals.RequestBody.Value().([]string)
		if !localVarOptionalRequestBodyok {
			return localVarReturnValue, nil, reportError("requestBody should be []string")
		}
		localVarPostBody = &localVarOptionalRequestBody
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiGetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPostOpts Optional parameters for the method 'GetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost'
type DouyinWebAPIApiGetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPostOpts struct {
	RequestBody optional.Interface
}

/*
GetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost 提取列表用户id/Extract list user id
# [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  &#x60;&#x60;&#x60;json  { \&quot;urls\&quot;:[    \&quot;https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid&#x3D;7285950278132616463\&quot;,    \&quot;https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\&quot;,    \&quot;长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\&quot;,    \&quot;https://v.douyin.com/idFqvUms/\&quot;     ]  }  &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiGetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPostOpts - Optional Parameters:
  - @param "RequestBody" (optional.Interface of []string) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost(ctx _context.Context, localVarOptionals *DouyinWebAPIApiGetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/get_all_sec_user_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.RequestBody.IsSet() {
		localVarOptionalRequestBody, localVarOptionalRequestBodyok := localVarOptionals.RequestBody.Value().([]string)
		if !localVarOptionalRequestBodyok {
			return localVarReturnValue, nil, reportError("requestBody should be []string")
		}
		localVarPostBody = &localVarOptionalRequestBody
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiGetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64Opts Optional parameters for the method 'GetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64'
type DouyinWebAPIApiGetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64Opts struct {
	RequestBody optional.Interface
}

/*
GetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_0 提取列表用户id/Extract list user id
# [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  &#x60;&#x60;&#x60;json  { \&quot;urls\&quot;:[    \&quot;https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid&#x3D;7285950278132616463\&quot;,    \&quot;https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\&quot;,    \&quot;长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\&quot;,    \&quot;https://v.douyin.com/idFqvUms/\&quot;     ]  }  &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiGetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64Opts - Optional Parameters:
  - @param "RequestBody" (optional.Interface of []string) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64(ctx _context.Context, localVarOptionals *DouyinWebAPIApiGetAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/get_all_sec_user_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.RequestBody.IsSet() {
		localVarOptionalRequestBody, localVarOptionalRequestBodyok := localVarOptionals.RequestBody.Value().([]string)
		if !localVarOptionalRequestBodyok {
			return localVarReturnValue, nil, reportError("requestBody should be []string")
		}
		localVarPostBody = &localVarOptionalRequestBody
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiGetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPostOpts Optional parameters for the method 'GetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost'
type DouyinWebAPIApiGetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPostOpts struct {
	RequestBody optional.Interface
}

/*
GetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost 提取列表直播间号/Extract list webcast id
# [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] &#x60;&#x60;&#x60;json {   \&quot;urls\&quot;: [         \&quot;https://live.douyin.com/775841227732\&quot;,         \&quot;https://live.douyin.com/775841227732?room_id&#x3D;7318296342189919011&amp;enter_from_merge&#x3D;web_share_link&amp;enter_method&#x3D;web_share_link&amp;previous_page&#x3D;app_code_link\&quot;,         &#39;https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code&#x3D;l1j9bkbd&amp;did&#x3D;MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&amp;iid&#x3D;MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&amp;with_sec_did&#x3D;1&amp;use_link_command&#x3D;1&amp;ecom_share_track_params&#x3D;&amp;extra_params&#x3D;{\&quot;from_request_id\&quot;:\&quot;20231230162057EC005772A8EAA0199906\&quot;,\&quot;im_channel_invite_id\&quot;:\&quot;0\&quot;}&amp;user_id&#x3D;3644207898042206&amp;liveId&#x3D;7318296342189919011&amp;from&#x3D;share&amp;style&#x3D;share&amp;enter_method&#x3D;click_share&amp;roomId&#x3D;7318296342189919011&amp;activity_info&#x3D;{}&#39;,         \&quot;6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\&quot;,         \&quot;https://v.douyin.com/i8tBR7hX/\&quot;,         ] } &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiGetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPostOpts - Optional Parameters:
  - @param "RequestBody" (optional.Interface of []string) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost(ctx _context.Context, localVarOptionals *DouyinWebAPIApiGetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/get_all_webcast_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.RequestBody.IsSet() {
		localVarOptionalRequestBody, localVarOptionalRequestBodyok := localVarOptionals.RequestBody.Value().([]string)
		if !localVarOptionalRequestBodyok {
			return localVarReturnValue, nil, reportError("requestBody should be []string")
		}
		localVarPostBody = &localVarOptionalRequestBody
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// DouyinWebAPIApiGetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65Opts Optional parameters for the method 'GetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65'
type DouyinWebAPIApiGetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65Opts struct {
	RequestBody optional.Interface
}

/*
GetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_0 提取列表直播间号/Extract list webcast id
# [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] &#x60;&#x60;&#x60;json {   \&quot;urls\&quot;: [         \&quot;https://live.douyin.com/775841227732\&quot;,         \&quot;https://live.douyin.com/775841227732?room_id&#x3D;7318296342189919011&amp;enter_from_merge&#x3D;web_share_link&amp;enter_method&#x3D;web_share_link&amp;previous_page&#x3D;app_code_link\&quot;,         &#39;https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code&#x3D;l1j9bkbd&amp;did&#x3D;MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&amp;iid&#x3D;MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&amp;with_sec_did&#x3D;1&amp;use_link_command&#x3D;1&amp;ecom_share_track_params&#x3D;&amp;extra_params&#x3D;{\&quot;from_request_id\&quot;:\&quot;20231230162057EC005772A8EAA0199906\&quot;,\&quot;im_channel_invite_id\&quot;:\&quot;0\&quot;}&amp;user_id&#x3D;3644207898042206&amp;liveId&#x3D;7318296342189919011&amp;from&#x3D;share&amp;style&#x3D;share&amp;enter_method&#x3D;click_share&amp;roomId&#x3D;7318296342189919011&amp;activity_info&#x3D;{}&#39;,         \&quot;6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\&quot;,         \&quot;https://v.douyin.com/i8tBR7hX/\&quot;,         ] } &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *DouyinWebAPIApiGetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65Opts - Optional Parameters:
  - @param "RequestBody" (optional.Interface of []string) -

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65(ctx _context.Context, localVarOptionals *DouyinWebAPIApiGetAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/get_all_webcast_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.RequestBody.IsSet() {
		localVarOptionalRequestBody, localVarOptionalRequestBodyok := localVarOptionals.RequestBody.Value().([]string)
		if !localVarOptionalRequestBodyok {
			return localVarReturnValue, nil, reportError("requestBody should be []string")
		}
		localVarPostBody = &localVarOptionalRequestBody
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetAwemeIdApiV1DouyinWebGetAwemeIdGet 提取单个作品id/Extract single video id
# [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url &#x3D; \&quot;https://www.douyin.com/video/7298145681699622182\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param url

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GetAwemeIdApiV1DouyinWebGetAwemeIdGet(ctx _context.Context, url string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/get_aweme_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetAwemeIdApiV1DouyinWebGetAwemeIdGet_0 提取单个作品id/Extract single video id
# [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url &#x3D; \&quot;https://www.douyin.com/video/7298145681699622182\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param url

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GetAwemeIdApiV1DouyinWebGetAwemeIdGet_66(ctx _context.Context, url string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/get_aweme_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetSecUserIdApiV1DouyinWebGetSecUserIdGet 提取单个用户id/Extract single user id
# [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url &#x3D; \&quot;https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param url

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GetSecUserIdApiV1DouyinWebGetSecUserIdGet(ctx _context.Context, url string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/get_sec_user_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetSecUserIdApiV1DouyinWebGetSecUserIdGet_0 提取单个用户id/Extract single user id
# [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url &#x3D; \&quot;https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param url

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GetSecUserIdApiV1DouyinWebGetSecUserIdGet_67(ctx _context.Context, url string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/get_sec_user_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetWebcastIdApiV1DouyinWebGetWebcastIdGet 提取直播间号/Extract webcast id
# [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url &#x3D; \&quot;https://live.douyin.com/775841227732\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param url

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GetWebcastIdApiV1DouyinWebGetWebcastIdGet(ctx _context.Context, url string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/get_webcast_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetWebcastIdApiV1DouyinWebGetWebcastIdGet_0 提取直播间号/Extract webcast id
# [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url &#x3D; \&quot;https://live.douyin.com/775841227732\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param url

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) GetWebcastIdApiV1DouyinWebGetWebcastIdGet_68(ctx _context.Context, url string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/get_webcast_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
HandlerUserProfileApiV1DouyinWebHandlerUserProfileGet 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
# [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) HandlerUserProfileApiV1DouyinWebHandlerUserProfileGet(ctx _context.Context, secUserId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/handler_user_profile"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
HandlerUserProfileApiV1DouyinWebHandlerUserProfileGet_0 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
# [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) HandlerUserProfileApiV1DouyinWebHandlerUserProfileGet_69(ctx _context.Context, secUserId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/handler_user_profile"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
HandlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
# [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id &#x3D; \&quot;TheChief\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uniqueId 用户unique_id/User unique_id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) HandlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get(ctx _context.Context, uniqueId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/handler_user_profile_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("unique_id", parameterToString(uniqueId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
HandlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_0 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
# [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id &#x3D; \&quot;TheChief\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uniqueId 用户unique_id/User unique_id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) HandlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_70(ctx _context.Context, uniqueId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/handler_user_profile_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("unique_id", parameterToString(uniqueId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
HandlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get 根据抖音uid获取指定用户的信息/Get information of specified user by uid
# [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid &#x3D; \&quot;1673937488185292\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uid 用户uid(short_id)/User uid(short_id)

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) HandlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get(ctx _context.Context, uid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/handler_user_profile_v3"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
HandlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_0 根据抖音uid获取指定用户的信息/Get information of specified user by uid
# [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid &#x3D; \&quot;1673937488185292\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uid 用户uid(short_id)/User uid(short_id)

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) HandlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_71(ctx _context.Context, uid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/handler_user_profile_v3"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
HandlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
# [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) HandlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get(ctx _context.Context, secUserId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/handler_user_profile_v4"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
HandlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_0 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
# [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) HandlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_72(ctx _context.Context, secUserId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/handler_user_profile_v4"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
WebcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet 直播间号转房间号/Webcast id to room id
# [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \&quot;webcast_id &#x3D; \&quot;775841227732\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param webcastId 直播间号/Webcast id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) WebcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet(ctx _context.Context, webcastId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/webcast_id_2_room_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("webcast_id", parameterToString(webcastId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
WebcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_0 直播间号转房间号/Webcast id to room id
# [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \&quot;webcast_id &#x3D; \&quot;775841227732\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param webcastId 直播间号/Webcast id

@return ResponseModel
*/
func (a *DouyinWebAPIApiService) WebcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_73(ctx _context.Context, webcastId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/web/webcast_id_2_room_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("webcast_id", parameterToString(webcastId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
