/*
 * TikHub Private API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tikhub

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// NetEaseCloudMusicAPIApiService NetEaseCloudMusicAPIApi service
type NetEaseCloudMusicAPIApiService service

// NetEaseCloudMusicAPIApiDecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPostOpts Optional parameters for the method 'DecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost'
type NetEaseCloudMusicAPIApiDecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPostOpts struct {
    Body optional.String
}

/*
DecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
# [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload &#x3D; \&quot;4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *NetEaseCloudMusicAPIApiDecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPostOpts - Optional Parameters:
 * @param "Body" (optional.String) - 
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) DecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost(ctx _context.Context, localVarOptionals *NetEaseCloudMusicAPIApiDecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPostOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/decrypt_post_payload"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		localVarPostBody = localVarOptionals.Body.Value()
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiDecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1Opts Optional parameters for the method 'DecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1'
type NetEaseCloudMusicAPIApiDecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1Opts struct {
    Body optional.String
}

/*
DecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_0 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
# [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload &#x3D; \&quot;4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *NetEaseCloudMusicAPIApiDecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1Opts - Optional Parameters:
 * @param "Body" (optional.String) - 
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) DecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1(ctx _context.Context, localVarOptionals *NetEaseCloudMusicAPIApiDecryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1Opts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/decrypt_post_payload"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		localVarPostBody = localVarOptionals.Body.Value()
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiEncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPostOpts Optional parameters for the method 'EncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost'
type NetEaseCloudMusicAPIApiEncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPostOpts struct {
    Body optional.Map[string]interface{}
    AddVariable optional.Bool
}

/*
EncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
# [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload &#x3D; {\&quot;id\&quot;: 2135155051, \&quot;br\&quot;: 192000}
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uri 请求URI/Request URI
 * @param optional nil or *NetEaseCloudMusicAPIApiEncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPostOpts - Optional Parameters:
 * @param "Body" (optional.Map[string]interface{}) - 
 * @param "AddVariable" (optional.Bool) -  是否添加变量/Whether to add variables
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) EncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost(ctx _context.Context, uri string, localVarOptionals *NetEaseCloudMusicAPIApiEncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPostOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/encrypt_post_payload"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uri", parameterToString(uri, ""))
	if localVarOptionals != nil && localVarOptionals.AddVariable.IsSet() {
		localVarQueryParams.Add("add_variable", parameterToString(localVarOptionals.AddVariable.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		localVarPostBody = localVarOptionals.Body.Value()
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiEncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2Opts Optional parameters for the method 'EncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2'
type NetEaseCloudMusicAPIApiEncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2Opts struct {
    Body optional.Map[string]interface{}
    AddVariable optional.Bool
}

/*
EncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_0 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
# [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload &#x3D; {\&quot;id\&quot;: 2135155051, \&quot;br\&quot;: 192000}
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uri 请求URI/Request URI
 * @param optional nil or *NetEaseCloudMusicAPIApiEncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2Opts - Optional Parameters:
 * @param "Body" (optional.Map[string]interface{}) - 
 * @param "AddVariable" (optional.Bool) -  是否添加变量/Whether to add variables
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) EncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2(ctx _context.Context, uri string, localVarOptionals *NetEaseCloudMusicAPIApiEncryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2Opts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/encrypt_post_payload"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uri", parameterToString(uri, ""))
	if localVarOptionals != nil && localVarOptionals.AddVariable.IsSet() {
		localVarQueryParams.Add("add_variable", parameterToString(localVarOptionals.AddVariable.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		localVarPostBody = localVarOptionals.Body.Value()
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet 获取歌手信息/Fetch artist detail
# [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id &#x3D; \&quot;12213291\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param artistId 歌手ID/Artist ID
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet(ctx _context.Context, artistId string) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_artist_detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("artist_id", parameterToString(artistId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_0 获取歌手信息/Fetch artist detail
# [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id &#x3D; \&quot;12213291\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param artistId 歌手ID/Artist ID
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_3(ctx _context.Context, artistId string) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_artist_detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("artist_id", parameterToString(artistId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGetOpts Optional parameters for the method 'FetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet'
type NetEaseCloudMusicAPIApiFetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGetOpts struct {
    BeforeTime optional.String
    Limit optional.String
}

/*
FetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet 获取歌曲评论/Fetch music comment
# [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id &#x3D; \&quot;2135155051\&quot; beforeTime &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;30\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param resourceId 资源ID/Resource ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGetOpts - Optional Parameters:
 * @param "BeforeTime" (optional.String) -  时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
 * @param "Limit" (optional.String) -  每页数量，保持默认即可/Number per page, keep the default
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet(ctx _context.Context, resourceId string, localVarOptionals *NetEaseCloudMusicAPIApiFetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGetOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_music_comment"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("resource_id", parameterToString(resourceId, ""))
	if localVarOptionals != nil && localVarOptionals.BeforeTime.IsSet() {
		localVarQueryParams.Add("beforeTime", parameterToString(localVarOptionals.BeforeTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4Opts Optional parameters for the method 'FetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4'
type NetEaseCloudMusicAPIApiFetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4Opts struct {
    BeforeTime optional.String
    Limit optional.String
}

/*
FetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_0 获取歌曲评论/Fetch music comment
# [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id &#x3D; \&quot;2135155051\&quot; beforeTime &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;30\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param resourceId 资源ID/Resource ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4Opts - Optional Parameters:
 * @param "BeforeTime" (optional.String) -  时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
 * @param "Limit" (optional.String) -  每页数量，保持默认即可/Number per page, keep the default
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4(ctx _context.Context, resourceId string, localVarOptionals *NetEaseCloudMusicAPIApiFetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4Opts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_music_comment"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("resource_id", parameterToString(resourceId, ""))
	if localVarOptionals != nil && localVarOptionals.BeforeTime.IsSet() {
		localVarQueryParams.Add("beforeTime", parameterToString(localVarOptionals.BeforeTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGetOpts Optional parameters for the method 'FetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet'
type NetEaseCloudMusicAPIApiFetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGetOpts struct {
    Resolution optional.String
}

/*
FetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet Mlog（音乐视频）播放地址/Mlog (music video) playback address
# [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] &gt; 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id&#x3D;a1qQQOQNVueO2g7&amp;type&#x3D;2 mlogId &#x3D; \&quot;a1qQQOQNVueO2g7\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mlogId Mlog ID/Mlog ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGetOpts - Optional Parameters:
 * @param "Resolution" (optional.String) -  分辨率/Resolution
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet(ctx _context.Context, mlogId string, localVarOptionals *NetEaseCloudMusicAPIApiFetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGetOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_music_log_video_url"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("mlogId", parameterToString(mlogId, ""))
	if localVarOptionals != nil && localVarOptionals.Resolution.IsSet() {
		localVarQueryParams.Add("resolution", parameterToString(localVarOptionals.Resolution.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5Opts Optional parameters for the method 'FetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5'
type NetEaseCloudMusicAPIApiFetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5Opts struct {
    Resolution optional.String
}

/*
FetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_0 Mlog（音乐视频）播放地址/Mlog (music video) playback address
# [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] &gt; 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id&#x3D;a1qQQOQNVueO2g7&amp;type&#x3D;2 mlogId &#x3D; \&quot;a1qQQOQNVueO2g7\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mlogId Mlog ID/Mlog ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5Opts - Optional Parameters:
 * @param "Resolution" (optional.String) -  分辨率/Resolution
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5(ctx _context.Context, mlogId string, localVarOptionals *NetEaseCloudMusicAPIApiFetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5Opts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_music_log_video_url"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("mlogId", parameterToString(mlogId, ""))
	if localVarOptionals != nil && localVarOptionals.Resolution.IsSet() {
		localVarQueryParams.Add("resolution", parameterToString(localVarOptionals.Resolution.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet 获取单一歌曲歌词/Fetch one music lyric
# [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param musicId 歌曲ID/Music ID
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet(ctx _context.Context, musicId string) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_one_music_lyric"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_0 获取单一歌曲歌词/Fetch one music lyric
# [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param musicId 歌曲ID/Music ID
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_6(ctx _context.Context, musicId string) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_one_music_lyric"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1GetOpts Optional parameters for the method 'FetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get'
type NetEaseCloudMusicAPIApiFetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1GetOpts struct {
    Br optional.String
}

/*
FetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
# [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot; br &#x3D; \&quot;192000\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param musicId 歌曲ID/Music ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1GetOpts - Optional Parameters:
 * @param "Br" (optional.String) -  音质码率/Bitrate
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get(ctx _context.Context, musicId string, localVarOptionals *NetEaseCloudMusicAPIApiFetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1GetOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	if localVarOptionals != nil && localVarOptionals.Br.IsSet() {
		localVarQueryParams.Add("br", parameterToString(localVarOptionals.Br.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7Opts Optional parameters for the method 'FetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7'
type NetEaseCloudMusicAPIApiFetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7Opts struct {
    Br optional.String
}

/*
FetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_0 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
# [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot; br &#x3D; \&quot;192000\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param musicId 歌曲ID/Music ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7Opts - Optional Parameters:
 * @param "Br" (optional.String) -  音质码率/Bitrate
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7(ctx _context.Context, musicId string, localVarOptionals *NetEaseCloudMusicAPIApiFetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7Opts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	if localVarOptionals != nil && localVarOptionals.Br.IsSet() {
		localVarQueryParams.Add("br", parameterToString(localVarOptionals.Br.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2GetOpts Optional parameters for the method 'FetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get'
type NetEaseCloudMusicAPIApiFetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2GetOpts struct {
    Level optional.String
    EncodeType optional.String
}

/*
FetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
# [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot; level &#x3D; \&quot;exhigh\&quot; encodeType &#x3D; \&quot;mp3\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param musicId 歌曲ID/Music ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2GetOpts - Optional Parameters:
 * @param "Level" (optional.String) -  音质等级/Quality level
 * @param "EncodeType" (optional.String) -  编码类型/Encoding type
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get(ctx _context.Context, musicId string, localVarOptionals *NetEaseCloudMusicAPIApiFetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2GetOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	if localVarOptionals != nil && localVarOptionals.Level.IsSet() {
		localVarQueryParams.Add("level", parameterToString(localVarOptionals.Level.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EncodeType.IsSet() {
		localVarQueryParams.Add("encodeType", parameterToString(localVarOptionals.EncodeType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8Opts Optional parameters for the method 'FetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8'
type NetEaseCloudMusicAPIApiFetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8Opts struct {
    Level optional.String
    EncodeType optional.String
}

/*
FetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_0 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
# [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot; level &#x3D; \&quot;exhigh\&quot; encodeType &#x3D; \&quot;mp3\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param musicId 歌曲ID/Music ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8Opts - Optional Parameters:
 * @param "Level" (optional.String) -  音质等级/Quality level
 * @param "EncodeType" (optional.String) -  编码类型/Encoding type
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8(ctx _context.Context, musicId string, localVarOptionals *NetEaseCloudMusicAPIApiFetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8Opts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	if localVarOptionals != nil && localVarOptionals.Level.IsSet() {
		localVarQueryParams.Add("level", parameterToString(localVarOptionals.Level.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EncodeType.IsSet() {
		localVarQueryParams.Add("encodeType", parameterToString(localVarOptionals.EncodeType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
# [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param musicId 歌曲ID/Music ID
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get(ctx _context.Context, musicId string) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_one_music_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_0 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
# [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param musicId 歌曲ID/Music ID
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_9(ctx _context.Context, musicId string) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_one_music_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
# [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param musicId 歌曲ID/Music ID
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get(ctx _context.Context, musicId string) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_one_music_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_0 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
# [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param musicId 歌曲ID/Music ID
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_10(ctx _context.Context, musicId string) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_one_music_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGetOpts Optional parameters for the method 'FetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet'
type NetEaseCloudMusicAPIApiFetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGetOpts struct {
    Time optional.String
    Limit optional.String
}

/*
FetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet 获取用户动态/Fetch user event
# [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; _time &#x3D; \&quot;-1\&quot; limit &#x3D; \&quot;10\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uid 用户ID/User ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGetOpts - Optional Parameters:
 * @param "Time" (optional.String) -  时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
 * @param "Limit" (optional.String) -  每页数量，保持默认即可/Number per page, keep the default
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet(ctx _context.Context, uid string, localVarOptionals *NetEaseCloudMusicAPIApiFetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGetOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_user_event"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	if localVarOptionals != nil && localVarOptionals.Time.IsSet() {
		localVarQueryParams.Add("_time", parameterToString(localVarOptionals.Time.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11Opts Optional parameters for the method 'FetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11'
type NetEaseCloudMusicAPIApiFetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11Opts struct {
    Time optional.String
    Limit optional.String
}

/*
FetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_0 获取用户动态/Fetch user event
# [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; _time &#x3D; \&quot;-1\&quot; limit &#x3D; \&quot;10\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uid 用户ID/User ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11Opts - Optional Parameters:
 * @param "Time" (optional.String) -  时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
 * @param "Limit" (optional.String) -  每页数量，保持默认即可/Number per page, keep the default
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11(ctx _context.Context, uid string, localVarOptionals *NetEaseCloudMusicAPIApiFetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11Opts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_user_event"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	if localVarOptionals != nil && localVarOptionals.Time.IsSet() {
		localVarQueryParams.Add("_time", parameterToString(localVarOptionals.Time.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGetOpts Optional parameters for the method 'FetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet'
type NetEaseCloudMusicAPIApiFetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGetOpts struct {
    Lasttime optional.String
    Pagesize optional.String
}

/*
FetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet 获取用户粉丝列表/Fetch user followers
# [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; lasttime &#x3D; \&quot;0\&quot; pagesize &#x3D; \&quot;20\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uid 用户ID/User ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGetOpts - Optional Parameters:
 * @param "Lasttime" (optional.String) -  时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
 * @param "Pagesize" (optional.String) -  每页数量，保持默认即可/Number per page, keep the default
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet(ctx _context.Context, uid string, localVarOptionals *NetEaseCloudMusicAPIApiFetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGetOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_user_followers"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	if localVarOptionals != nil && localVarOptionals.Lasttime.IsSet() {
		localVarQueryParams.Add("lasttime", parameterToString(localVarOptionals.Lasttime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Pagesize.IsSet() {
		localVarQueryParams.Add("pagesize", parameterToString(localVarOptionals.Pagesize.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12Opts Optional parameters for the method 'FetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12'
type NetEaseCloudMusicAPIApiFetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12Opts struct {
    Lasttime optional.String
    Pagesize optional.String
}

/*
FetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_0 获取用户粉丝列表/Fetch user followers
# [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; lasttime &#x3D; \&quot;0\&quot; pagesize &#x3D; \&quot;20\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uid 用户ID/User ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12Opts - Optional Parameters:
 * @param "Lasttime" (optional.String) -  时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
 * @param "Pagesize" (optional.String) -  每页数量，保持默认即可/Number per page, keep the default
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12(ctx _context.Context, uid string, localVarOptionals *NetEaseCloudMusicAPIApiFetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12Opts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_user_followers"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	if localVarOptionals != nil && localVarOptionals.Lasttime.IsSet() {
		localVarQueryParams.Add("lasttime", parameterToString(localVarOptionals.Lasttime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Pagesize.IsSet() {
		localVarQueryParams.Add("pagesize", parameterToString(localVarOptionals.Pagesize.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGetOpts Optional parameters for the method 'FetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet'
type NetEaseCloudMusicAPIApiFetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGetOpts struct {
    Offset optional.String
    Limit optional.String
}

/*
FetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet 获取用户关注列表/Fetch user follows
# [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uid 用户ID/User ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGetOpts - Optional Parameters:
 * @param "Offset" (optional.String) -  偏移量，保持默认即可/Offset, keep the default
 * @param "Limit" (optional.String) -  每页数量，保持默认即可/Number per page, keep the default
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet(ctx _context.Context, uid string, localVarOptionals *NetEaseCloudMusicAPIApiFetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGetOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_user_follows"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13Opts Optional parameters for the method 'FetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13'
type NetEaseCloudMusicAPIApiFetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13Opts struct {
    Offset optional.String
    Limit optional.String
}

/*
FetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_0 获取用户关注列表/Fetch user follows
# [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uid 用户ID/User ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13Opts - Optional Parameters:
 * @param "Offset" (optional.String) -  偏移量，保持默认即可/Offset, keep the default
 * @param "Limit" (optional.String) -  每页数量，保持默认即可/Number per page, keep the default
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13(ctx _context.Context, uid string, localVarOptionals *NetEaseCloudMusicAPIApiFetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13Opts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_user_follows"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet 获取用户信息/Get user information
# [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid &#x3D; \&quot;254132915\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uid 用户ID/User ID
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet(ctx _context.Context, uid string) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_user_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_0 获取用户信息/Get user information
# [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid &#x3D; \&quot;254132915\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uid 用户ID/User ID
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_14(ctx _context.Context, uid string) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_user_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGetOpts Optional parameters for the method 'FetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet'
type NetEaseCloudMusicAPIApiFetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGetOpts struct {
    Offset optional.String
    Limit optional.String
}

/*
FetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet 获取用户歌单/Get user playlist
# [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uid 用户ID/User ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGetOpts - Optional Parameters:
 * @param "Offset" (optional.String) -  偏移量，保持默认即可/Offset, keep the default
 * @param "Limit" (optional.String) -  每页数量，保持默认即可/Number per page, keep the default
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet(ctx _context.Context, uid string, localVarOptionals *NetEaseCloudMusicAPIApiFetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGetOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_user_playlist"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiFetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15Opts Optional parameters for the method 'FetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15'
type NetEaseCloudMusicAPIApiFetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15Opts struct {
    Offset optional.String
    Limit optional.String
}

/*
FetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_0 获取用户歌单/Get user playlist
# [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param uid 用户ID/User ID
 * @param optional nil or *NetEaseCloudMusicAPIApiFetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15Opts - Optional Parameters:
 * @param "Offset" (optional.String) -  偏移量，保持默认即可/Offset, keep the default
 * @param "Limit" (optional.String) -  每页数量，保持默认即可/Number per page, keep the default
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) FetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15(ctx _context.Context, uid string, localVarOptionals *NetEaseCloudMusicAPIApiFetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15Opts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/fetch_user_playlist"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiSearchV1ApiV1NetEaseCloudMusicAppSearchV1GetOpts Optional parameters for the method 'SearchV1ApiV1NetEaseCloudMusicAppSearchV1Get'
type NetEaseCloudMusicAPIApiSearchV1ApiV1NetEaseCloudMusicAppSearchV1GetOpts struct {
    Offset optional.String
    Limit optional.String
    Type_ optional.String
}

/*
SearchV1ApiV1NetEaseCloudMusicAppSearchV1Get 搜索接口V1/Search interface V1
# [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (&#x60;type&#x60;)**：     * 单曲搜索：&#x60;\&quot;type\&quot;:\&quot;1\&quot;&#x60;     * 歌手搜索：&#x60;\&quot;type\&quot;:\&quot;100\&quot;&#x60;     * 专辑搜索：&#x60;\&quot;type\&quot;:\&quot;10\&quot;&#x60;     * 歌单搜索：&#x60;\&quot;type\&quot;:\&quot;1000\&quot;&#x60;     * MV搜索：&#x60;\&quot;type\&quot;:\&quot;1004\&quot;&#x60;     * 主播电台搜索：&#x60;\&quot;type\&quot;:\&quot;1009\&quot;&#x60;     * 用户搜索：&#x60;\&quot;type\&quot;:\&quot;1002\&quot;&#x60; ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (&#x60;type&#x60;)**:     * Single search: &#x60;\&quot;type\&quot;:\&quot;1\&quot;&#x60;     * Singer search: &#x60;\&quot;type\&quot;:\&quot;100\&quot;&#x60;     * Album search: &#x60;\&quot;type\&quot;:\&quot;10\&quot;&#x60;     * Playlist search: &#x60;\&quot;type\&quot;:\&quot;1000\&quot;&#x60;     * MV search: &#x60;\&quot;type\&quot;:\&quot;1004\&quot;&#x60;     * Anchor radio search: &#x60;\&quot;type\&quot;:\&quot;1009\&quot;&#x60;     * User search: &#x60;\&quot;type\&quot;:\&quot;1002\&quot;&#x60; ### Returns: - Search results  # [示例/Example] keywords &#x3D; \&quot;周杰伦\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot; _type &#x3D; \&quot;1\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param keywords 关键词/Keywords
 * @param optional nil or *NetEaseCloudMusicAPIApiSearchV1ApiV1NetEaseCloudMusicAppSearchV1GetOpts - Optional Parameters:
 * @param "Offset" (optional.String) -  偏移量，保持默认即可/Offset, keep the default
 * @param "Limit" (optional.String) -  每页数量，保持默认即可/Number per page, keep the default
 * @param "Type_" (optional.String) -  搜索类型/Search type
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) SearchV1ApiV1NetEaseCloudMusicAppSearchV1Get(ctx _context.Context, keywords string, localVarOptionals *NetEaseCloudMusicAPIApiSearchV1ApiV1NetEaseCloudMusicAppSearchV1GetOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/search_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keywords", parameterToString(keywords, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("_type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// NetEaseCloudMusicAPIApiSearchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16Opts Optional parameters for the method 'SearchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16'
type NetEaseCloudMusicAPIApiSearchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16Opts struct {
    Offset optional.String
    Limit optional.String
    Type_ optional.String
}

/*
SearchV1ApiV1NetEaseCloudMusicAppSearchV1Get_0 搜索接口V1/Search interface V1
# [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (&#x60;type&#x60;)**：     * 单曲搜索：&#x60;\&quot;type\&quot;:\&quot;1\&quot;&#x60;     * 歌手搜索：&#x60;\&quot;type\&quot;:\&quot;100\&quot;&#x60;     * 专辑搜索：&#x60;\&quot;type\&quot;:\&quot;10\&quot;&#x60;     * 歌单搜索：&#x60;\&quot;type\&quot;:\&quot;1000\&quot;&#x60;     * MV搜索：&#x60;\&quot;type\&quot;:\&quot;1004\&quot;&#x60;     * 主播电台搜索：&#x60;\&quot;type\&quot;:\&quot;1009\&quot;&#x60;     * 用户搜索：&#x60;\&quot;type\&quot;:\&quot;1002\&quot;&#x60; ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (&#x60;type&#x60;)**:     * Single search: &#x60;\&quot;type\&quot;:\&quot;1\&quot;&#x60;     * Singer search: &#x60;\&quot;type\&quot;:\&quot;100\&quot;&#x60;     * Album search: &#x60;\&quot;type\&quot;:\&quot;10\&quot;&#x60;     * Playlist search: &#x60;\&quot;type\&quot;:\&quot;1000\&quot;&#x60;     * MV search: &#x60;\&quot;type\&quot;:\&quot;1004\&quot;&#x60;     * Anchor radio search: &#x60;\&quot;type\&quot;:\&quot;1009\&quot;&#x60;     * User search: &#x60;\&quot;type\&quot;:\&quot;1002\&quot;&#x60; ### Returns: - Search results  # [示例/Example] keywords &#x3D; \&quot;周杰伦\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot; _type &#x3D; \&quot;1\&quot;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param keywords 关键词/Keywords
 * @param optional nil or *NetEaseCloudMusicAPIApiSearchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16Opts - Optional Parameters:
 * @param "Offset" (optional.String) -  偏移量，保持默认即可/Offset, keep the default
 * @param "Limit" (optional.String) -  每页数量，保持默认即可/Number per page, keep the default
 * @param "Type_" (optional.String) -  搜索类型/Search type
@return string
*/
func (a *NetEaseCloudMusicAPIApiService) SearchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16(ctx _context.Context, keywords string, localVarOptionals *NetEaseCloudMusicAPIApiSearchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16Opts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/net_ease_cloud_music/app/search_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keywords", parameterToString(keywords, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("_type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
