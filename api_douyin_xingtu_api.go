/*
 * TikHub Private API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tikhub

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// DouyinXingtuAPIApiService DouyinXingtuAPIApi service
type DouyinXingtuAPIApiService service

/*
AuthorContentHotCommentKeywordsV1ApiV1DouyinXingtuAuthorContentHotCommentKeywordsV1Get 获取kol热词分析内容V1/Get Author Content Hot Comment Keywords V1
# [中文] ### 用途: - 获取kol热词分析内容V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol热词分析内容  # [English] ### Purpose: - Get Author Content Hot Comment Keywords V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - Author Content Hot Comment Keywords  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) AuthorContentHotCommentKeywordsV1ApiV1DouyinXingtuAuthorContentHotCommentKeywordsV1Get(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/author_content_hot_comment_keywords_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
AuthorContentHotCommentKeywordsV1ApiV1DouyinXingtuAuthorContentHotCommentKeywordsV1Get_0 获取kol热词分析内容V1/Get Author Content Hot Comment Keywords V1
# [中文] ### 用途: - 获取kol热词分析内容V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol热词分析内容  # [English] ### Purpose: - Get Author Content Hot Comment Keywords V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - Author Content Hot Comment Keywords  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) AuthorContentHotCommentKeywordsV1ApiV1DouyinXingtuAuthorContentHotCommentKeywordsV1Get_1(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/author_content_hot_comment_keywords_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
AuthorHotCommentTokensV1ApiV1DouyinXingtuAuthorHotCommentTokensV1Get 获取kol热词分析评论V1/Get Author Hot Comment Tokens V1
# [中文] ### 用途: - 获取kol热词分析评论V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol热词分析评论  # [English] ### Purpose: - Get Author Hot Comment Tokens V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - Author Hot Comment Tokens  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) AuthorHotCommentTokensV1ApiV1DouyinXingtuAuthorHotCommentTokensV1Get(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/author_hot_comment_tokens_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
AuthorHotCommentTokensV1ApiV1DouyinXingtuAuthorHotCommentTokensV1Get_0 获取kol热词分析评论V1/Get Author Hot Comment Tokens V1
# [中文] ### 用途: - 获取kol热词分析评论V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol热词分析评论  # [English] ### Purpose: - Get Author Hot Comment Tokens V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - Author Hot Comment Tokens  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) AuthorHotCommentTokensV1ApiV1DouyinXingtuAuthorHotCommentTokensV1Get_2(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/author_hot_comment_tokens_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetXingtuKolidBySecUserIdApiV1DouyinXingtuGetXingtuKolidBySecUserIdGet 根据抖音sec_user_id获取游客星图kolid/Get XingTu kolid by Douyin sec_user_id
# [中文] ### 用途: - 通过抖音sec_user_id获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - sec_user_id: sec_user_id, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin sec_user_id - Price: 0.001$ / time ### Parameters: - sec_user_id: sec_user_id, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### Return: - XingTu kolid  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAoxwUZouIdKL6sZ8EB96KDjkrhfBMS1KbCgsMJR1kIUs\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 抖音用户sec_user_id/Douyin User sec_user_id

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) GetXingtuKolidBySecUserIdApiV1DouyinXingtuGetXingtuKolidBySecUserIdGet(ctx _context.Context, secUserId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetXingtuKolidBySecUserIdApiV1DouyinXingtuGetXingtuKolidBySecUserIdGet_0 根据抖音sec_user_id获取游客星图kolid/Get XingTu kolid by Douyin sec_user_id
# [中文] ### 用途: - 通过抖音sec_user_id获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - sec_user_id: sec_user_id, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin sec_user_id - Price: 0.001$ / time ### Parameters: - sec_user_id: sec_user_id, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### Return: - XingTu kolid  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAoxwUZouIdKL6sZ8EB96KDjkrhfBMS1KbCgsMJR1kIUs\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 抖音用户sec_user_id/Douyin User sec_user_id

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) GetXingtuKolidBySecUserIdApiV1DouyinXingtuGetXingtuKolidBySecUserIdGet_3(ctx _context.Context, secUserId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetXingtuKolidByUidApiV1DouyinXingtuGetXingtuKolidByUidGet 根据抖音用户ID获取游客星图kolid/Get XingTu kolid by Douyin User ID
# [中文] ### 用途: - 通过抖音用户ID获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - uid: 用户ID, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_uid&#x60;     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_short_id&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin User ID - Price: 0.001$ / time ### Parameters: - uid: User ID, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_uid&#x60;     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_short_id&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### Return: - XingTu kolid  # [示例/Example] uid &#x3D; \&quot;70452002324\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uid 抖音用户ID/Douyin User ID

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) GetXingtuKolidByUidApiV1DouyinXingtuGetXingtuKolidByUidGet(ctx _context.Context, uid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetXingtuKolidByUidApiV1DouyinXingtuGetXingtuKolidByUidGet_0 根据抖音用户ID获取游客星图kolid/Get XingTu kolid by Douyin User ID
# [中文] ### 用途: - 通过抖音用户ID获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - uid: 用户ID, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_uid&#x60;     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_short_id&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin User ID - Price: 0.001$ / time ### Parameters: - uid: User ID, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_uid&#x60;     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_short_id&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### Return: - XingTu kolid  # [示例/Example] uid &#x3D; \&quot;70452002324\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uid 抖音用户ID/Douyin User ID

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) GetXingtuKolidByUidApiV1DouyinXingtuGetXingtuKolidByUidGet_4(ctx _context.Context, uid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetXingtuKolidByUniqueIdApiV1DouyinXingtuGetXingtuKolidByUniqueIdGet 根据抖音号获取游客星图kolid/Get XingTu kolid by Douyin unique_id
# [中文] ### 用途: - 通过抖音号获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - unique_id: 抖音号, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin unique_id - Price: 0.001$ / time ### Parameters: - unique_id: unique_id, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### Return: - XingTu kolid  # [示例/Example] unique_id &#x3D; \&quot;m6640150\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uniqueId 抖音号/Douyin User unique_id

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) GetXingtuKolidByUniqueIdApiV1DouyinXingtuGetXingtuKolidByUniqueIdGet(ctx _context.Context, uniqueId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("unique_id", parameterToString(uniqueId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetXingtuKolidByUniqueIdApiV1DouyinXingtuGetXingtuKolidByUniqueIdGet_0 根据抖音号获取游客星图kolid/Get XingTu kolid by Douyin unique_id
# [中文] ### 用途: - 通过抖音号获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - unique_id: 抖音号, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin unique_id - Price: 0.001$ / time ### Parameters: - unique_id: unique_id, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### Return: - XingTu kolid  # [示例/Example] unique_id &#x3D; \&quot;m6640150\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uniqueId 抖音号/Douyin User unique_id

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) GetXingtuKolidByUniqueIdApiV1DouyinXingtuGetXingtuKolidByUniqueIdGet_5(ctx _context.Context, uniqueId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("unique_id", parameterToString(uniqueId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolAudiencePortraitV1ApiV1DouyinXingtuKolAudiencePortraitV1Get 获取kol观众画像V1/Get kol Audience Portrait V1
# [中文] ### 用途: - 获取kol观众画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol观众画像  # [English] ### Purpose: - Get kol Audience Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Audience Portrait  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolAudiencePortraitV1ApiV1DouyinXingtuKolAudiencePortraitV1Get(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_audience_portrait_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolAudiencePortraitV1ApiV1DouyinXingtuKolAudiencePortraitV1Get_0 获取kol观众画像V1/Get kol Audience Portrait V1
# [中文] ### 用途: - 获取kol观众画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol观众画像  # [English] ### Purpose: - Get kol Audience Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Audience Portrait  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolAudiencePortraitV1ApiV1DouyinXingtuKolAudiencePortraitV1Get_6(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_audience_portrait_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolBaseInfoV1ApiV1DouyinXingtuKolBaseInfoV1Get 获取kol基本信息V1/Get kol Base Info V1
# [中文] ### 用途: - 获取kol基本信息V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - 平台渠道，支持以下参数:     - _1 :抖音短视频(Video)     - _10 :抖音直播(Live) ### 返回: - kol基本信息  # [English] ### Purpose: - Get kol Base Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - Platform channel, supports the following parameters:     - _1 :Douyin Video     - _10 :Douyin Live ### Return: - kol Base Info  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; platformChannel &#x3D; \&quot;_1\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param platformChannel 平台渠道/Platform Channel

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolBaseInfoV1ApiV1DouyinXingtuKolBaseInfoV1Get(ctx _context.Context, kolId string, platformChannel string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_base_info_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("platformChannel", parameterToString(platformChannel, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolBaseInfoV1ApiV1DouyinXingtuKolBaseInfoV1Get_0 获取kol基本信息V1/Get kol Base Info V1
# [中文] ### 用途: - 获取kol基本信息V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - 平台渠道，支持以下参数:     - _1 :抖音短视频(Video)     - _10 :抖音直播(Live) ### 返回: - kol基本信息  # [English] ### Purpose: - Get kol Base Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - Platform channel, supports the following parameters:     - _1 :Douyin Video     - _10 :Douyin Live ### Return: - kol Base Info  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; platformChannel &#x3D; \&quot;_1\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param platformChannel 平台渠道/Platform Channel

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolBaseInfoV1ApiV1DouyinXingtuKolBaseInfoV1Get_7(ctx _context.Context, kolId string, platformChannel string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_base_info_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("platformChannel", parameterToString(platformChannel, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolConversionAbilityAnalysisV1ApiV1DouyinXingtuKolConversionAbilityAnalysisV1Get 获取kol转化能力分析V1/Get kol Conversion Ability Analysis V1
# [中文] ### 用途: - 获取kol转化能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _range: 时间范围, 支持以下参数:     - _1 :近7天(last 7 days)     - _2 :30天(last 30 days)     - _3 :90天(last 90 days) ### 返回: - kol转化能力分析  # [English] ### Purpose: - Get kol Conversion Ability Analysis V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _range: Time range, supports the following parameters:     - _1 :Last 7 days     - _2 :Last 30 days     - _3 :Last 90 days ### Return: - kol Conversion Ability Analysis  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; _range &#x3D; \&quot;_1\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param range_ 时间范围/Time Range

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolConversionAbilityAnalysisV1ApiV1DouyinXingtuKolConversionAbilityAnalysisV1Get(ctx _context.Context, kolId string, range_ string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_conversion_ability_analysis_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("_range", parameterToString(range_, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolConversionAbilityAnalysisV1ApiV1DouyinXingtuKolConversionAbilityAnalysisV1Get_0 获取kol转化能力分析V1/Get kol Conversion Ability Analysis V1
# [中文] ### 用途: - 获取kol转化能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _range: 时间范围, 支持以下参数:     - _1 :近7天(last 7 days)     - _2 :30天(last 30 days)     - _3 :90天(last 90 days) ### 返回: - kol转化能力分析  # [English] ### Purpose: - Get kol Conversion Ability Analysis V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _range: Time range, supports the following parameters:     - _1 :Last 7 days     - _2 :Last 30 days     - _3 :Last 90 days ### Return: - kol Conversion Ability Analysis  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; _range &#x3D; \&quot;_1\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param range_ 时间范围/Time Range

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolConversionAbilityAnalysisV1ApiV1DouyinXingtuKolConversionAbilityAnalysisV1Get_8(ctx _context.Context, kolId string, range_ string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_conversion_ability_analysis_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("_range", parameterToString(range_, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get 获取kol转化视频展示V1/Get kol Convert Video Display V1
# [中文] ### 用途: - 获取kol转化视频展示V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - detailType: 详情类型, 支持以下参数:     - _1 :相关视频数据(Video Data)     - _2 :相关商品数据(Product Data) ### 返回: - kol转化视频展示  # [English] ### Purpose: - Get kol Convert Video Display V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - detailType: Detail type, supports the following parameters:     - _1 :Video Data     - _2 :Product Data - page: Page number, starting from 1 ### Return: - kol Convert Video Display  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; detailType &#x3D; \&quot;_1\&quot; page &#x3D; 1
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param detailType 详情类型/Detail Type
  - @param page 页码/Page

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get(ctx _context.Context, kolId string, detailType string, page int32) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_convert_video_display_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("detailType", parameterToString(detailType, ""))
	localVarQueryParams.Add("page", parameterToString(page, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get_0 获取kol转化视频展示V1/Get kol Convert Video Display V1
# [中文] ### 用途: - 获取kol转化视频展示V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - detailType: 详情类型, 支持以下参数:     - _1 :相关视频数据(Video Data)     - _2 :相关商品数据(Product Data) ### 返回: - kol转化视频展示  # [English] ### Purpose: - Get kol Convert Video Display V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - detailType: Detail type, supports the following parameters:     - _1 :Video Data     - _2 :Product Data - page: Page number, starting from 1 ### Return: - kol Convert Video Display  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; detailType &#x3D; \&quot;_1\&quot; page &#x3D; 1
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param detailType 详情类型/Detail Type
  - @param page 页码/Page

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get_9(ctx _context.Context, kolId string, detailType string, page int32) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_convert_video_display_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("detailType", parameterToString(detailType, ""))
	localVarQueryParams.Add("page", parameterToString(page, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolCpInfoV1ApiV1DouyinXingtuKolCpInfoV1Get 获取kol性价比能力分析V1/Get kol Cp Info V1
# [中文] ### 用途: - 获取kol性价比能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol性价比能力分析  # [English] ### Purpose: - Get kol Cp Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Cp Info  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolCpInfoV1ApiV1DouyinXingtuKolCpInfoV1Get(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_cp_info_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolCpInfoV1ApiV1DouyinXingtuKolCpInfoV1Get_0 获取kol性价比能力分析V1/Get kol Cp Info V1
# [中文] ### 用途: - 获取kol性价比能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol性价比能力分析  # [English] ### Purpose: - Get kol Cp Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Cp Info  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolCpInfoV1ApiV1DouyinXingtuKolCpInfoV1Get_10(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_cp_info_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get 获取kol粉丝趋势V1/Get kol Daily Fnas V1
# [中文] ### 用途: - 获取kol粉丝趋势V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - startDate: 开始日期，格式为：yyyy-MM-dd - endDate: 结束日期，格式为：yyyy-MM-dd ### 返回: - kol粉丝趋势  # [English] ### Purpose: - Get kol Daily Fans V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - startDate: Start date, format: yyyy-MM-dd - endDate: End date, format: yyyy-MM-dd ### Return: - kol Daily Fans  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; startDate &#x3D; \&quot;2024-12-01\&quot; endDate &#x3D; \&quot;2025-01-01\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param startDate 开始日期/Start Date
  - @param endDate 结束日期/End Date

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get(ctx _context.Context, kolId string, startDate string, endDate string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_daily_fans_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("startDate", parameterToString(startDate, ""))
	localVarQueryParams.Add("endDate", parameterToString(endDate, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get_0 获取kol粉丝趋势V1/Get kol Daily Fnas V1
# [中文] ### 用途: - 获取kol粉丝趋势V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - startDate: 开始日期，格式为：yyyy-MM-dd - endDate: 结束日期，格式为：yyyy-MM-dd ### 返回: - kol粉丝趋势  # [English] ### Purpose: - Get kol Daily Fans V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - startDate: Start date, format: yyyy-MM-dd - endDate: End date, format: yyyy-MM-dd ### Return: - kol Daily Fans  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; startDate &#x3D; \&quot;2024-12-01\&quot; endDate &#x3D; \&quot;2025-01-01\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param startDate 开始日期/Start Date
  - @param endDate 结束日期/End Date

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get_11(ctx _context.Context, kolId string, startDate string, endDate string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_daily_fans_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("startDate", parameterToString(startDate, ""))
	localVarQueryParams.Add("endDate", parameterToString(endDate, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get 获取kol数据概览V1/Get kol Data Overview V1
# [中文] ### 用途: - 获取kol数据概览V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _type: 类型, 支持以下参数:     - _1 :个人视频(personal video)     - _2 :星图视频(xingtu video) - _range: 范围, 支持以下参数:     - _2 :近30天(last 30 days)     - _3 :近90天(last 90 days) - flowType: 流量类型, 支持以下参数:     - 1 : 默认(default) ### 返回: - kol数据概览  # [English] ### Purpose: - Get kol Data Overview V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _type: Type, supports the following parameters:     - _1 :Personal Video     - _2 :Xingtu Video - _range: Range, supports the following parameters:     - _2 :Last 30 days     - _3 :Last 90 days - flowType: Flow Type, supports the following parameters:     - 1 : Default ### Return: - kol Data Overview  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; _type &#x3D; \&quot;_1\&quot; _range &#x3D; \&quot;_2\&quot; flowType &#x3D; 1
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param type_ 类型/Type
  - @param range_ 范围/Range
  - @param flowType 流量类型/Flow Type

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get(ctx _context.Context, kolId string, type_ string, range_ string, flowType int32) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_data_overview_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("_type", parameterToString(type_, ""))
	localVarQueryParams.Add("_range", parameterToString(range_, ""))
	localVarQueryParams.Add("flowType", parameterToString(flowType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get_0 获取kol数据概览V1/Get kol Data Overview V1
# [中文] ### 用途: - 获取kol数据概览V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _type: 类型, 支持以下参数:     - _1 :个人视频(personal video)     - _2 :星图视频(xingtu video) - _range: 范围, 支持以下参数:     - _2 :近30天(last 30 days)     - _3 :近90天(last 90 days) - flowType: 流量类型, 支持以下参数:     - 1 : 默认(default) ### 返回: - kol数据概览  # [English] ### Purpose: - Get kol Data Overview V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _type: Type, supports the following parameters:     - _1 :Personal Video     - _2 :Xingtu Video - _range: Range, supports the following parameters:     - _2 :Last 30 days     - _3 :Last 90 days - flowType: Flow Type, supports the following parameters:     - 1 : Default ### Return: - kol Data Overview  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; _type &#x3D; \&quot;_1\&quot; _range &#x3D; \&quot;_2\&quot; flowType &#x3D; 1
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param type_ 类型/Type
  - @param range_ 范围/Range
  - @param flowType 流量类型/Flow Type

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get_12(ctx _context.Context, kolId string, type_ string, range_ string, flowType int32) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_data_overview_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("_type", parameterToString(type_, ""))
	localVarQueryParams.Add("_range", parameterToString(range_, ""))
	localVarQueryParams.Add("flowType", parameterToString(flowType, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolFansPortraitV1ApiV1DouyinXingtuKolFansPortraitV1Get 获取kol粉丝画像V1/Get kol Fans Portrait V1
# [中文] ### 用途: - 获取kol粉丝画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol粉丝画像  # [English] ### Purpose: - Get kol Fans Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Fans Portrait  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolFansPortraitV1ApiV1DouyinXingtuKolFansPortraitV1Get(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_fans_portrait_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolFansPortraitV1ApiV1DouyinXingtuKolFansPortraitV1Get_0 获取kol粉丝画像V1/Get kol Fans Portrait V1
# [中文] ### 用途: - 获取kol粉丝画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol粉丝画像  # [English] ### Purpose: - Get kol Fans Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Fans Portrait  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolFansPortraitV1ApiV1DouyinXingtuKolFansPortraitV1Get_13(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_fans_portrait_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolLinkStructV1ApiV1DouyinXingtuKolLinkStructV1Get 获取kol连接用户V1/Get kol Link Struct V1
# [中文] ### 用途: - 获取kol连接用户V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol连接用户  # [English] ### Purpose: - Get kol Link Struct V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Link Struct  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolLinkStructV1ApiV1DouyinXingtuKolLinkStructV1Get(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_link_struct_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolLinkStructV1ApiV1DouyinXingtuKolLinkStructV1Get_0 获取kol连接用户V1/Get kol Link Struct V1
# [中文] ### 用途: - 获取kol连接用户V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol连接用户  # [English] ### Purpose: - Get kol Link Struct V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Link Struct  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolLinkStructV1ApiV1DouyinXingtuKolLinkStructV1Get_14(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_link_struct_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolRecVideosV1ApiV1DouyinXingtuKolRecVideosV1Get 获取kol内容表现V1/Get kol Rec Videos V1
# [中文] ### 用途: - 获取kol内容表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol内容表现  # [English] ### Purpose: - Get kol Rec Videos V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Rec Videos  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolRecVideosV1ApiV1DouyinXingtuKolRecVideosV1Get(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_rec_videos_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolRecVideosV1ApiV1DouyinXingtuKolRecVideosV1Get_0 获取kol内容表现V1/Get kol Rec Videos V1
# [中文] ### 用途: - 获取kol内容表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol内容表现  # [English] ### Purpose: - Get kol Rec Videos V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Rec Videos  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolRecVideosV1ApiV1DouyinXingtuKolRecVideosV1Get_15(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_rec_videos_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolServicePriceV1ApiV1DouyinXingtuKolServicePriceV1Get 获取kol服务报价V1/Get kol Service Price V1
# [中文] ### 用途: - 获取kol服务报价V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - 平台渠道，支持以下参数:     - _1: 抖音短视频(Video)     - _10: 抖音直播(Live) ### 返回: kol服务报价  # [English] ### Purpose: - Get kol Service Price V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - Platform channel, supports the following parameters:     - _1: Douyin Video     - _10: Douyin Live ### Return: - kol Service Price  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; platformChannel &#x3D; \&quot;_1\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param platformChannel 平台渠道/Platform Channel

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolServicePriceV1ApiV1DouyinXingtuKolServicePriceV1Get(ctx _context.Context, kolId string, platformChannel string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_service_price_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("platformChannel", parameterToString(platformChannel, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolServicePriceV1ApiV1DouyinXingtuKolServicePriceV1Get_0 获取kol服务报价V1/Get kol Service Price V1
# [中文] ### 用途: - 获取kol服务报价V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - 平台渠道，支持以下参数:     - _1: 抖音短视频(Video)     - _10: 抖音直播(Live) ### 返回: kol服务报价  # [English] ### Purpose: - Get kol Service Price V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - Platform channel, supports the following parameters:     - _1: Douyin Video     - _10: Douyin Live ### Return: - kol Service Price  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; platformChannel &#x3D; \&quot;_1\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param platformChannel 平台渠道/Platform Channel

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolServicePriceV1ApiV1DouyinXingtuKolServicePriceV1Get_16(ctx _context.Context, kolId string, platformChannel string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_service_price_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("platformChannel", parameterToString(platformChannel, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolTouchDistributionV1ApiV1DouyinXingtuKolTouchDistributionV1Get 获取kol连接用户来源V1/Get kol Touch Distribution V1
# [中文] ### 用途: - 获取kol连接用户来源V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol连接用户来源  # [English] ### Purpose: - Get kol Touch Distribution V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Touch Distribution  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolTouchDistributionV1ApiV1DouyinXingtuKolTouchDistributionV1Get(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_touch_distribution_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolTouchDistributionV1ApiV1DouyinXingtuKolTouchDistributionV1Get_0 获取kol连接用户来源V1/Get kol Touch Distribution V1
# [中文] ### 用途: - 获取kol连接用户来源V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol连接用户来源  # [English] ### Purpose: - Get kol Touch Distribution V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Touch Distribution  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolTouchDistributionV1ApiV1DouyinXingtuKolTouchDistributionV1Get_17(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_touch_distribution_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolVideoPerformanceV1ApiV1DouyinXingtuKolVideoPerformanceV1Get 获取kol视频表现V1/Get kol Video Performance V1
# [中文] ### 用途: - 获取kol视频表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - onlyAssign: 是否只显示分配作品，具体参数如下:     - false : 显示全部，包括个人作品和分配作品，默认值。     - true : 只显示来自星图的分配作品。 ### 返回: - kol视频表现  # [English] ### Purpose: - Get kol Video Performance V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - onlyAssign: Whether to display only assigned works, the specific parameters are as follows:     - false : Show all, including personal works and assigned works, default value.     - true : Only display assigned works from XingTu. ### Return: - kol Video Performance  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; onlyAssign &#x3D; False
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param onlyAssign 是否只显示分配作品/Whether to display only assigned works

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolVideoPerformanceV1ApiV1DouyinXingtuKolVideoPerformanceV1Get(ctx _context.Context, kolId string, onlyAssign bool) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_video_performance_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("onlyAssign", parameterToString(onlyAssign, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolVideoPerformanceV1ApiV1DouyinXingtuKolVideoPerformanceV1Get_0 获取kol视频表现V1/Get kol Video Performance V1
# [中文] ### 用途: - 获取kol视频表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - onlyAssign: 是否只显示分配作品，具体参数如下:     - false : 显示全部，包括个人作品和分配作品，默认值。     - true : 只显示来自星图的分配作品。 ### 返回: - kol视频表现  # [English] ### Purpose: - Get kol Video Performance V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - onlyAssign: Whether to display only assigned works, the specific parameters are as follows:     - false : Show all, including personal works and assigned works, default value.     - true : Only display assigned works from XingTu. ### Return: - kol Video Performance  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; onlyAssign &#x3D; False
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId
  - @param onlyAssign 是否只显示分配作品/Whether to display only assigned works

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolVideoPerformanceV1ApiV1DouyinXingtuKolVideoPerformanceV1Get_18(ctx _context.Context, kolId string, onlyAssign bool) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_video_performance_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	localVarQueryParams.Add("onlyAssign", parameterToString(onlyAssign, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolXingtuIndexV1ApiV1DouyinXingtuKolXingtuIndexV1Get 获取kol星图指数V1/Get kol Xingtu Index V1
# [中文] ### 用途: - 获取kol星图指数V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol星图指数  # [English] ### Purpose: - Get kol Xingtu Index V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Xingtu Index  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolXingtuIndexV1ApiV1DouyinXingtuKolXingtuIndexV1Get(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_xingtu_index_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
KolXingtuIndexV1ApiV1DouyinXingtuKolXingtuIndexV1Get_0 获取kol星图指数V1/Get kol Xingtu Index V1
# [中文] ### 用途: - 获取kol星图指数V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol星图指数  # [English] ### Purpose: - Get kol Xingtu Index V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Xingtu Index  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 用户的kolId/User kolId

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) KolXingtuIndexV1ApiV1DouyinXingtuKolXingtuIndexV1Get_19(ctx _context.Context, kolId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/kol_xingtu_index_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kolId", parameterToString(kolId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
SearchKolV1ApiV1DouyinXingtuSearchKolV1Get 关键词搜索kol V1/Search Kol V1
# [中文] ### 用途: - 关键词搜索kol V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - keyword: 关键词 - platformSource:     - 平台来源，支持以下参数:     - _1 :抖音(douyin)     - _2 :头条(toutiao)     - _3 :西瓜(xigua) - page: 页码，从1开始 ### 返回: - kol列表  # [English] ### Purpose: - Search Kol V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - keyword: Keyword - platformSource:     - Platform source, supports the following parameters:     - _1 :Douyin     - _2 :Toutiao     - _3 :Xigua - page: Page number, starting from 1 ### Return: - Kol List  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; platformSource &#x3D; \&quot;_1\&quot; page &#x3D; 1
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param platformSource 平台来源/Platform Source
  - @param page 页码/Page

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) SearchKolV1ApiV1DouyinXingtuSearchKolV1Get(ctx _context.Context, keyword string, platformSource string, page int32) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/search_kol_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	localVarQueryParams.Add("platformSource", parameterToString(platformSource, ""))
	localVarQueryParams.Add("page", parameterToString(page, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
SearchKolV1ApiV1DouyinXingtuSearchKolV1Get_0 关键词搜索kol V1/Search Kol V1
# [中文] ### 用途: - 关键词搜索kol V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - keyword: 关键词 - platformSource:     - 平台来源，支持以下参数:     - _1 :抖音(douyin)     - _2 :头条(toutiao)     - _3 :西瓜(xigua) - page: 页码，从1开始 ### 返回: - kol列表  # [English] ### Purpose: - Search Kol V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - keyword: Keyword - platformSource:     - Platform source, supports the following parameters:     - _1 :Douyin     - _2 :Toutiao     - _3 :Xigua - page: Page number, starting from 1 ### Return: - Kol List  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; platformSource &#x3D; \&quot;_1\&quot; page &#x3D; 1
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param platformSource 平台来源/Platform Source
  - @param page 页码/Page

@return ResponseModel
*/
func (a *DouyinXingtuAPIApiService) SearchKolV1ApiV1DouyinXingtuSearchKolV1Get_20(ctx _context.Context, keyword string, platformSource string, page int32) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/douyin/xingtu/search_kol_v1"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	localVarQueryParams.Add("platformSource", parameterToString(platformSource, ""))
	localVarQueryParams.Add("page", parameterToString(page, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
