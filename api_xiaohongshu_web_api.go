/*
 * TikHub Private API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tikhub

import (
	_context "context"
	"github.com/antihax/optional"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// XiaohongshuWebAPIApiService XiaohongshuWebAPIApi service
type XiaohongshuWebAPIApiService service

// XiaohongshuWebAPIApiGetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPostOpts Optional parameters for the method 'GetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost'
type XiaohongshuWebAPIApiGetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPostOpts struct {
	GetHomeFeedRequest optional.Interface
}

/*
GetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost 获取首页推荐/Get home recommend
# [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type&#x3D;\&quot;0\&quot; need_filter_image&#x3D;False
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiGetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPostOpts - Optional Parameters:
  - @param "GetHomeFeedRequest" (optional.Interface of GetHomeFeedRequest) -

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiGetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_home_recommend"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.GetHomeFeedRequest.IsSet() {
		localVarOptionalGetHomeFeedRequest, localVarOptionalGetHomeFeedRequestok := localVarOptionals.GetHomeFeedRequest.Value().(GetHomeFeedRequest)
		if !localVarOptionalGetHomeFeedRequestok {
			return localVarReturnValue, nil, reportError("getHomeFeedRequest should be GetHomeFeedRequest")
		}
		localVarPostBody = &localVarOptionalGetHomeFeedRequest
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1Opts Optional parameters for the method 'GetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1'
type XiaohongshuWebAPIApiGetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1Opts struct {
	GetHomeFeedRequest optional.Interface
}

/*
GetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_0 获取首页推荐/Get home recommend
# [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type&#x3D;\&quot;0\&quot; need_filter_image&#x3D;False
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiGetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1Opts - Optional Parameters:
  - @param "GetHomeFeedRequest" (optional.Interface of GetHomeFeedRequest) -

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiGetHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_home_recommend"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.GetHomeFeedRequest.IsSet() {
		localVarOptionalGetHomeFeedRequest, localVarOptionalGetHomeFeedRequestok := localVarOptionals.GetHomeFeedRequest.Value().(GetHomeFeedRequest)
		if !localVarOptionalGetHomeFeedRequestok {
			return localVarReturnValue, nil, reportError("getHomeFeedRequest should be GetHomeFeedRequest")
		}
		localVarPostBody = &localVarOptionalGetHomeFeedRequest
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGetOpts Optional parameters for the method 'GetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet'
type XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGetOpts struct {
	LastCursor optional.String
}

/*
GetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet 获取笔记评论回复 V1/Get note comment replies V1
# [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; comment_id&#x3D;\&quot;6683ec5b000000000303b91a\&quot; lastCursor&#x3D;None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param noteId 笔记ID/Note ID
  - @param commentId 评论ID/Comment ID
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGetOpts - Optional Parameters:
  - @param "LastCursor" (optional.String) -  上一页的游标/Last cursor

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet(ctx _context.Context, noteId string, commentId string, localVarOptionals *XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_comment_replies"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("note_id", parameterToString(noteId, ""))
	localVarQueryParams.Add("comment_id", parameterToString(commentId, ""))
	if localVarOptionals != nil && localVarOptionals.LastCursor.IsSet() {
		localVarQueryParams.Add("lastCursor", parameterToString(localVarOptionals.LastCursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2Opts Optional parameters for the method 'GetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2'
type XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2Opts struct {
	LastCursor optional.String
}

/*
GetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_0 获取笔记评论回复 V1/Get note comment replies V1
# [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; comment_id&#x3D;\&quot;6683ec5b000000000303b91a\&quot; lastCursor&#x3D;None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param noteId 笔记ID/Note ID
  - @param commentId 评论ID/Comment ID
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2Opts - Optional Parameters:
  - @param "LastCursor" (optional.String) -  上一页的游标/Last cursor

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2(ctx _context.Context, noteId string, commentId string, localVarOptionals *XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_comment_replies"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("note_id", parameterToString(noteId, ""))
	localVarQueryParams.Add("comment_id", parameterToString(commentId, ""))
	if localVarOptionals != nil && localVarOptionals.LastCursor.IsSet() {
		localVarQueryParams.Add("lastCursor", parameterToString(localVarOptionals.LastCursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2GetOpts Optional parameters for the method 'GetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get'
type XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2GetOpts struct {
	LastCursor optional.String
}

/*
GetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get 获取笔记评论回复 V2/Get note comment replies V2
# [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; comment_id&#x3D;\&quot;6683ec5b000000000303b91a\&quot; lastCursor&#x3D;None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param noteId 笔记ID/Note ID
  - @param commentId 评论ID/Comment ID
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2GetOpts - Optional Parameters:
  - @param "LastCursor" (optional.String) -  上一页的游标/Last cursor

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get(ctx _context.Context, noteId string, commentId string, localVarOptionals *XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_comment_replies_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("note_id", parameterToString(noteId, ""))
	localVarQueryParams.Add("comment_id", parameterToString(commentId, ""))
	if localVarOptionals != nil && localVarOptionals.LastCursor.IsSet() {
		localVarQueryParams.Add("lastCursor", parameterToString(localVarOptionals.LastCursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3Opts Optional parameters for the method 'GetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3'
type XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3Opts struct {
	LastCursor optional.String
}

/*
GetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_0 获取笔记评论回复 V2/Get note comment replies V2
# [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; comment_id&#x3D;\&quot;6683ec5b000000000303b91a\&quot; lastCursor&#x3D;None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param noteId 笔记ID/Note ID
  - @param commentId 评论ID/Comment ID
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3Opts - Optional Parameters:
  - @param "LastCursor" (optional.String) -  上一页的游标/Last cursor

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3(ctx _context.Context, noteId string, commentId string, localVarOptionals *XiaohongshuWebAPIApiGetNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_comment_replies_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("note_id", parameterToString(noteId, ""))
	localVarQueryParams.Add("comment_id", parameterToString(commentId, ""))
	if localVarOptionals != nil && localVarOptionals.LastCursor.IsSet() {
		localVarQueryParams.Add("lastCursor", parameterToString(localVarOptionals.LastCursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGetOpts Optional parameters for the method 'GetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet'
type XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGetOpts struct {
	LastCursor optional.String
}

/*
GetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet 获取笔记评论 V1/Get note comments V1
# [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; lastCursor&#x3D;None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param noteId 笔记ID/Note ID
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGetOpts - Optional Parameters:
  - @param "LastCursor" (optional.String) -  上一页的游标/Last cursor

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet(ctx _context.Context, noteId string, localVarOptionals *XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_comments"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("note_id", parameterToString(noteId, ""))
	if localVarOptionals != nil && localVarOptionals.LastCursor.IsSet() {
		localVarQueryParams.Add("lastCursor", parameterToString(localVarOptionals.LastCursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4Opts Optional parameters for the method 'GetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4'
type XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4Opts struct {
	LastCursor optional.String
}

/*
GetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_0 获取笔记评论 V1/Get note comments V1
# [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; lastCursor&#x3D;None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param noteId 笔记ID/Note ID
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4Opts - Optional Parameters:
  - @param "LastCursor" (optional.String) -  上一页的游标/Last cursor

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4(ctx _context.Context, noteId string, localVarOptionals *XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_comments"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("note_id", parameterToString(noteId, ""))
	if localVarOptionals != nil && localVarOptionals.LastCursor.IsSet() {
		localVarQueryParams.Add("lastCursor", parameterToString(localVarOptionals.LastCursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2GetOpts Optional parameters for the method 'GetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get'
type XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2GetOpts struct {
	LastCursor optional.String
}

/*
GetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get 获取笔记评论 V2/Get note comments V2
# [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; lastCursor&#x3D;None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param noteId 笔记ID/Note ID
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2GetOpts - Optional Parameters:
  - @param "LastCursor" (optional.String) -  上一页的游标/Last cursor

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get(ctx _context.Context, noteId string, localVarOptionals *XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_comments_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("note_id", parameterToString(noteId, ""))
	if localVarOptionals != nil && localVarOptionals.LastCursor.IsSet() {
		localVarQueryParams.Add("lastCursor", parameterToString(localVarOptionals.LastCursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5Opts Optional parameters for the method 'GetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5'
type XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5Opts struct {
	LastCursor optional.String
}

/*
GetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_0 获取笔记评论 V2/Get note comments V2
# [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; lastCursor&#x3D;None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param noteId 笔记ID/Note ID
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5Opts - Optional Parameters:
  - @param "LastCursor" (optional.String) -  上一页的游标/Last cursor

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5(ctx _context.Context, noteId string, localVarOptionals *XiaohongshuWebAPIApiGetNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_comments_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("note_id", parameterToString(noteId, ""))
	if localVarOptionals != nil && localVarOptionals.LastCursor.IsSet() {
		localVarQueryParams.Add("lastCursor", parameterToString(localVarOptionals.LastCursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
# [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text&#x3D;\&quot;https://xhslink.com/a/EZ4M9TwMA6c3\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareText 分享链接/Share link

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet(ctx _context.Context, shareText string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_id_and_xsec_token"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_text", parameterToString(shareText, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_0 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
# [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text&#x3D;\&quot;https://xhslink.com/a/EZ4M9TwMA6c3\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareText 分享链接/Share link

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_6(ctx _context.Context, shareText string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_id_and_xsec_token"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_text", parameterToString(shareText, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGetOpts Optional parameters for the method 'GetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet'
type XiaohongshuWebAPIApiGetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGetOpts struct {
	NoteId    optional.String
	ShareText optional.String
}

/*
GetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet 获取笔记信息 V1/Get note info V1
# [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用&#x60;note_id&#x60;，如果没有则使用&#x60;share_text&#x60;，两个参数二选一，如都携带则以&#x60;note_id&#x60;为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use &#x60;note_id&#x60;, if not, use &#x60;share_text&#x60;, one of the two parameters is required, if both are carried, &#x60;note_id&#x60; shall prevail. ### Return: - Note info  # [示例/Example] note_id&#x3D;\&quot;665f95200000000006005624\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGetOpts - Optional Parameters:
  - @param "NoteId" (optional.String) -  笔记ID/Note ID
  - @param "ShareText" (optional.String) -  分享链接/Share link

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiGetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.NoteId.IsSet() {
		localVarQueryParams.Add("note_id", parameterToString(localVarOptionals.NoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShareText.IsSet() {
		localVarQueryParams.Add("share_text", parameterToString(localVarOptionals.ShareText.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7Opts Optional parameters for the method 'GetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7'
type XiaohongshuWebAPIApiGetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7Opts struct {
	NoteId    optional.String
	ShareText optional.String
}

/*
GetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_0 获取笔记信息 V1/Get note info V1
# [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用&#x60;note_id&#x60;，如果没有则使用&#x60;share_text&#x60;，两个参数二选一，如都携带则以&#x60;note_id&#x60;为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use &#x60;note_id&#x60;, if not, use &#x60;share_text&#x60;, one of the two parameters is required, if both are carried, &#x60;note_id&#x60; shall prevail. ### Return: - Note info  # [示例/Example] note_id&#x3D;\&quot;665f95200000000006005624\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7Opts - Optional Parameters:
  - @param "NoteId" (optional.String) -  笔记ID/Note ID
  - @param "ShareText" (optional.String) -  分享链接/Share link

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiGetNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.NoteId.IsSet() {
		localVarQueryParams.Add("note_id", parameterToString(localVarOptionals.NoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShareText.IsSet() {
		localVarQueryParams.Add("share_text", parameterToString(localVarOptionals.ShareText.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2GetOpts Optional parameters for the method 'GetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get'
type XiaohongshuWebAPIApiGetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2GetOpts struct {
	NoteId    optional.String
	ShareText optional.String
}

/*
GetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get 获取笔记信息 V2/Get note info V2
# [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用&#x60;note_id&#x60;，如果没有则使用&#x60;share_text&#x60;，两个参数二选一，如都携带则以&#x60;note_id&#x60;为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use &#x60;note_id&#x60;, if not, use &#x60;share_text&#x60;, one of the two parameters is required, if both are carried, &#x60;note_id&#x60; shall prevail. ### Return: - Note info  # [示例/Example] note_id&#x3D;\&quot;665f95200000000006005624\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2GetOpts - Optional Parameters:
  - @param "NoteId" (optional.String) -  笔记ID/Note ID
  - @param "ShareText" (optional.String) -  分享链接/Share link

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiGetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_info_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.NoteId.IsSet() {
		localVarQueryParams.Add("note_id", parameterToString(localVarOptionals.NoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShareText.IsSet() {
		localVarQueryParams.Add("share_text", parameterToString(localVarOptionals.ShareText.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8Opts Optional parameters for the method 'GetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8'
type XiaohongshuWebAPIApiGetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8Opts struct {
	NoteId    optional.String
	ShareText optional.String
}

/*
GetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_0 获取笔记信息 V2/Get note info V2
# [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用&#x60;note_id&#x60;，如果没有则使用&#x60;share_text&#x60;，两个参数二选一，如都携带则以&#x60;note_id&#x60;为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use &#x60;note_id&#x60;, if not, use &#x60;share_text&#x60;, one of the two parameters is required, if both are carried, &#x60;note_id&#x60; shall prevail. ### Return: - Note info  # [示例/Example] note_id&#x3D;\&quot;665f95200000000006005624\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8Opts - Optional Parameters:
  - @param "NoteId" (optional.String) -  笔记ID/Note ID
  - @param "ShareText" (optional.String) -  分享链接/Share link

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiGetNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_info_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.NoteId.IsSet() {
		localVarQueryParams.Add("note_id", parameterToString(localVarOptionals.NoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShareText.IsSet() {
		localVarQueryParams.Add("share_text", parameterToString(localVarOptionals.ShareText.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
# [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text&#x3D;\&quot;https://xhslink.com/a/EZ4M9TwMA6c3\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareText 分享链接/Share link

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get(ctx _context.Context, shareText string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_info_v3"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_text", parameterToString(shareText, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_0 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
# [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text&#x3D;\&quot;https://xhslink.com/a/EZ4M9TwMA6c3\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareText 分享链接/Share link

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_9(ctx _context.Context, shareText string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_info_v3"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_text", parameterToString(shareText, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4GetOpts Optional parameters for the method 'GetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get'
type XiaohongshuWebAPIApiGetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4GetOpts struct {
	NoteId    optional.String
	ShareText optional.String
}

/*
GetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get 获取笔记信息 V4/Get note info V4
# [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用&#x60;note_id&#x60;，如果没有则使用&#x60;share_text&#x60;，两个参数二选一，如都携带则以&#x60;note_id&#x60;为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use &#x60;note_id&#x60;, if not, use &#x60;share_text&#x60;, one of the two parameters is required, if both are carried, &#x60;note_id&#x60; shall prevail. ### Return: - Note info  # [示例/Example] note_id&#x3D;\&quot;665f95200000000006005624\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4GetOpts - Optional Parameters:
  - @param "NoteId" (optional.String) -  笔记ID/Note ID
  - @param "ShareText" (optional.String) -  分享链接/Share link

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiGetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_info_v4"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.NoteId.IsSet() {
		localVarQueryParams.Add("note_id", parameterToString(localVarOptionals.NoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShareText.IsSet() {
		localVarQueryParams.Add("share_text", parameterToString(localVarOptionals.ShareText.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10Opts Optional parameters for the method 'GetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10'
type XiaohongshuWebAPIApiGetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10Opts struct {
	NoteId    optional.String
	ShareText optional.String
}

/*
GetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_0 获取笔记信息 V4/Get note info V4
# [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用&#x60;note_id&#x60;，如果没有则使用&#x60;share_text&#x60;，两个参数二选一，如都携带则以&#x60;note_id&#x60;为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use &#x60;note_id&#x60;, if not, use &#x60;share_text&#x60;, one of the two parameters is required, if both are carried, &#x60;note_id&#x60; shall prevail. ### Return: - Note info  # [示例/Example] note_id&#x3D;\&quot;665f95200000000006005624\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10Opts - Optional Parameters:
  - @param "NoteId" (optional.String) -  笔记ID/Note ID
  - @param "ShareText" (optional.String) -  分享链接/Share link

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiGetNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_info_v4"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.NoteId.IsSet() {
		localVarQueryParams.Add("note_id", parameterToString(localVarOptionals.NoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShareText.IsSet() {
		localVarQueryParams.Add("share_text", parameterToString(localVarOptionals.ShareText.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5PostOpts Optional parameters for the method 'GetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post'
type XiaohongshuWebAPIApiGetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5PostOpts struct {
	GetNoteInfoV5Request optional.Interface
}

/*
GetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
# [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id &#x3D; \&quot;67855d09000000001703d449\&quot; xsec_token &#x3D; \&quot;ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo&#x3D;\&quot; cookie &#x3D; \&quot;Your Cookie\&quot; proxy &#x3D; \&quot;http://username:password@IP:port\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5PostOpts - Optional Parameters:
  - @param "GetNoteInfoV5Request" (optional.Interface of GetNoteInfoV5Request) -

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiGetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5PostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_info_v5"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.GetNoteInfoV5Request.IsSet() {
		localVarOptionalGetNoteInfoV5Request, localVarOptionalGetNoteInfoV5Requestok := localVarOptionals.GetNoteInfoV5Request.Value().(GetNoteInfoV5Request)
		if !localVarOptionalGetNoteInfoV5Requestok {
			return localVarReturnValue, nil, reportError("getNoteInfoV5Request should be GetNoteInfoV5Request")
		}
		localVarPostBody = &localVarOptionalGetNoteInfoV5Request
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11Opts Optional parameters for the method 'GetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11'
type XiaohongshuWebAPIApiGetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11Opts struct {
	GetNoteInfoV5Request optional.Interface
}

/*
GetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_0 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
# [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id &#x3D; \&quot;67855d09000000001703d449\&quot; xsec_token &#x3D; \&quot;ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo&#x3D;\&quot; cookie &#x3D; \&quot;Your Cookie\&quot; proxy &#x3D; \&quot;http://username:password@IP:port\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiGetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11Opts - Optional Parameters:
  - @param "GetNoteInfoV5Request" (optional.Interface of GetNoteInfoV5Request) -

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiGetNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_note_info_v5"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.GetNoteInfoV5Request.IsSet() {
		localVarOptionalGetNoteInfoV5Request, localVarOptionalGetNoteInfoV5Requestok := localVarOptionals.GetNoteInfoV5Request.Value().(GetNoteInfoV5Request)
		if !localVarOptionalGetNoteInfoV5Requestok {
			return localVarReturnValue, nil, reportError("getNoteInfoV5Request should be GetNoteInfoV5Request")
		}
		localVarPostBody = &localVarOptionalGetNoteInfoV5Request
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetUserInfoApiV1XiaohongshuWebGetUserInfoGet 获取用户信息 V1/Get user info V1
# [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId 用户ID/User ID

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetUserInfoApiV1XiaohongshuWebGetUserInfoGet(ctx _context.Context, userId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_user_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetUserInfoApiV1XiaohongshuWebGetUserInfoGet_0 获取用户信息 V1/Get user info V1
# [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId 用户ID/User ID

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetUserInfoApiV1XiaohongshuWebGetUserInfoGet_12(ctx _context.Context, userId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_user_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2GetOpts Optional parameters for the method 'GetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get'
type XiaohongshuWebAPIApiGetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2GetOpts struct {
	UserId optional.String
}

/*
GetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get 获取用户信息 V2/Get user info V2
# [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiGetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2GetOpts - Optional Parameters:
  - @param "UserId" (optional.String) -  用户ID/User ID

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiGetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_user_info_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarQueryParams.Add("user_id", parameterToString(localVarOptionals.UserId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13Opts Optional parameters for the method 'GetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13'
type XiaohongshuWebAPIApiGetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13Opts struct {
	UserId optional.String
}

/*
GetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_0 获取用户信息 V2/Get user info V2
# [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiGetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13Opts - Optional Parameters:
  - @param "UserId" (optional.String) -  用户ID/User ID

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiGetUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_user_info_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarQueryParams.Add("user_id", parameterToString(localVarOptionals.UserId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get 获取用户信息 V3/Get user info V3
# [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId 用户ID/User ID

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get(ctx _context.Context, userId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_user_info_v3"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_0 获取用户信息 V3/Get user info V3
# [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId 用户ID/User ID

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_14(ctx _context.Context, userId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_user_info_v3"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesGetOpts Optional parameters for the method 'GetUserNotesApiV1XiaohongshuWebGetUserNotesGet'
type XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesGetOpts struct {
	LastCursor optional.String
}

/*
GetUserNotesApiV1XiaohongshuWebGetUserNotesGet 获取用户的笔记 V1/Get user notes V1
# [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot; lastCursor&#x3D;None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId 用户ID/User ID
  - @param optional nil or *XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesGetOpts - Optional Parameters:
  - @param "LastCursor" (optional.String) -  上一页的游标/Last cursor

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetUserNotesApiV1XiaohongshuWebGetUserNotesGet(ctx _context.Context, userId string, localVarOptionals *XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_user_notes"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	if localVarOptionals != nil && localVarOptionals.LastCursor.IsSet() {
		localVarQueryParams.Add("lastCursor", parameterToString(localVarOptionals.LastCursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesGet_15Opts Optional parameters for the method 'GetUserNotesApiV1XiaohongshuWebGetUserNotesGet_15'
type XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesGet_15Opts struct {
	LastCursor optional.String
}

/*
GetUserNotesApiV1XiaohongshuWebGetUserNotesGet_0 获取用户的笔记 V1/Get user notes V1
# [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot; lastCursor&#x3D;None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId 用户ID/User ID
  - @param optional nil or *XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesGet_15Opts - Optional Parameters:
  - @param "LastCursor" (optional.String) -  上一页的游标/Last cursor

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetUserNotesApiV1XiaohongshuWebGetUserNotesGet_15(ctx _context.Context, userId string, localVarOptionals *XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesGet_15Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_user_notes"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	if localVarOptionals != nil && localVarOptionals.LastCursor.IsSet() {
		localVarQueryParams.Add("lastCursor", parameterToString(localVarOptionals.LastCursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesV2GetOpts Optional parameters for the method 'GetUserNotesApiV1XiaohongshuWebGetUserNotesV2Get'
type XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesV2GetOpts struct {
	LastCursor optional.String
}

/*
GetUserNotesApiV1XiaohongshuWebGetUserNotesV2Get 获取用户的笔记 V2/Get user notes V2
# [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot; lastCursor&#x3D;None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId 用户ID/User ID
  - @param optional nil or *XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesV2GetOpts - Optional Parameters:
  - @param "LastCursor" (optional.String) -  上一页的游标/Last cursor

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetUserNotesApiV1XiaohongshuWebGetUserNotesV2Get(ctx _context.Context, userId string, localVarOptionals *XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesV2GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_user_notes_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	if localVarOptionals != nil && localVarOptionals.LastCursor.IsSet() {
		localVarQueryParams.Add("lastCursor", parameterToString(localVarOptionals.LastCursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16Opts Optional parameters for the method 'GetUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16'
type XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16Opts struct {
	LastCursor optional.String
}

/*
GetUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_0 获取用户的笔记 V2/Get user notes V2
# [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot; lastCursor&#x3D;None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId 用户ID/User ID
  - @param optional nil or *XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16Opts - Optional Parameters:
  - @param "LastCursor" (optional.String) -  上一页的游标/Last cursor

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16(ctx _context.Context, userId string, localVarOptionals *XiaohongshuWebAPIApiGetUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_user_notes_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	if localVarOptionals != nil && localVarOptionals.LastCursor.IsSet() {
		localVarQueryParams.Add("lastCursor", parameterToString(localVarOptionals.LastCursor.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet 获取游客Cookie/Get visitor cookie
# [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_visitor_cookie"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
GetVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet_0 获取游客Cookie/Get visitor cookie
# [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) GetVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet_17(ctx _context.Context) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/get_visitor_cookie"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiSearchNotesApiV1XiaohongshuWebSearchNotesGetOpts Optional parameters for the method 'SearchNotesApiV1XiaohongshuWebSearchNotesGet'
type XiaohongshuWebAPIApiSearchNotesApiV1XiaohongshuWebSearchNotesGetOpts struct {
	Page     optional.Int32
	Sort     optional.String
	NoteType optional.String
}

/*
SearchNotesApiV1XiaohongshuWebSearchNotesGet 搜索笔记/Search notes
# [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword&#x3D;\&quot;美食\&quot; page&#x3D;1 sort&#x3D;\&quot;general\&quot; noteType&#x3D;\&quot;_0\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 搜索关键词/Keyword
  - @param optional nil or *XiaohongshuWebAPIApiSearchNotesApiV1XiaohongshuWebSearchNotesGetOpts - Optional Parameters:
  - @param "Page" (optional.Int32) -  页码/Page
  - @param "Sort" (optional.String) -  排序方式/Sort
  - @param "NoteType" (optional.String) -  笔记类型/Note type

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) SearchNotesApiV1XiaohongshuWebSearchNotesGet(ctx _context.Context, keyword string, localVarOptionals *XiaohongshuWebAPIApiSearchNotesApiV1XiaohongshuWebSearchNotesGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/search_notes"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NoteType.IsSet() {
		localVarQueryParams.Add("noteType", parameterToString(localVarOptionals.NoteType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiSearchNotesApiV1XiaohongshuWebSearchNotesGet_18Opts Optional parameters for the method 'SearchNotesApiV1XiaohongshuWebSearchNotesGet_18'
type XiaohongshuWebAPIApiSearchNotesApiV1XiaohongshuWebSearchNotesGet_18Opts struct {
	Page     optional.Int32
	Sort     optional.String
	NoteType optional.String
}

/*
SearchNotesApiV1XiaohongshuWebSearchNotesGet_0 搜索笔记/Search notes
# [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword&#x3D;\&quot;美食\&quot; page&#x3D;1 sort&#x3D;\&quot;general\&quot; noteType&#x3D;\&quot;_0\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 搜索关键词/Keyword
  - @param optional nil or *XiaohongshuWebAPIApiSearchNotesApiV1XiaohongshuWebSearchNotesGet_18Opts - Optional Parameters:
  - @param "Page" (optional.Int32) -  页码/Page
  - @param "Sort" (optional.String) -  排序方式/Sort
  - @param "NoteType" (optional.String) -  笔记类型/Note type

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) SearchNotesApiV1XiaohongshuWebSearchNotesGet_18(ctx _context.Context, keyword string, localVarOptionals *XiaohongshuWebAPIApiSearchNotesApiV1XiaohongshuWebSearchNotesGet_18Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/search_notes"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NoteType.IsSet() {
		localVarQueryParams.Add("noteType", parameterToString(localVarOptionals.NoteType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiSearchUsersApiV1XiaohongshuWebSearchUsersGetOpts Optional parameters for the method 'SearchUsersApiV1XiaohongshuWebSearchUsersGet'
type XiaohongshuWebAPIApiSearchUsersApiV1XiaohongshuWebSearchUsersGetOpts struct {
	Page optional.Int32
}

/*
SearchUsersApiV1XiaohongshuWebSearchUsersGet 搜索用户/Search users
# [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword&#x3D;\&quot;美食\&quot; page&#x3D;1
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 搜索关键词/Keyword
  - @param optional nil or *XiaohongshuWebAPIApiSearchUsersApiV1XiaohongshuWebSearchUsersGetOpts - Optional Parameters:
  - @param "Page" (optional.Int32) -  页码/Page

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) SearchUsersApiV1XiaohongshuWebSearchUsersGet(ctx _context.Context, keyword string, localVarOptionals *XiaohongshuWebAPIApiSearchUsersApiV1XiaohongshuWebSearchUsersGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/search_users"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiSearchUsersApiV1XiaohongshuWebSearchUsersGet_19Opts Optional parameters for the method 'SearchUsersApiV1XiaohongshuWebSearchUsersGet_19'
type XiaohongshuWebAPIApiSearchUsersApiV1XiaohongshuWebSearchUsersGet_19Opts struct {
	Page optional.Int32
}

/*
SearchUsersApiV1XiaohongshuWebSearchUsersGet_0 搜索用户/Search users
# [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword&#x3D;\&quot;美食\&quot; page&#x3D;1
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 搜索关键词/Keyword
  - @param optional nil or *XiaohongshuWebAPIApiSearchUsersApiV1XiaohongshuWebSearchUsersGet_19Opts - Optional Parameters:
  - @param "Page" (optional.Int32) -  页码/Page

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) SearchUsersApiV1XiaohongshuWebSearchUsersGet_19(ctx _context.Context, keyword string, localVarOptionals *XiaohongshuWebAPIApiSearchUsersApiV1XiaohongshuWebSearchUsersGet_19Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/search_users"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiSignApiV1XiaohongshuWebSignPostOpts Optional parameters for the method 'SignApiV1XiaohongshuWebSignPost'
type XiaohongshuWebAPIApiSignApiV1XiaohongshuWebSignPostOpts struct {
	XhsWebSignRequestModel optional.Interface
}

/*
SignApiV1XiaohongshuWebSignPost 小红书Web签名/Xiaohongshu Web sign
# [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 &#x60;X-s&#x60;, &#x60;X-t&#x60;, &#x60;X-s-common&#x60; 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: &#x60;/api/sns/web/v1/homefeed&#x60;     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate &#x60;X-s&#x60;, &#x60;X-t&#x60;, &#x60;X-s-common&#x60; and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. &#x60;/api/sns/web/v1/homefeed&#x60;     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \&quot;path\&quot;: \&quot;/api/sns/web/v1/homefeed\&quot;,     \&quot;data\&quot;: {         \&quot;cursor_score\&quot;: \&quot;\&quot;,         \&quot;num\&quot;: 35,         \&quot;refresh_type\&quot;: 1,         \&quot;note_index\&quot;: 35,         \&quot;unread_begin_note_id\&quot;: \&quot;\&quot;,         \&quot;unread_end_note_id\&quot;: \&quot;\&quot;,         \&quot;unread_note_count\&quot;: 0,         \&quot;category\&quot;: \&quot;homefeed_recommend\&quot;,         \&quot;search_key\&quot;: \&quot;\&quot;,         \&quot;need_num\&quot;: 10,         \&quot;image_formats\&quot;: [             \&quot;jpg\&quot;,             \&quot;webp\&quot;,             \&quot;avif\&quot;         ],         \&quot;need_filter_image\&quot;: False     },     \&quot;cookie\&quot;: \&quot;web_session&#x3D;030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc&#x3D;0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId&#x3D;384480ae-5196-5818-a835-42e6278de9f0;webBuild&#x3D;4.47.1;xsecappid&#x3D;xhs-pc-web;a1&#x3D;194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId&#x3D;6cf10a564b9b07d129729b65e0d1785a;sec_poison_id&#x3D;32964532-d414-4beb-914f-98811853b75f\&quot; }
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiSignApiV1XiaohongshuWebSignPostOpts - Optional Parameters:
  - @param "XhsWebSignRequestModel" (optional.Interface of XhsWebSignRequestModel) -

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) SignApiV1XiaohongshuWebSignPost(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiSignApiV1XiaohongshuWebSignPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/sign"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.XhsWebSignRequestModel.IsSet() {
		localVarOptionalXhsWebSignRequestModel, localVarOptionalXhsWebSignRequestModelok := localVarOptionals.XhsWebSignRequestModel.Value().(XhsWebSignRequestModel)
		if !localVarOptionalXhsWebSignRequestModelok {
			return localVarReturnValue, nil, reportError("xhsWebSignRequestModel should be XhsWebSignRequestModel")
		}
		localVarPostBody = &localVarOptionalXhsWebSignRequestModel
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// XiaohongshuWebAPIApiSignApiV1XiaohongshuWebSignPost_20Opts Optional parameters for the method 'SignApiV1XiaohongshuWebSignPost_20'
type XiaohongshuWebAPIApiSignApiV1XiaohongshuWebSignPost_20Opts struct {
	XhsWebSignRequestModel optional.Interface
}

/*
SignApiV1XiaohongshuWebSignPost_0 小红书Web签名/Xiaohongshu Web sign
# [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 &#x60;X-s&#x60;, &#x60;X-t&#x60;, &#x60;X-s-common&#x60; 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: &#x60;/api/sns/web/v1/homefeed&#x60;     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate &#x60;X-s&#x60;, &#x60;X-t&#x60;, &#x60;X-s-common&#x60; and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. &#x60;/api/sns/web/v1/homefeed&#x60;     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \&quot;path\&quot;: \&quot;/api/sns/web/v1/homefeed\&quot;,     \&quot;data\&quot;: {         \&quot;cursor_score\&quot;: \&quot;\&quot;,         \&quot;num\&quot;: 35,         \&quot;refresh_type\&quot;: 1,         \&quot;note_index\&quot;: 35,         \&quot;unread_begin_note_id\&quot;: \&quot;\&quot;,         \&quot;unread_end_note_id\&quot;: \&quot;\&quot;,         \&quot;unread_note_count\&quot;: 0,         \&quot;category\&quot;: \&quot;homefeed_recommend\&quot;,         \&quot;search_key\&quot;: \&quot;\&quot;,         \&quot;need_num\&quot;: 10,         \&quot;image_formats\&quot;: [             \&quot;jpg\&quot;,             \&quot;webp\&quot;,             \&quot;avif\&quot;         ],         \&quot;need_filter_image\&quot;: False     },     \&quot;cookie\&quot;: \&quot;web_session&#x3D;030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc&#x3D;0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId&#x3D;384480ae-5196-5818-a835-42e6278de9f0;webBuild&#x3D;4.47.1;xsecappid&#x3D;xhs-pc-web;a1&#x3D;194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId&#x3D;6cf10a564b9b07d129729b65e0d1785a;sec_poison_id&#x3D;32964532-d414-4beb-914f-98811853b75f\&quot; }
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *XiaohongshuWebAPIApiSignApiV1XiaohongshuWebSignPost_20Opts - Optional Parameters:
  - @param "XhsWebSignRequestModel" (optional.Interface of XhsWebSignRequestModel) -

@return ResponseModel
*/
func (a *XiaohongshuWebAPIApiService) SignApiV1XiaohongshuWebSignPost_20(ctx _context.Context, localVarOptionals *XiaohongshuWebAPIApiSignApiV1XiaohongshuWebSignPost_20Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/xiaohongshu/web/sign"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.XhsWebSignRequestModel.IsSet() {
		localVarOptionalXhsWebSignRequestModel, localVarOptionalXhsWebSignRequestModelok := localVarOptionals.XhsWebSignRequestModel.Value().(XhsWebSignRequestModel)
		if !localVarOptionalXhsWebSignRequestModelok {
			return localVarReturnValue, nil, reportError("xhsWebSignRequestModel should be XhsWebSignRequestModel")
		}
		localVarPostBody = &localVarOptionalXhsWebSignRequestModel
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
