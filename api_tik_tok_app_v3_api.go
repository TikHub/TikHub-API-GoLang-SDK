/*
 * TikHub Private API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tikhub

import (
	_context "context"
	"github.com/antihax/optional"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// TikTokAppV3APIApiService TikTokAppV3APIApi service
type TikTokAppV3APIApiService service

/*
AddVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
# [中文] ### 用途: - 根据视频ID来增加作品的播放数 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - invite_code: 邀请码，此接口需要邀请码才能使用。 ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - invite_code: Invite code, this interface requires an invite code to use. ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type &#x3D; 0 item_id &#x3D; \&quot;7419966340443819295\&quot; cookie &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeType 作品类型/Video type
  - @param itemId 作品id/Video id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) AddVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet(ctx _context.Context, awemeType int32, itemId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/add_video_play_count"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_type", parameterToString(awemeType, ""))
	localVarQueryParams.Add("item_id", parameterToString(itemId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
AddVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet_0 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
# [中文] ### 用途: - 根据视频ID来增加作品的播放数 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - invite_code: 邀请码，此接口需要邀请码才能使用。 ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - invite_code: Invite code, this interface requires an invite code to use. ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type &#x3D; 0 item_id &#x3D; \&quot;7419966340443819295\&quot; cookie &#x3D; None
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeType 作品类型/Video type
  - @param itemId 作品id/Video id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) AddVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet_1(ctx _context.Context, awemeType int32, itemId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/add_video_play_count"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_type", parameterToString(awemeType, ""))
	localVarQueryParams.Add("item_id", parameterToString(itemId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
CheckLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet 检测直播间是否在线/Check if live room is online
# [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从&#x60;/api/v1/tiktok/web/get_live_room_id&#x60;接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the &#x60;/api/v1/tiktok/web/get_live_room_id&#x60; interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间id/Live room id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) CheckLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet(ctx _context.Context, roomId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/check_live_room_online"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
CheckLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_0 检测直播间是否在线/Check if live room is online
# [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从&#x60;/api/v1/tiktok/web/get_live_room_id&#x60;接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the &#x60;/api/v1/tiktok/web/get_live_room_id&#x60; interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间id/Live room id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) CheckLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_2(ctx _context.Context, roomId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/check_live_room_online"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiEncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPostOpts Optional parameters for the method 'EncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost'
type TikTokAppV3APIApiEncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPostOpts struct {
	TikTokAppLoginEncryptDecryptRequest optional.Interface
}

/*
EncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost 加密或解密 TikTok APP 登录请求体/Encrypt or Decrypt TikTok APP login request body
# [中文] ### 用途: - 加密/解密 TikTok APP 登录请求体，用于登录接口的请求体加密和解密。 ### 参数: - username: 用户名，可以是密文或明文。 - password: 密码，可以是密文或明文。 - mode: 模式     - &#x60;encrypt&#x60;: 加密     - &#x60;decrypt&#x60;: 解密 ### 返回: - 加密/解密后的请求体  # [English] ### Purpose: - Encrypt/decrypt the TikTok APP login request body, used for encrypting and decrypting the request body of the login interface. ### Parameters: - username: Username, can be ciphertext or plaintext. - password: Password, can be ciphertext or plaintext. - mode: Mode     - &#x60;encrypt&#x60;: Encrypt     - &#x60;decrypt&#x60;: Decrypt ### Return: - Encrypted/decrypted request body  # [示例/Example] &#x60;&#x60;&#x60;json {     \&quot;username\&quot;: \&quot;example_username\&quot;,     \&quot;password\&quot;: \&quot;example_password\&quot;,     \&quot;mode\&quot;: \&quot;encrypt\&quot; } &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiEncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPostOpts - Optional Parameters:
  - @param "TikTokAppLoginEncryptDecryptRequest" (optional.Interface of TikTokAppLoginEncryptDecryptRequest) -

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) EncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiEncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/encrypt_decrypt_login_request"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.TikTokAppLoginEncryptDecryptRequest.IsSet() {
		localVarOptionalTikTokAppLoginEncryptDecryptRequest, localVarOptionalTikTokAppLoginEncryptDecryptRequestok := localVarOptionals.TikTokAppLoginEncryptDecryptRequest.Value().(TikTokAppLoginEncryptDecryptRequest)
		if !localVarOptionalTikTokAppLoginEncryptDecryptRequestok {
			return localVarReturnValue, nil, reportError("tikTokAppLoginEncryptDecryptRequest should be TikTokAppLoginEncryptDecryptRequest")
		}
		localVarPostBody = &localVarOptionalTikTokAppLoginEncryptDecryptRequest
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiEncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3Opts Optional parameters for the method 'EncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3'
type TikTokAppV3APIApiEncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3Opts struct {
	TikTokAppLoginEncryptDecryptRequest optional.Interface
}

/*
EncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_0 加密或解密 TikTok APP 登录请求体/Encrypt or Decrypt TikTok APP login request body
# [中文] ### 用途: - 加密/解密 TikTok APP 登录请求体，用于登录接口的请求体加密和解密。 ### 参数: - username: 用户名，可以是密文或明文。 - password: 密码，可以是密文或明文。 - mode: 模式     - &#x60;encrypt&#x60;: 加密     - &#x60;decrypt&#x60;: 解密 ### 返回: - 加密/解密后的请求体  # [English] ### Purpose: - Encrypt/decrypt the TikTok APP login request body, used for encrypting and decrypting the request body of the login interface. ### Parameters: - username: Username, can be ciphertext or plaintext. - password: Password, can be ciphertext or plaintext. - mode: Mode     - &#x60;encrypt&#x60;: Encrypt     - &#x60;decrypt&#x60;: Decrypt ### Return: - Encrypted/decrypted request body  # [示例/Example] &#x60;&#x60;&#x60;json {     \&quot;username\&quot;: \&quot;example_username\&quot;,     \&quot;password\&quot;: \&quot;example_password\&quot;,     \&quot;mode\&quot;: \&quot;encrypt\&quot; } &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiEncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3Opts - Optional Parameters:
  - @param "TikTokAppLoginEncryptDecryptRequest" (optional.Interface of TikTokAppLoginEncryptDecryptRequest) -

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) EncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiEncryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/encrypt_decrypt_login_request"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.TikTokAppLoginEncryptDecryptRequest.IsSet() {
		localVarOptionalTikTokAppLoginEncryptDecryptRequest, localVarOptionalTikTokAppLoginEncryptDecryptRequestok := localVarOptionals.TikTokAppLoginEncryptDecryptRequest.Value().(TikTokAppLoginEncryptDecryptRequest)
		if !localVarOptionalTikTokAppLoginEncryptDecryptRequestok {
			return localVarReturnValue, nil, reportError("tikTokAppLoginEncryptDecryptRequest should be TikTokAppLoginEncryptDecryptRequest")
		}
		localVarPostBody = &localVarOptionalTikTokAppLoginEncryptDecryptRequest
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePostOpts Optional parameters for the method 'FetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost'
type TikTokAppV3APIApiFetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePostOpts struct {
	TikTokAppV3ContentTranslate optional.Interface
}

/*
FetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost 获取内容翻译数据/Get content translation data
# [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang &#x3D; \&quot;zh-Hans\&quot; src_content &#x3D; \&quot;Hello, welcome to TikHub!\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiFetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePostOpts - Optional Parameters:
  - @param "TikTokAppV3ContentTranslate" (optional.Interface of TikTokAppV3ContentTranslate) -

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiFetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_content_translate"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.TikTokAppV3ContentTranslate.IsSet() {
		localVarOptionalTikTokAppV3ContentTranslate, localVarOptionalTikTokAppV3ContentTranslateok := localVarOptionals.TikTokAppV3ContentTranslate.Value().(TikTokAppV3ContentTranslate)
		if !localVarOptionalTikTokAppV3ContentTranslateok {
			return localVarReturnValue, nil, reportError("tikTokAppV3ContentTranslate should be TikTokAppV3ContentTranslate")
		}
		localVarPostBody = &localVarOptionalTikTokAppV3ContentTranslate
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4Opts Optional parameters for the method 'FetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4'
type TikTokAppV3APIApiFetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4Opts struct {
	TikTokAppV3ContentTranslate optional.Interface
}

/*
FetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_0 获取内容翻译数据/Get content translation data
# [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang &#x3D; \&quot;zh-Hans\&quot; src_content &#x3D; \&quot;Hello, welcome to TikHub!\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiFetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4Opts - Optional Parameters:
  - @param "TikTokAppV3ContentTranslate" (optional.Interface of TikTokAppV3ContentTranslate) -

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiFetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_content_translate"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.TikTokAppV3ContentTranslate.IsSet() {
		localVarOptionalTikTokAppV3ContentTranslate, localVarOptionalTikTokAppV3ContentTranslateok := localVarOptionals.TikTokAppV3ContentTranslate.Value().(TikTokAppV3ContentTranslate)
		if !localVarOptionalTikTokAppV3ContentTranslateok {
			return localVarReturnValue, nil, reportError("tikTokAppV3ContentTranslate should be TikTokAppV3ContentTranslate")
		}
		localVarPostBody = &localVarOptionalTikTokAppV3ContentTranslate
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet 获取创作者信息/Get creator information
# [中文] ### 用途: - 获取创作者信息，包括创作者的基本信息、粉丝数、橱窗商品数量等信息。 ### 参数: - creator_uid: 创作者uid ### 返回: - 创作者信息  # [English] ### Purpose: - Get creator information, including the creator&#39;s basic information, number of fans, number of storefront products, etc. ### Parameters: - creator_uid: Creator uid ### Return: - Creator information  # [示例/Example] creator_uid &#x3D; \&quot;6555451606845243393\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param creatorUid 创作者uid/Creator uid

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet(ctx _context.Context, creatorUid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_creator_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("creator_uid", parameterToString(creatorUid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet_0 获取创作者信息/Get creator information
# [中文] ### 用途: - 获取创作者信息，包括创作者的基本信息、粉丝数、橱窗商品数量等信息。 ### 参数: - creator_uid: 创作者uid ### 返回: - 创作者信息  # [English] ### Purpose: - Get creator information, including the creator&#39;s basic information, number of fans, number of storefront products, etc. ### Parameters: - creator_uid: Creator uid ### Return: - Creator information  # [示例/Example] creator_uid &#x3D; \&quot;6555451606845243393\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param creatorUid 创作者uid/Creator uid

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet_5(ctx _context.Context, creatorUid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_creator_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("creator_uid", parameterToString(creatorUid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGetOpts Optional parameters for the method 'FetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet'
type TikTokAppV3APIApiFetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGetOpts struct {
	Count           optional.Int32
	NextScrollParam optional.String
}

/*
FetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet 获取创作者橱窗商品列表/Get creator showcase product list
# [中文] ### 用途: - 获取创作者橱窗商品列表 ### 参数: - kol_id: 创作者的sec_user_id - count: 数量 - next_scroll_param: 翻页参数，第一页为空字符串，后续请求使用上一次请求返回的next_scroll_param值。 ### 返回: - 创作者橱窗商品列表  # [English] ### Purpose: - Get creator showcase product list ### Parameters: - kol_id: Creator&#39;s sec_user_id - count: Number - next_scroll_param: Page parameter, empty string for the first page, use the next_scroll_param value returned by the last request for subsequent requests. ### Return: - Creator showcase product list  # [示例/Example] kol_id &#x3D; \&quot;MS4wLjABAAAARujvKaVWqgbVCwuxQghA99TUa5I-4g6jVzMXZd9FJIXSdJwJM47vm4-2T1K3gsux\&quot; count &#x3D; 20 next_scroll_param &#x3D; \&quot;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 创作者的sec_user_id/Creator's sec_user_id
  - @param optional nil or *TikTokAppV3APIApiFetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGetOpts - Optional Parameters:
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "NextScrollParam" (optional.String) -  翻页参数/Page parameter

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet(ctx _context.Context, kolId string, localVarOptionals *TikTokAppV3APIApiFetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_creator_showcase_product_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kol_id", parameterToString(kolId, ""))
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NextScrollParam.IsSet() {
		localVarQueryParams.Add("next_scroll_param", parameterToString(localVarOptionals.NextScrollParam.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6Opts Optional parameters for the method 'FetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6'
type TikTokAppV3APIApiFetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6Opts struct {
	Count           optional.Int32
	NextScrollParam optional.String
}

/*
FetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_0 获取创作者橱窗商品列表/Get creator showcase product list
# [中文] ### 用途: - 获取创作者橱窗商品列表 ### 参数: - kol_id: 创作者的sec_user_id - count: 数量 - next_scroll_param: 翻页参数，第一页为空字符串，后续请求使用上一次请求返回的next_scroll_param值。 ### 返回: - 创作者橱窗商品列表  # [English] ### Purpose: - Get creator showcase product list ### Parameters: - kol_id: Creator&#39;s sec_user_id - count: Number - next_scroll_param: Page parameter, empty string for the first page, use the next_scroll_param value returned by the last request for subsequent requests. ### Return: - Creator showcase product list  # [示例/Example] kol_id &#x3D; \&quot;MS4wLjABAAAARujvKaVWqgbVCwuxQghA99TUa5I-4g6jVzMXZd9FJIXSdJwJM47vm4-2T1K3gsux\&quot; count &#x3D; 20 next_scroll_param &#x3D; \&quot;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param kolId 创作者的sec_user_id/Creator's sec_user_id
  - @param optional nil or *TikTokAppV3APIApiFetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6Opts - Optional Parameters:
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "NextScrollParam" (optional.String) -  翻页参数/Page parameter

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6(ctx _context.Context, kolId string, localVarOptionals *TikTokAppV3APIApiFetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_creator_showcase_product_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("kol_id", parameterToString(kolId, ""))
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NextScrollParam.IsSet() {
		localVarQueryParams.Add("next_scroll_param", parameterToString(localVarOptionals.NextScrollParam.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGetOpts Optional parameters for the method 'FetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet'
type TikTokAppV3APIApiFetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGetOpts struct {
	Offset      optional.Int32
	Count       optional.Int32
	SortType    optional.Int32
	PublishTime optional.Int32
}

/*
FetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGetOpts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SortType" (optional.Int32) -  排序类型/Sort type
  - @param "PublishTime" (optional.Int32) -  发布时间/Publish time

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_general_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishTime.IsSet() {
		localVarQueryParams.Add("publish_time", parameterToString(localVarOptionals.PublishTime.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7Opts Optional parameters for the method 'FetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7'
type TikTokAppV3APIApiFetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7Opts struct {
	Offset      optional.Int32
	Count       optional.Int32
	SortType    optional.Int32
	PublishTime optional.Int32
}

/*
FetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_0 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7Opts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SortType" (optional.Int32) -  排序类型/Sort type
  - @param "PublishTime" (optional.Int32) -  发布时间/Publish time

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_general_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishTime.IsSet() {
		localVarQueryParams.Add("publish_time", parameterToString(localVarOptionals.PublishTime.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet 获取指定话题的详情数据/Get details of specified hashtag
# [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param chId 话题id/Hashtag id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet(ctx _context.Context, chId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_hashtag_detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("ch_id", parameterToString(chId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_0 获取指定话题的详情数据/Get details of specified hashtag
# [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param chId 话题id/Hashtag id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_8(ctx _context.Context, chId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_hashtag_detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("ch_id", parameterToString(chId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGetOpts Optional parameters for the method 'FetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet'
type TikTokAppV3APIApiFetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGetOpts struct {
	Offset optional.Int32
	Count  optional.Int32
}

/*
FetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGetOpts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_hashtag_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9Opts Optional parameters for the method 'FetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9'
type TikTokAppV3APIApiFetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9Opts struct {
	Offset optional.Int32
	Count  optional.Int32
}

/*
FetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_0 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9Opts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_hashtag_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGetOpts Optional parameters for the method 'FetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet'
type TikTokAppV3APIApiFetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGetOpts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet 获取指定话题的作品数据/Get video list of specified hashtag
# [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot; cursor &#x3D; 0 sort_type &#x3D; 0 count &#x3D; 10
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param chId 话题id/Hashtag id
  - @param optional nil or *TikTokAppV3APIApiFetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGetOpts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet(ctx _context.Context, chId string, localVarOptionals *TikTokAppV3APIApiFetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_hashtag_video_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("ch_id", parameterToString(chId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10Opts Optional parameters for the method 'FetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10'
type TikTokAppV3APIApiFetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10Opts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_0 获取指定话题的作品数据/Get video list of specified hashtag
# [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot; cursor &#x3D; 0 sort_type &#x3D; 0 count &#x3D; 10
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param chId 话题id/Hashtag id
  - @param optional nil or *TikTokAppV3APIApiFetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10Opts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10(ctx _context.Context, chId string, localVarOptionals *TikTokAppV3APIApiFetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_hashtag_video_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("ch_id", parameterToString(chId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPostOpts Optional parameters for the method 'FetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost'
type TikTokAppV3APIApiFetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPostOpts struct {
	TikTokAppV3HomeFeed optional.Interface
}

/*
FetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost 获取主页视频推荐数据/Get home feed(recommend) video data
# [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - cookie: User&#39;s own cookie, optional parameter, used for personalized recommendation of interface returned data. ### Return: - Video recommend data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiFetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPostOpts - Optional Parameters:
  - @param "TikTokAppV3HomeFeed" (optional.Interface of TikTokAppV3HomeFeed) -

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiFetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_home_feed"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.TikTokAppV3HomeFeed.IsSet() {
		localVarOptionalTikTokAppV3HomeFeed, localVarOptionalTikTokAppV3HomeFeedok := localVarOptionals.TikTokAppV3HomeFeed.Value().(TikTokAppV3HomeFeed)
		if !localVarOptionalTikTokAppV3HomeFeedok {
			return localVarReturnValue, nil, reportError("tikTokAppV3HomeFeed should be TikTokAppV3HomeFeed")
		}
		localVarPostBody = &localVarOptionalTikTokAppV3HomeFeed
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11Opts Optional parameters for the method 'FetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11'
type TikTokAppV3APIApiFetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11Opts struct {
	TikTokAppV3HomeFeed optional.Interface
}

/*
FetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_0 获取主页视频推荐数据/Get home feed(recommend) video data
# [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - cookie: User&#39;s own cookie, optional parameter, used for personalized recommendation of interface returned data. ### Return: - Video recommend data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiFetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11Opts - Optional Parameters:
  - @param "TikTokAppV3HomeFeed" (optional.Interface of TikTokAppV3HomeFeed) -

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiFetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_home_feed"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.TikTokAppV3HomeFeed.IsSet() {
		localVarOptionalTikTokAppV3HomeFeed, localVarOptionalTikTokAppV3HomeFeedok := localVarOptionals.TikTokAppV3HomeFeed.Value().(TikTokAppV3HomeFeed)
		if !localVarOptionalTikTokAppV3HomeFeedok {
			return localVarReturnValue, nil, reportError("tikTokAppV3HomeFeed should be TikTokAppV3HomeFeed")
		}
		localVarPostBody = &localVarOptionalTikTokAppV3HomeFeed
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGetOpts Optional parameters for the method 'FetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet'
type TikTokAppV3APIApiFetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGetOpts struct {
	AnchorId    optional.String
	RoomId      optional.String
	RankType    optional.Int32
	RegionType  optional.Int32
	GapInterval optional.Int32
	Cookie      optional.String
}

/*
FetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet 获取直播每日榜单数据/Get live daily rank data
# [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - &#x60;0&#x60;: 每小时排行榜     - &#x60;1&#x60;: 每周排行榜     - &#x60;5&#x60;: 新星排行榜     - &#x60;6&#x60;: 销售排行榜     - &#x60;8&#x60;: 每日排行榜     - &#x60;10&#x60;: 游戏排行榜     - &#x60;11&#x60;: 每日游戏排行榜     - &#x60;12&#x60;: 名人堂排行榜     - &#x60;13&#x60;: 冠军赛排行榜     - &#x60;14&#x60;: 每日新秀排行榜     - &#x60;15&#x60;: 人气直播榜     - &#x60;16&#x60;: D5段位榜     - &#x60;20&#x60;: 绝地求生排行榜     - &#x60;21&#x60;: 王者荣耀排行榜     - &#x60;22&#x60;: Free Fire 排行榜     - &#x60;1001&#x60;: 联盟竞赛排行榜     - &#x60;-1&#x60;: 未知排行榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 - cookie: 用户自己的cookie，可选参数，用于接口不可用时使用。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - &#x60;0&#x60;: Hourly Rank     - &#x60;1&#x60;: Weekly Rank     - &#x60;5&#x60;: Rookie Star Rank     - &#x60;6&#x60;: Sale Rank     - &#x60;8&#x60;: Daily Rank     - &#x60;10&#x60;: Game Rank     - &#x60;11&#x60;: Daily Game Rank     - &#x60;12&#x60;: Hall of Fame Rank     - &#x60;13&#x60;: Champion Tournament Rank     - &#x60;14&#x60;: Daily Rookie Star Rank     - &#x60;15&#x60;: Popular Live Stream Rank     - &#x60;16&#x60;: D5 Level Rank     - &#x60;20&#x60;: PUBG Rank     - &#x60;21&#x60;: MLBB Rank     - &#x60;22&#x60;: Free Fire Rank     - &#x60;1001&#x60;: League Campaign Rank     - &#x60;-1&#x60;: Unknown Rank  - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. - cookie: User&#39;s own cookie, optional parameter, used when the interface is not available. ### Return: - Live daily rank data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiFetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGetOpts - Optional Parameters:
  - @param "AnchorId" (optional.String) -  主播id/Anchor id
  - @param "RoomId" (optional.String) -  直播间id/Live room id
  - @param "RankType" (optional.Int32) -  榜单类型/Rank type
  - @param "RegionType" (optional.Int32) -  地区类型/Region type
  - @param "GapInterval" (optional.Int32) -  时间间隔/Time interval
  - @param "Cookie" (optional.String) -  用户自己的cookie/User's own cookie

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiFetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_live_daily_rank"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.AnchorId.IsSet() {
		localVarQueryParams.Add("anchor_id", parameterToString(localVarOptionals.AnchorId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RoomId.IsSet() {
		localVarQueryParams.Add("room_id", parameterToString(localVarOptionals.RoomId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RankType.IsSet() {
		localVarQueryParams.Add("rank_type", parameterToString(localVarOptionals.RankType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RegionType.IsSet() {
		localVarQueryParams.Add("region_type", parameterToString(localVarOptionals.RegionType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GapInterval.IsSet() {
		localVarQueryParams.Add("gap_interval", parameterToString(localVarOptionals.GapInterval.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12Opts Optional parameters for the method 'FetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12'
type TikTokAppV3APIApiFetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12Opts struct {
	AnchorId    optional.String
	RoomId      optional.String
	RankType    optional.Int32
	RegionType  optional.Int32
	GapInterval optional.Int32
	Cookie      optional.String
}

/*
FetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_0 获取直播每日榜单数据/Get live daily rank data
# [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - &#x60;0&#x60;: 每小时排行榜     - &#x60;1&#x60;: 每周排行榜     - &#x60;5&#x60;: 新星排行榜     - &#x60;6&#x60;: 销售排行榜     - &#x60;8&#x60;: 每日排行榜     - &#x60;10&#x60;: 游戏排行榜     - &#x60;11&#x60;: 每日游戏排行榜     - &#x60;12&#x60;: 名人堂排行榜     - &#x60;13&#x60;: 冠军赛排行榜     - &#x60;14&#x60;: 每日新秀排行榜     - &#x60;15&#x60;: 人气直播榜     - &#x60;16&#x60;: D5段位榜     - &#x60;20&#x60;: 绝地求生排行榜     - &#x60;21&#x60;: 王者荣耀排行榜     - &#x60;22&#x60;: Free Fire 排行榜     - &#x60;1001&#x60;: 联盟竞赛排行榜     - &#x60;-1&#x60;: 未知排行榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 - cookie: 用户自己的cookie，可选参数，用于接口不可用时使用。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - &#x60;0&#x60;: Hourly Rank     - &#x60;1&#x60;: Weekly Rank     - &#x60;5&#x60;: Rookie Star Rank     - &#x60;6&#x60;: Sale Rank     - &#x60;8&#x60;: Daily Rank     - &#x60;10&#x60;: Game Rank     - &#x60;11&#x60;: Daily Game Rank     - &#x60;12&#x60;: Hall of Fame Rank     - &#x60;13&#x60;: Champion Tournament Rank     - &#x60;14&#x60;: Daily Rookie Star Rank     - &#x60;15&#x60;: Popular Live Stream Rank     - &#x60;16&#x60;: D5 Level Rank     - &#x60;20&#x60;: PUBG Rank     - &#x60;21&#x60;: MLBB Rank     - &#x60;22&#x60;: Free Fire Rank     - &#x60;1001&#x60;: League Campaign Rank     - &#x60;-1&#x60;: Unknown Rank  - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. - cookie: User&#39;s own cookie, optional parameter, used when the interface is not available. ### Return: - Live daily rank data
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiFetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12Opts - Optional Parameters:
  - @param "AnchorId" (optional.String) -  主播id/Anchor id
  - @param "RoomId" (optional.String) -  直播间id/Live room id
  - @param "RankType" (optional.Int32) -  榜单类型/Rank type
  - @param "RegionType" (optional.Int32) -  地区类型/Region type
  - @param "GapInterval" (optional.Int32) -  时间间隔/Time interval
  - @param "Cookie" (optional.String) -  用户自己的cookie/User's own cookie

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiFetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_live_daily_rank"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.AnchorId.IsSet() {
		localVarQueryParams.Add("anchor_id", parameterToString(localVarOptionals.AnchorId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RoomId.IsSet() {
		localVarQueryParams.Add("room_id", parameterToString(localVarOptionals.RoomId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RankType.IsSet() {
		localVarQueryParams.Add("rank_type", parameterToString(localVarOptionals.RankType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RegionType.IsSet() {
		localVarQueryParams.Add("region_type", parameterToString(localVarOptionals.RegionType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GapInterval.IsSet() {
		localVarQueryParams.Add("gap_interval", parameterToString(localVarOptionals.GapInterval.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet 获取直播间排行榜数据/Get live room ranking list
# [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot; anchor_id &#x3D; \&quot;7222941468722758702\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间id/Live room id
  - @param anchorId 主播id/Anchor id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet(ctx _context.Context, roomId string, anchorId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_live_ranking_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	localVarQueryParams.Add("anchor_id", parameterToString(anchorId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_0 获取直播间排行榜数据/Get live room ranking list
# [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot; anchor_id &#x3D; \&quot;7222941468722758702\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间id/Live room id
  - @param anchorId 主播id/Anchor id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_13(ctx _context.Context, roomId string, anchorId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_live_ranking_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	localVarQueryParams.Add("anchor_id", parameterToString(anchorId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet 获取指定直播间的数据/Get data of specified live room
# [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id &#x3D; \&quot;7385461256746060575\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间id/Live room id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet(ctx _context.Context, roomId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_live_room_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_0 获取指定直播间的数据/Get data of specified live room
# [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id &#x3D; \&quot;7385461256746060575\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间id/Live room id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_14(ctx _context.Context, roomId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_live_room_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGetOpts Optional parameters for the method 'FetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet'
type TikTokAppV3APIApiFetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGetOpts struct {
	PageSize optional.Int32
	Offset   optional.Int32
	Region   optional.String
	Cookie   optional.String
}

/*
FetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet 获取直播间商品列表数据/Get live room product list data
# [中文] ### 用途: - 获取直播间商品列表数据 ### 参数: - room_id: 直播间id，必填参数。 - author_id: 主播id，必填参数。 - page_size: 每页数量，可选参数，默认为15。 - offset: 翻页游标，可选参数，默认为0，每次翻页增加15。 - region: 地区，可选参数，默认为&#x60;US&#x60;，如果使用其他地区，如：&#x60;VN&#x60;，请自行携带Cookie，否则无法获取数据。 - cookie: 用户自己的cookie，可选参数，用于爬取除&#x60;US&#x60;以外的地区数据。 ### 参数获取: - 第一步：使用接口&#x60;f\&quot;{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\&quot;&#x60;接口获取直播间id（room_id）。 - 第二步：使用接口&#x60;f\&quot;{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\&quot;&#x60;接口获取直播间信息。 - 第三步：使用第二步返回的JSON数据中使用JSONPATH获取&#x60;$.data.data.owner.id_str&#x60;字段的值作为主播id（author_id）。 ### 返回: - 直播间商品列表数据  # [English] ### Purpose: - Get live room product list data ### Parameters: - room_id: Live room id, required parameter. - author_id: Anchor id, required parameter. - page_size: Number per page, optional parameter, default is 15. - offset: Page turning cursor, optional parameter, default is 0, increasing by 15 each time. - region: Region, optional parameter, default is &#x60;US&#x60;, if you use other regions, such as: &#x60;VN&#x60;, please bring your own Cookie, otherwise you will not be able to get data. - cookie: User&#39;s own cookie, optional parameter, used to crawl data from regions other than &#x60;US&#x60;. ### Get Parameters: - Step 1: Use the interface &#x60;f\&quot;{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\&quot;&#x60; to get the live room id (room_id). - Step 2: Use the interface &#x60;f\&quot;{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\&quot;&#x60; to get the live room information. - Step 3: Use the JSONPATH in the JSON data returned in the second step to get the value of the field &#x60;$.data.data.owner.id_str&#x60; as the anchor id (author_id). ### Return: - Live room product list data  # [示例/Example] room_id &#x3D; \&quot;7420741353250507562\&quot; author_id &#x3D; \&quot;7408859677050274859\&quot; page_size &#x3D; 15 offset &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间id/Live room id
  - @param authorId 主播id/Anchor id
  - @param optional nil or *TikTokAppV3APIApiFetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGetOpts - Optional Parameters:
  - @param "PageSize" (optional.Int32) -  数量/Number
  - @param "Offset" (optional.Int32) -  数量/Number
  - @param "Region" (optional.String) -  地区/Region
  - @param "Cookie" (optional.String) -  用户自己的cookie/User's own cookie

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet(ctx _context.Context, roomId string, authorId string, localVarOptionals *TikTokAppV3APIApiFetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_live_room_product_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	localVarQueryParams.Add("author_id", parameterToString(authorId, ""))
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page_size", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Region.IsSet() {
		localVarQueryParams.Add("region", parameterToString(localVarOptionals.Region.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15Opts Optional parameters for the method 'FetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15'
type TikTokAppV3APIApiFetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15Opts struct {
	PageSize optional.Int32
	Offset   optional.Int32
	Region   optional.String
	Cookie   optional.String
}

/*
FetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_0 获取直播间商品列表数据/Get live room product list data
# [中文] ### 用途: - 获取直播间商品列表数据 ### 参数: - room_id: 直播间id，必填参数。 - author_id: 主播id，必填参数。 - page_size: 每页数量，可选参数，默认为15。 - offset: 翻页游标，可选参数，默认为0，每次翻页增加15。 - region: 地区，可选参数，默认为&#x60;US&#x60;，如果使用其他地区，如：&#x60;VN&#x60;，请自行携带Cookie，否则无法获取数据。 - cookie: 用户自己的cookie，可选参数，用于爬取除&#x60;US&#x60;以外的地区数据。 ### 参数获取: - 第一步：使用接口&#x60;f\&quot;{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\&quot;&#x60;接口获取直播间id（room_id）。 - 第二步：使用接口&#x60;f\&quot;{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\&quot;&#x60;接口获取直播间信息。 - 第三步：使用第二步返回的JSON数据中使用JSONPATH获取&#x60;$.data.data.owner.id_str&#x60;字段的值作为主播id（author_id）。 ### 返回: - 直播间商品列表数据  # [English] ### Purpose: - Get live room product list data ### Parameters: - room_id: Live room id, required parameter. - author_id: Anchor id, required parameter. - page_size: Number per page, optional parameter, default is 15. - offset: Page turning cursor, optional parameter, default is 0, increasing by 15 each time. - region: Region, optional parameter, default is &#x60;US&#x60;, if you use other regions, such as: &#x60;VN&#x60;, please bring your own Cookie, otherwise you will not be able to get data. - cookie: User&#39;s own cookie, optional parameter, used to crawl data from regions other than &#x60;US&#x60;. ### Get Parameters: - Step 1: Use the interface &#x60;f\&quot;{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\&quot;&#x60; to get the live room id (room_id). - Step 2: Use the interface &#x60;f\&quot;{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\&quot;&#x60; to get the live room information. - Step 3: Use the JSONPATH in the JSON data returned in the second step to get the value of the field &#x60;$.data.data.owner.id_str&#x60; as the anchor id (author_id). ### Return: - Live room product list data  # [示例/Example] room_id &#x3D; \&quot;7420741353250507562\&quot; author_id &#x3D; \&quot;7408859677050274859\&quot; page_size &#x3D; 15 offset &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param roomId 直播间id/Live room id
  - @param authorId 主播id/Anchor id
  - @param optional nil or *TikTokAppV3APIApiFetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15Opts - Optional Parameters:
  - @param "PageSize" (optional.Int32) -  数量/Number
  - @param "Offset" (optional.Int32) -  数量/Number
  - @param "Region" (optional.String) -  地区/Region
  - @param "Cookie" (optional.String) -  用户自己的cookie/User's own cookie

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15(ctx _context.Context, roomId string, authorId string, localVarOptionals *TikTokAppV3APIApiFetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_live_room_product_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("room_id", parameterToString(roomId, ""))
	localVarQueryParams.Add("author_id", parameterToString(authorId, ""))
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page_size", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Region.IsSet() {
		localVarQueryParams.Add("region", parameterToString(localVarOptionals.Region.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cookie.IsSet() {
		localVarQueryParams.Add("cookie", parameterToString(localVarOptionals.Cookie.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGetOpts Optional parameters for the method 'FetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet'
type TikTokAppV3APIApiFetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGetOpts struct {
	Offset optional.Int32
	Count  optional.Int32
}

/*
FetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet 获取指定关键词的直播搜索结果/Get live search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGetOpts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_live_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16Opts Optional parameters for the method 'FetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16'
type TikTokAppV3APIApiFetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16Opts struct {
	Offset optional.Int32
	Count  optional.Int32
}

/*
FetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_0 获取指定关键词的直播搜索结果/Get live search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16Opts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_live_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGetOpts Optional parameters for the method 'FetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet'
type TikTokAppV3APIApiFetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGetOpts struct {
	Offset optional.Int32
	Count  optional.Int32
}

/*
FetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet 获取地点搜索结果/Get location search results
# [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword &#x3D; \&quot;Shanghai\&quot; offset &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGetOpts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_location_search"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17Opts Optional parameters for the method 'FetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17'
type TikTokAppV3APIApiFetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17Opts struct {
	Offset optional.Int32
	Count  optional.Int32
}

/*
FetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_0 获取地点搜索结果/Get location search results
# [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword &#x3D; \&quot;Shanghai\&quot; offset &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17Opts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_location_search"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPostOpts Optional parameters for the method 'FetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost'
type TikTokAppV3APIApiFetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPostOpts struct {
	RequestBody optional.Interface
}

/*
FetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost 批量获取视频信息/Batch Get Video Information
# [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 &#x3D; 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 &#x3D; 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,     ]
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiFetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPostOpts - Optional Parameters:
  - @param "RequestBody" (optional.Interface of []string) -

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiFetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_multi_video"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.RequestBody.IsSet() {
		localVarOptionalRequestBody, localVarOptionalRequestBodyok := localVarOptionals.RequestBody.Value().([]string)
		if !localVarOptionalRequestBodyok {
			return localVarReturnValue, nil, reportError("requestBody should be []string")
		}
		localVarPostBody = &localVarOptionalRequestBody
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18Opts Optional parameters for the method 'FetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18'
type TikTokAppV3APIApiFetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18Opts struct {
	RequestBody optional.Interface
}

/*
FetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_0 批量获取视频信息/Batch Get Video Information
# [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 &#x3D; 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 &#x3D; 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,     ]
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiFetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18Opts - Optional Parameters:
  - @param "RequestBody" (optional.Interface of []string) -

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiFetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_multi_video"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.RequestBody.IsSet() {
		localVarOptionalRequestBody, localVarOptionalRequestBodyok := localVarOptionals.RequestBody.Value().([]string)
		if !localVarOptionalRequestBodyok {
			return localVarReturnValue, nil, reportError("requestBody should be []string")
		}
		localVarPostBody = &localVarOptionalRequestBody
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2PostOpts Optional parameters for the method 'FetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post'
type TikTokAppV3APIApiFetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2PostOpts struct {
	RequestBody optional.Interface
}

/*
FetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post 批量获取视频信息 V2/Batch Get Video Information V2
# [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 &#x3D; 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 &#x3D; 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,     ]
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiFetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2PostOpts - Optional Parameters:
  - @param "RequestBody" (optional.Interface of []string) -

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiFetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2PostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_multi_video_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.RequestBody.IsSet() {
		localVarOptionalRequestBody, localVarOptionalRequestBodyok := localVarOptionals.RequestBody.Value().([]string)
		if !localVarOptionalRequestBodyok {
			return localVarReturnValue, nil, reportError("requestBody should be []string")
		}
		localVarPostBody = &localVarOptionalRequestBody
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19Opts Optional parameters for the method 'FetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19'
type TikTokAppV3APIApiFetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19Opts struct {
	RequestBody optional.Interface
}

/*
FetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_0 批量获取视频信息 V2/Batch Get Video Information V2
# [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 &#x3D; 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 &#x3D; 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,     ]
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiFetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19Opts - Optional Parameters:
  - @param "RequestBody" (optional.Interface of []string) -

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiFetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_multi_video_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.RequestBody.IsSet() {
		localVarOptionalRequestBody, localVarOptionalRequestBodyok := localVarOptionals.RequestBody.Value().([]string)
		if !localVarOptionalRequestBodyok {
			return localVarReturnValue, nil, reportError("requestBody should be []string")
		}
		localVarPostBody = &localVarOptionalRequestBody
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet 获取指定音乐的详情数据/Get details of specified music
# [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param musicId 音乐id/Music id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet(ctx _context.Context, musicId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_music_detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_0 获取指定音乐的详情数据/Get details of specified music
# [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param musicId 音乐id/Music id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_20(ctx _context.Context, musicId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_music_detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGetOpts Optional parameters for the method 'FetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet'
type TikTokAppV3APIApiFetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGetOpts struct {
	Offset optional.Int32
	Count  optional.Int32
}

/*
FetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGetOpts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_music_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21Opts Optional parameters for the method 'FetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21'
type TikTokAppV3APIApiFetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21Opts struct {
	Offset optional.Int32
	Count  optional.Int32
}

/*
FetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_0 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21Opts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_music_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGetOpts Optional parameters for the method 'FetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet'
type TikTokAppV3APIApiFetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGetOpts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet 获取指定音乐的视频列表数据/Get video list of specified music
# [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot; cursor &#x3D; 0 count &#x3D; 10
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param musicId 音乐id/Music id
  - @param optional nil or *TikTokAppV3APIApiFetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGetOpts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet(ctx _context.Context, musicId string, localVarOptionals *TikTokAppV3APIApiFetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_music_video_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22Opts Optional parameters for the method 'FetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22'
type TikTokAppV3APIApiFetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22Opts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_0 获取指定音乐的视频列表数据/Get video list of specified music
# [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot; cursor &#x3D; 0 count &#x3D; 10
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param musicId 音乐id/Music id
  - @param optional nil or *TikTokAppV3APIApiFetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22Opts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22(ctx _context.Context, musicId string, localVarOptionals *TikTokAppV3APIApiFetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_music_video_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("music_id", parameterToString(musicId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoApiV1TiktokAppV3FetchOneVideoGet 获取单个作品数据/Get single video data
# [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7350810998023949599\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchOneVideoApiV1TiktokAppV3FetchOneVideoGet(ctx _context.Context, awemeId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_one_video"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_0 获取单个作品数据/Get single video data
# [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7350810998023949599\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_23(ctx _context.Context, awemeId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_one_video"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet 根据分享链接获取单个作品数据/Get single video data by sharing link
# [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://www.tiktok.com/t/ZTFNEj8Hk/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareUrl 分享链接/Share link

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet(ctx _context.Context, shareUrl string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_one_video_by_share_url"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_url", parameterToString(shareUrl, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_0 根据分享链接获取单个作品数据/Get single video data by sharing link
# [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://www.tiktok.com/t/ZTFNEj8Hk/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareUrl 分享链接/Share link

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_24(ctx _context.Context, shareUrl string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_one_video_by_share_url"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_url", parameterToString(shareUrl, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get 获取单个作品数据 V2/Get single video data V2
# [中文] ### 用途: - 获取单个作品数据 V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7463308759842966791\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get(ctx _context.Context, awemeId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_one_video_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get_0 获取单个作品数据 V2/Get single video data V2
# [中文] ### 用途: - 获取单个作品数据 V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7463308759842966791\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get_25(ctx _context.Context, awemeId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_one_video_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchProductDetailApiV1TiktokAppV3FetchProductDetailGet 获取商品详情数据（即将弃用，使用 fetch_product_detail_v2 代替）/Get product detail data (will be deprecated, use fetch_product_detail_v2 instead)
# [中文] ### 用途: - 获取商品详情数据 - 即将弃用，使用 fetch_product_detail_v2 代替 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data - Will be deprecated, use fetch_product_detail_v2 instead ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id &#x3D; \&quot;1729385239712731370\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param productId 商品id/Product id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchProductDetailApiV1TiktokAppV3FetchProductDetailGet(ctx _context.Context, productId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_product_detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("product_id", parameterToString(productId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_0 获取商品详情数据（即将弃用，使用 fetch_product_detail_v2 代替）/Get product detail data (will be deprecated, use fetch_product_detail_v2 instead)
# [中文] ### 用途: - 获取商品详情数据 - 即将弃用，使用 fetch_product_detail_v2 代替 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data - Will be deprecated, use fetch_product_detail_v2 instead ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id &#x3D; \&quot;1729385239712731370\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param productId 商品id/Product id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_26(ctx _context.Context, productId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_product_detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("product_id", parameterToString(productId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get 获取商品详情数据V2/Get product detail data V2
# [中文] ### 用途: - 获取商品详情数据V2 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V2  # [English] ### Purpose: - Get product detail data V2 ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V2  # [示例/Example] product_id &#x3D; \&quot;1729385239712731370\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param productId 商品id/Product id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get(ctx _context.Context, productId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_product_detail_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("product_id", parameterToString(productId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get_0 获取商品详情数据V2/Get product detail data V2
# [中文] ### 用途: - 获取商品详情数据V2 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V2  # [English] ### Purpose: - Get product detail data V2 ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V2  # [示例/Example] product_id &#x3D; \&quot;1729385239712731370\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param productId 商品id/Product id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get_27(ctx _context.Context, productId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_product_detail_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("product_id", parameterToString(productId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get 获取商品详情数据V3/Get product detail data V3
# [中文] ### 用途: - 获取商品详情数据V3，如果商品详情数据V2无法获取，可以尝试使用此接口。 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V3  # [English] ### Purpose: - Get product detail data V3, if the product detail data V2 cannot be obtained, you can try using this interface. ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V3  # [示例/Example] product_id &#x3D; \&quot;1729385239712731370\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param productId 商品id/Product id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get(ctx _context.Context, productId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_product_detail_v3"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("product_id", parameterToString(productId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get_0 获取商品详情数据V3/Get product detail data V3
# [中文] ### 用途: - 获取商品详情数据V3，如果商品详情数据V2无法获取，可以尝试使用此接口。 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V3  # [English] ### Purpose: - Get product detail data V3, if the product detail data V2 cannot be obtained, you can try using this interface. ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V3  # [示例/Example] product_id &#x3D; \&quot;1729385239712731370\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param productId 商品id/Product id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get_28(ctx _context.Context, productId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_product_detail_v3"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("product_id", parameterToString(productId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet 通过分享链接获取商品ID/Get Product ID by Share Link
# [中文] ### 用途: - 通过分享链接获取商品ID ### 参数: - share_link: 分享链接 ### 返回: - 商品ID  # [English] ### Purpose: - Get Product ID by Share Link ### Parameters: - share_link: Share link ### Return: - Product ID  # [示例/Example] share_link &#x3D; \&quot;https://www.tiktok.com/t/ZT2A9N1kw/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareLink 分享链接/Share link

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet(ctx _context.Context, shareLink string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_product_id_by_share_link"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_link", parameterToString(shareLink, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet_0 通过分享链接获取商品ID/Get Product ID by Share Link
# [中文] ### 用途: - 通过分享链接获取商品ID ### 参数: - share_link: 分享链接 ### 返回: - 商品ID  # [English] ### Purpose: - Get Product ID by Share Link ### Parameters: - share_link: Share link ### Return: - Product ID  # [示例/Example] share_link &#x3D; \&quot;https://www.tiktok.com/t/ZT2A9N1kw/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareLink 分享链接/Share link

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet_29(ctx _context.Context, shareLink string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_product_id_by_share_link"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_link", parameterToString(shareLink, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchProductReviewApiV1TiktokAppV3FetchProductReviewGetOpts Optional parameters for the method 'FetchProductReviewApiV1TiktokAppV3FetchProductReviewGet'
type TikTokAppV3APIApiFetchProductReviewApiV1TiktokAppV3FetchProductReviewGetOpts struct {
	Cursor   optional.Int32
	Size     optional.Int32
	FilterId optional.Int32
	SortType optional.Int32
}

/*
FetchProductReviewApiV1TiktokAppV3FetchProductReviewGet 获取商品评价数据/Get product review data
# [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id &#x3D; \&quot;1729448812983194615\&quot; cursor &#x3D; 0 size &#x3D; 10 filter_id &#x3D; 0 sort_type &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param productId 商品id/Product id
  - @param optional nil or *TikTokAppV3APIApiFetchProductReviewApiV1TiktokAppV3FetchProductReviewGetOpts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Size" (optional.Int32) -  数量/Number
  - @param "FilterId" (optional.Int32) -  筛选条件/Filter condition
  - @param "SortType" (optional.Int32) -  排序条件/Sorting conditions

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchProductReviewApiV1TiktokAppV3FetchProductReviewGet(ctx _context.Context, productId string, localVarOptionals *TikTokAppV3APIApiFetchProductReviewApiV1TiktokAppV3FetchProductReviewGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_product_review"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("product_id", parameterToString(productId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterId.IsSet() {
		localVarQueryParams.Add("filter_id", parameterToString(localVarOptionals.FilterId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30Opts Optional parameters for the method 'FetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30'
type TikTokAppV3APIApiFetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30Opts struct {
	Cursor   optional.Int32
	Size     optional.Int32
	FilterId optional.Int32
	SortType optional.Int32
}

/*
FetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_0 获取商品评价数据/Get product review data
# [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id &#x3D; \&quot;1729448812983194615\&quot; cursor &#x3D; 0 size &#x3D; 10 filter_id &#x3D; 0 sort_type &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param productId 商品id/Product id
  - @param optional nil or *TikTokAppV3APIApiFetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30Opts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Size" (optional.Int32) -  数量/Number
  - @param "FilterId" (optional.Int32) -  筛选条件/Filter condition
  - @param "SortType" (optional.Int32) -  排序条件/Sorting conditions

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30(ctx _context.Context, productId string, localVarOptionals *TikTokAppV3APIApiFetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_product_review"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("product_id", parameterToString(productId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilterId.IsSet() {
		localVarQueryParams.Add("filter_id", parameterToString(localVarOptionals.FilterId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchProductSearchApiV1TiktokAppV3FetchProductSearchGetOpts Optional parameters for the method 'FetchProductSearchApiV1TiktokAppV3FetchProductSearchGet'
type TikTokAppV3APIApiFetchProductSearchApiV1TiktokAppV3FetchProductSearchGetOpts struct {
	Cursor                 optional.Int32
	Count                  optional.Int32
	SortType               optional.Int32
	CustomerReviewFourStar optional.Bool
	HaveDiscount           optional.Bool
	MinPrice               optional.String
	MaxPrice               optional.String
}

/*
FetchProductSearchApiV1TiktokAppV3FetchProductSearchGet 获取商品搜索结果/Get product search results
# [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword &#x3D; \&quot;Cat Toy\&quot; cursor &#x3D; 0 count &#x3D; 12 sort_type &#x3D; 1 customer_review_four_star &#x3D; False have_discount &#x3D; False min_price &#x3D; \&quot;10\&quot; max_price &#x3D; \&quot;25\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchProductSearchApiV1TiktokAppV3FetchProductSearchGetOpts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SortType" (optional.Int32) -  商品排序条件/Product sorting conditions
  - @param "CustomerReviewFourStar" (optional.Bool) -  四星以上评价/Four-star or more reviews
  - @param "HaveDiscount" (optional.Bool) -  有优惠/Having discount
  - @param "MinPrice" (optional.String) -  最低价格/Minimum price
  - @param "MaxPrice" (optional.String) -  最高价格/Maximum price

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchProductSearchApiV1TiktokAppV3FetchProductSearchGet(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchProductSearchApiV1TiktokAppV3FetchProductSearchGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_product_search"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CustomerReviewFourStar.IsSet() {
		localVarQueryParams.Add("customer_review_four_star", parameterToString(localVarOptionals.CustomerReviewFourStar.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HaveDiscount.IsSet() {
		localVarQueryParams.Add("have_discount", parameterToString(localVarOptionals.HaveDiscount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinPrice.IsSet() {
		localVarQueryParams.Add("min_price", parameterToString(localVarOptionals.MinPrice.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxPrice.IsSet() {
		localVarQueryParams.Add("max_price", parameterToString(localVarOptionals.MaxPrice.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31Opts Optional parameters for the method 'FetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31'
type TikTokAppV3APIApiFetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31Opts struct {
	Cursor                 optional.Int32
	Count                  optional.Int32
	SortType               optional.Int32
	CustomerReviewFourStar optional.Bool
	HaveDiscount           optional.Bool
	MinPrice               optional.String
	MaxPrice               optional.String
}

/*
FetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_0 获取商品搜索结果/Get product search results
# [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword &#x3D; \&quot;Cat Toy\&quot; cursor &#x3D; 0 count &#x3D; 12 sort_type &#x3D; 1 customer_review_four_star &#x3D; False have_discount &#x3D; False min_price &#x3D; \&quot;10\&quot; max_price &#x3D; \&quot;25\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31Opts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SortType" (optional.Int32) -  商品排序条件/Product sorting conditions
  - @param "CustomerReviewFourStar" (optional.Bool) -  四星以上评价/Four-star or more reviews
  - @param "HaveDiscount" (optional.Bool) -  有优惠/Having discount
  - @param "MinPrice" (optional.String) -  最低价格/Minimum price
  - @param "MaxPrice" (optional.String) -  最高价格/Maximum price

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_product_search"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CustomerReviewFourStar.IsSet() {
		localVarQueryParams.Add("customer_review_four_star", parameterToString(localVarOptionals.CustomerReviewFourStar.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.HaveDiscount.IsSet() {
		localVarQueryParams.Add("have_discount", parameterToString(localVarOptionals.HaveDiscount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinPrice.IsSet() {
		localVarQueryParams.Add("min_price", parameterToString(localVarOptionals.MinPrice.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxPrice.IsSet() {
		localVarQueryParams.Add("max_price", parameterToString(localVarOptionals.MaxPrice.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGetOpts Optional parameters for the method 'FetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet'
type TikTokAppV3APIApiFetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGetOpts struct {
	SchemaType optional.Int32
}

/*
FetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet 获取分享二维码/Get share QR code
# [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url &#x3D; \&quot;6762244951259661318\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param objectId 对象id/Object id
  - @param optional nil or *TikTokAppV3APIApiFetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGetOpts - Optional Parameters:
  - @param "SchemaType" (optional.Int32) -  模式类型/Schema type

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet(ctx _context.Context, objectId string, localVarOptionals *TikTokAppV3APIApiFetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_share_qr_code"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("object_id", parameterToString(objectId, ""))
	if localVarOptionals != nil && localVarOptionals.SchemaType.IsSet() {
		localVarQueryParams.Add("schema_type", parameterToString(localVarOptionals.SchemaType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32Opts Optional parameters for the method 'FetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32'
type TikTokAppV3APIApiFetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32Opts struct {
	SchemaType optional.Int32
}

/*
FetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_0 获取分享二维码/Get share QR code
# [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url &#x3D; \&quot;6762244951259661318\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param objectId 对象id/Object id
  - @param optional nil or *TikTokAppV3APIApiFetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32Opts - Optional Parameters:
  - @param "SchemaType" (optional.Int32) -  模式类型/Schema type

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32(ctx _context.Context, objectId string, localVarOptionals *TikTokAppV3APIApiFetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_share_qr_code"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("object_id", parameterToString(objectId, ""))
	if localVarOptionals != nil && localVarOptionals.SchemaType.IsSet() {
		localVarQueryParams.Add("schema_type", parameterToString(localVarOptionals.SchemaType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet 获取分享短链接/Get share short link
# [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/passport/web/logout/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param url 分享链接/Share link

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet(ctx _context.Context, url string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_share_short_link"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_0 获取分享短链接/Get share short link
# [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/passport/web/logout/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param url 分享链接/Share link

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_33(ctx _context.Context, url string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_share_short_link"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("url", parameterToString(url, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchShopHomeApiV1TiktokAppV3FetchShopHomeGet 获取商家主页数据/Get shop home page data
# [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从&#x60;fetch_shop_home_page_list&#x60;这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface &#x60;fetch_shop_home_page_list&#x60; - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id &#x3D; \&quot;7314705727611930410\&quot; seller_id &#x3D; \&quot;8646929864612614278\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param pageId 爬取的商家主页Page id/Page id of the crawled shop home page
  - @param sellerId 商家id,店铺id/Seller id, shop id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopHomeApiV1TiktokAppV3FetchShopHomeGet(ctx _context.Context, pageId string, sellerId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_home"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("page_id", parameterToString(pageId, ""))
	localVarQueryParams.Add("seller_id", parameterToString(sellerId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0 获取商家主页数据/Get shop home page data
# [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从&#x60;fetch_shop_home_page_list&#x60;这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface &#x60;fetch_shop_home_page_list&#x60; - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id &#x3D; \&quot;7314705727611930410\&quot; seller_id &#x3D; \&quot;8646929864612614278\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param pageId 爬取的商家主页Page id/Page id of the crawled shop home page
  - @param sellerId 商家id,店铺id/Seller id, shop id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_34(ctx _context.Context, pageId string, sellerId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_home"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("page_id", parameterToString(pageId, ""))
	localVarQueryParams.Add("seller_id", parameterToString(sellerId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet 获取商家主页Page列表数据/Get shop home page list data
# [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param sellerId 商家id,店铺id/Seller id, shop id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet(ctx _context.Context, sellerId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_home_page_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("seller_id", parameterToString(sellerId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_0 获取商家主页Page列表数据/Get shop home page list data
# [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param sellerId 商家id,店铺id/Seller id, shop id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_35(ctx _context.Context, sellerId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_home_page_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("seller_id", parameterToString(sellerId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet 通过分享链接获取店铺ID/Get Shop ID by Share Link
# [中文] ### 用途: - 通过分享链接获取店铺ID ### 参数: - share_link: 分享链接 ### 返回: - 店铺ID  # [English] ### Purpose: - Get Shop ID by Share Link ### Parameters: - share_link: Share link ### Return: - Shop ID  # [示例/Example] share_link &#x3D; \&quot;https://vt.tiktok.com/ZT2AHoGsE/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareLink 分享链接/Share link

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet(ctx _context.Context, shareLink string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_id_by_share_link"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_link", parameterToString(shareLink, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet_0 通过分享链接获取店铺ID/Get Shop ID by Share Link
# [中文] ### 用途: - 通过分享链接获取店铺ID ### 参数: - share_link: 分享链接 ### 返回: - 店铺ID  # [English] ### Purpose: - Get Shop ID by Share Link ### Parameters: - share_link: Share link ### Return: - Shop ID  # [示例/Example] share_link &#x3D; \&quot;https://vt.tiktok.com/ZT2AHoGsE/\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shareLink 分享链接/Share link

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet_36(ctx _context.Context, shareLink string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_id_by_share_link"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("share_link", parameterToString(shareLink, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchShopInfoApiV1TiktokAppV3FetchShopInfoGet 获取商家信息数据/Get shop information data
# [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id &#x3D; \&quot;8646942781241463007\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shopId 商家id,店铺id/Seller id, shop id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopInfoApiV1TiktokAppV3FetchShopInfoGet(ctx _context.Context, shopId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("shop_id", parameterToString(shopId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_0 获取商家信息数据/Get shop information data
# [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id &#x3D; \&quot;8646942781241463007\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param shopId 商家id,店铺id/Seller id, shop id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_37(ctx _context.Context, shopId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_info"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("shop_id", parameterToString(shopId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet 获取商家产品分类数据/Get shop product category data
# [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id &#x3D; \&quot;7495294980909468039\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param sellerId 商家id,店铺id/Seller id, shop id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet(ctx _context.Context, sellerId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_product_category"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("seller_id", parameterToString(sellerId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
FetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_0 获取商家产品分类数据/Get shop product category data
# [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id &#x3D; \&quot;7495294980909468039\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param sellerId 商家id,店铺id/Seller id, shop id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_38(ctx _context.Context, sellerId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_product_category"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("seller_id", parameterToString(sellerId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchShopProductListApiV1TiktokAppV3FetchShopProductListGetOpts Optional parameters for the method 'FetchShopProductListApiV1TiktokAppV3FetchShopProductListGet'
type TikTokAppV3APIApiFetchShopProductListApiV1TiktokAppV3FetchShopProductListGetOpts struct {
	ScrollParams optional.String
	PageSize     optional.Int32
	SortField    optional.Int32
	SortOrder    optional.Int32
}

/*
FetchShopProductListApiV1TiktokAppV3FetchShopProductListGet 获取商家商品列表数据/Get shop product list data
# [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_params &#x3D; \&quot;\&quot; page_size &#x3D; 10 sort_field &#x3D; 1 sort_order &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param sellerId 商家id,店铺id/Seller id, shop id
  - @param optional nil or *TikTokAppV3APIApiFetchShopProductListApiV1TiktokAppV3FetchShopProductListGetOpts - Optional Parameters:
  - @param "ScrollParams" (optional.String) -  滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
  - @param "PageSize" (optional.Int32) -  每页数量/Number per page
  - @param "SortField" (optional.Int32) -  排序字段/Sorting field
  - @param "SortOrder" (optional.Int32) -  排序方式/Sorting method

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopProductListApiV1TiktokAppV3FetchShopProductListGet(ctx _context.Context, sellerId string, localVarOptionals *TikTokAppV3APIApiFetchShopProductListApiV1TiktokAppV3FetchShopProductListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_product_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("seller_id", parameterToString(sellerId, ""))
	if localVarOptionals != nil && localVarOptionals.ScrollParams.IsSet() {
		localVarQueryParams.Add("scroll_params", parameterToString(localVarOptionals.ScrollParams.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page_size", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortField.IsSet() {
		localVarQueryParams.Add("sort_field", parameterToString(localVarOptionals.SortField.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortOrder.IsSet() {
		localVarQueryParams.Add("sort_order", parameterToString(localVarOptionals.SortOrder.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39Opts Optional parameters for the method 'FetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39'
type TikTokAppV3APIApiFetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39Opts struct {
	ScrollParams optional.String
	PageSize     optional.Int32
	SortField    optional.Int32
	SortOrder    optional.Int32
}

/*
FetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_0 获取商家商品列表数据/Get shop product list data
# [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_params &#x3D; \&quot;\&quot; page_size &#x3D; 10 sort_field &#x3D; 1 sort_order &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param sellerId 商家id,店铺id/Seller id, shop id
  - @param optional nil or *TikTokAppV3APIApiFetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39Opts - Optional Parameters:
  - @param "ScrollParams" (optional.String) -  滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
  - @param "PageSize" (optional.Int32) -  每页数量/Number per page
  - @param "SortField" (optional.Int32) -  排序字段/Sorting field
  - @param "SortOrder" (optional.Int32) -  排序方式/Sorting method

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39(ctx _context.Context, sellerId string, localVarOptionals *TikTokAppV3APIApiFetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_product_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("seller_id", parameterToString(sellerId, ""))
	if localVarOptionals != nil && localVarOptionals.ScrollParams.IsSet() {
		localVarQueryParams.Add("scroll_params", parameterToString(localVarOptionals.ScrollParams.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page_size", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortField.IsSet() {
		localVarQueryParams.Add("sort_field", parameterToString(localVarOptionals.SortField.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortOrder.IsSet() {
		localVarQueryParams.Add("sort_order", parameterToString(localVarOptionals.SortOrder.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2GetOpts Optional parameters for the method 'FetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get'
type TikTokAppV3APIApiFetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2GetOpts struct {
	ScrollParams optional.String
	PageSize     optional.Int32
	SortField    optional.Int32
	SortOrder    optional.Int32
}

/*
FetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get 获取商家商品列表数据 V2/Get shop product list data V2
# [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_params &#x3D; \&quot;\&quot; page_size &#x3D; 10 sort_field &#x3D; 1 sort_order &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param sellerId 商家id,店铺id/Seller id, shop id
  - @param optional nil or *TikTokAppV3APIApiFetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2GetOpts - Optional Parameters:
  - @param "ScrollParams" (optional.String) -  滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
  - @param "PageSize" (optional.Int32) -  每页数量/Number per page
  - @param "SortField" (optional.Int32) -  排序字段/Sorting field
  - @param "SortOrder" (optional.Int32) -  排序方式/Sorting method

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get(ctx _context.Context, sellerId string, localVarOptionals *TikTokAppV3APIApiFetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2GetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_product_list_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("seller_id", parameterToString(sellerId, ""))
	if localVarOptionals != nil && localVarOptionals.ScrollParams.IsSet() {
		localVarQueryParams.Add("scroll_params", parameterToString(localVarOptionals.ScrollParams.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page_size", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortField.IsSet() {
		localVarQueryParams.Add("sort_field", parameterToString(localVarOptionals.SortField.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortOrder.IsSet() {
		localVarQueryParams.Add("sort_order", parameterToString(localVarOptionals.SortOrder.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40Opts Optional parameters for the method 'FetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40'
type TikTokAppV3APIApiFetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40Opts struct {
	ScrollParams optional.String
	PageSize     optional.Int32
	SortField    optional.Int32
	SortOrder    optional.Int32
}

/*
FetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_0 获取商家商品列表数据 V2/Get shop product list data V2
# [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_params &#x3D; \&quot;\&quot; page_size &#x3D; 10 sort_field &#x3D; 1 sort_order &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param sellerId 商家id,店铺id/Seller id, shop id
  - @param optional nil or *TikTokAppV3APIApiFetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40Opts - Optional Parameters:
  - @param "ScrollParams" (optional.String) -  滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
  - @param "PageSize" (optional.Int32) -  每页数量/Number per page
  - @param "SortField" (optional.Int32) -  排序字段/Sorting field
  - @param "SortOrder" (optional.Int32) -  排序方式/Sorting method

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40(ctx _context.Context, sellerId string, localVarOptionals *TikTokAppV3APIApiFetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_product_list_v2"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("seller_id", parameterToString(sellerId, ""))
	if localVarOptionals != nil && localVarOptionals.ScrollParams.IsSet() {
		localVarQueryParams.Add("scroll_params", parameterToString(localVarOptionals.ScrollParams.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page_size", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortField.IsSet() {
		localVarQueryParams.Add("sort_field", parameterToString(localVarOptionals.SortField.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortOrder.IsSet() {
		localVarQueryParams.Add("sort_order", parameterToString(localVarOptionals.SortOrder.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGetOpts Optional parameters for the method 'FetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet'
type TikTokAppV3APIApiFetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGetOpts struct {
	ScrollParam optional.String
	PageSize    optional.Int32
}

/*
FetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet 获取商家商品推荐数据/Get shop product recommend data
# [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_param &#x3D; \&quot;\&quot; page_size &#x3D; 10
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param sellerId 商家id,店铺id/Seller id, shop id
  - @param optional nil or *TikTokAppV3APIApiFetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGetOpts - Optional Parameters:
  - @param "ScrollParam" (optional.String) -  滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
  - @param "PageSize" (optional.Int32) -  每页数量/Number per page

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet(ctx _context.Context, sellerId string, localVarOptionals *TikTokAppV3APIApiFetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_product_recommend"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("seller_id", parameterToString(sellerId, ""))
	if localVarOptionals != nil && localVarOptionals.ScrollParam.IsSet() {
		localVarQueryParams.Add("scroll_param", parameterToString(localVarOptionals.ScrollParam.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page_size", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41Opts Optional parameters for the method 'FetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41'
type TikTokAppV3APIApiFetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41Opts struct {
	ScrollParam optional.String
	PageSize    optional.Int32
}

/*
FetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_0 获取商家商品推荐数据/Get shop product recommend data
# [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_param &#x3D; \&quot;\&quot; page_size &#x3D; 10
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param sellerId 商家id,店铺id/Seller id, shop id
  - @param optional nil or *TikTokAppV3APIApiFetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41Opts - Optional Parameters:
  - @param "ScrollParam" (optional.String) -  滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
  - @param "PageSize" (optional.Int32) -  每页数量/Number per page

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41(ctx _context.Context, sellerId string, localVarOptionals *TikTokAppV3APIApiFetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_shop_product_recommend"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("seller_id", parameterToString(sellerId, ""))
	if localVarOptionals != nil && localVarOptionals.ScrollParam.IsSet() {
		localVarQueryParams.Add("scroll_param", parameterToString(localVarOptionals.ScrollParam.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageSize.IsSet() {
		localVarQueryParams.Add("page_size", parameterToString(localVarOptionals.PageSize.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGetOpts Optional parameters for the method 'FetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet'
type TikTokAppV3APIApiFetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGetOpts struct {
	Count     optional.Int32
	MinTime   optional.Int32
	PageToken optional.String
}

/*
FetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet 获取指定用户的粉丝列表数据/Get follower list of specified user
# [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 40 min_time &#x3D; 1719570100 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id
  - @param optional nil or *TikTokAppV3APIApiFetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGetOpts - Optional Parameters:
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "MinTime" (optional.Int32) -  最小时间，用于翻页/Minimum time for paging
  - @param "PageToken" (optional.String) -  翻页token/Page token

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet(ctx _context.Context, secUserId string, localVarOptionals *TikTokAppV3APIApiFetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_follower_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinTime.IsSet() {
		localVarQueryParams.Add("min_time", parameterToString(localVarOptionals.MinTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageToken.IsSet() {
		localVarQueryParams.Add("page_token", parameterToString(localVarOptionals.PageToken.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42Opts Optional parameters for the method 'FetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42'
type TikTokAppV3APIApiFetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42Opts struct {
	Count     optional.Int32
	MinTime   optional.Int32
	PageToken optional.String
}

/*
FetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_0 获取指定用户的粉丝列表数据/Get follower list of specified user
# [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 40 min_time &#x3D; 1719570100 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id
  - @param optional nil or *TikTokAppV3APIApiFetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42Opts - Optional Parameters:
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "MinTime" (optional.Int32) -  最小时间，用于翻页/Minimum time for paging
  - @param "PageToken" (optional.String) -  翻页token/Page token

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42(ctx _context.Context, secUserId string, localVarOptionals *TikTokAppV3APIApiFetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_follower_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinTime.IsSet() {
		localVarQueryParams.Add("min_time", parameterToString(localVarOptionals.MinTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageToken.IsSet() {
		localVarQueryParams.Add("page_token", parameterToString(localVarOptionals.PageToken.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGetOpts Optional parameters for the method 'FetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet'
type TikTokAppV3APIApiFetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGetOpts struct {
	Count     optional.Int32
	MinTime   optional.Int32
	PageToken optional.String
}

/*
FetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet 获取指定用户的关注列表数据/Get following list of specified user
# [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 20 min_time &#x3D; 1639642146 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id
  - @param optional nil or *TikTokAppV3APIApiFetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGetOpts - Optional Parameters:
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "MinTime" (optional.Int32) -  最小时间，用于翻页/Minimum time for paging
  - @param "PageToken" (optional.String) -  翻页token/Page token

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet(ctx _context.Context, secUserId string, localVarOptionals *TikTokAppV3APIApiFetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_following_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinTime.IsSet() {
		localVarQueryParams.Add("min_time", parameterToString(localVarOptionals.MinTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageToken.IsSet() {
		localVarQueryParams.Add("page_token", parameterToString(localVarOptionals.PageToken.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43Opts Optional parameters for the method 'FetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43'
type TikTokAppV3APIApiFetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43Opts struct {
	Count     optional.Int32
	MinTime   optional.Int32
	PageToken optional.String
}

/*
FetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_0 获取指定用户的关注列表数据/Get following list of specified user
# [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 20 min_time &#x3D; 1639642146 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id
  - @param optional nil or *TikTokAppV3APIApiFetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43Opts - Optional Parameters:
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "MinTime" (optional.Int32) -  最小时间，用于翻页/Minimum time for paging
  - @param "PageToken" (optional.String) -  翻页token/Page token

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43(ctx _context.Context, secUserId string, localVarOptionals *TikTokAppV3APIApiFetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_following_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MinTime.IsSet() {
		localVarQueryParams.Add("min_time", parameterToString(localVarOptionals.MinTime.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PageToken.IsSet() {
		localVarQueryParams.Add("page_token", parameterToString(localVarOptionals.PageToken.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGetOpts Optional parameters for the method 'FetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet'
type TikTokAppV3APIApiFetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGetOpts struct {
	MaxCursor optional.Int32
	Counts    optional.Int32
}

/*
FetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet 获取用户喜欢作品数据/Get user like video data
# [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA-RkTGCGXLuLKRM5Xcuuwm7Mclg51I2ECO1RqOA7mJHuXFz99nztdi077Z2XmYHZV\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id
  - @param optional nil or *TikTokAppV3APIApiFetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGetOpts - Optional Parameters:
  - @param "MaxCursor" (optional.Int32) -  最大游标/Maximum cursor
  - @param "Counts" (optional.Int32) -  每页数量/Number per page

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet(ctx _context.Context, secUserId string, localVarOptionals *TikTokAppV3APIApiFetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_like_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Counts.IsSet() {
		localVarQueryParams.Add("counts", parameterToString(localVarOptionals.Counts.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44Opts Optional parameters for the method 'FetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44'
type TikTokAppV3APIApiFetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44Opts struct {
	MaxCursor optional.Int32
	Counts    optional.Int32
}

/*
FetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_0 获取用户喜欢作品数据/Get user like video data
# [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA-RkTGCGXLuLKRM5Xcuuwm7Mclg51I2ECO1RqOA7mJHuXFz99nztdi077Z2XmYHZV\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUserId 用户sec_user_id/User sec_user_id
  - @param optional nil or *TikTokAppV3APIApiFetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44Opts - Optional Parameters:
  - @param "MaxCursor" (optional.Int32) -  最大游标/Maximum cursor
  - @param "Counts" (optional.Int32) -  每页数量/Number per page

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44(ctx _context.Context, secUserId string, localVarOptionals *TikTokAppV3APIApiFetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_like_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_user_id", parameterToString(secUserId, ""))
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Counts.IsSet() {
		localVarQueryParams.Add("counts", parameterToString(localVarOptionals.Counts.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGetOpts Optional parameters for the method 'FetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet'
type TikTokAppV3APIApiFetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGetOpts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet 获取用户音乐列表数据/Get user music list data
# [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid &#x3D; \&quot;MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\&quot; cursor &#x3D; 0 count &#x3D; 10
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUid 用户sec_uid/User sec_uid
  - @param optional nil or *TikTokAppV3APIApiFetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGetOpts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet(ctx _context.Context, secUid string, localVarOptionals *TikTokAppV3APIApiFetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_music_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_uid", parameterToString(secUid, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45Opts Optional parameters for the method 'FetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45'
type TikTokAppV3APIApiFetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45Opts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_0 获取用户音乐列表数据/Get user music list data
# [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid &#x3D; \&quot;MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\&quot; cursor &#x3D; 0 count &#x3D; 10
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param secUid 用户sec_uid/User sec_uid
  - @param optional nil or *TikTokAppV3APIApiFetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45Opts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45(ctx _context.Context, secUid string, localVarOptionals *TikTokAppV3APIApiFetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_music_list"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("sec_uid", parameterToString(secUid, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGetOpts Optional parameters for the method 'FetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet'
type TikTokAppV3APIApiFetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGetOpts struct {
	SecUserId optional.String
	UniqueId  optional.String
	MaxCursor optional.Int32
	Count     optional.Int32
	SortType  optional.Int32
}

/*
FetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet 获取用户主页作品数据/Get user homepage video data
# [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户作品数据，如果sec_user_id为空，则使用unique_id获取用户作品数据。 - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量，建议保持默认值20。 - sort_type: 排序类型，0-最新，1-热门 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户作品数据，unique_id也是用户的用户名。 - 关于用户ID的参数，优先级为sec_user_id &gt; unique_id，优先级越高速度越快，并且建议只使用sec_user_id获取用户数据。 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id, use sec_user_id to get user video data first, if sec_user_id is empty, use unique_id to get user video data. - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number - sort_type: Sort type, 0-Latest, 1-Hot - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user video data, unique_id is also the user&#39;s username. - About the parameters of user ID, the priority is sec_user_id &gt; unique_id, the higher the priority, the faster the speed, and it is recommended to use only sec_user_id to get user data. ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20 sort_type &#x3D; 0 unique_id &#x3D; \&quot;tiktok\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiFetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGetOpts - Optional Parameters:
  - @param "SecUserId" (optional.String) -  用户sec_user_id/User sec_user_id
  - @param "UniqueId" (optional.String) -  用户unique_id/User unique_id
  - @param "MaxCursor" (optional.Int32) -  最大游标/Maximum cursor
  - @param "Count" (optional.Int32) -  每页数量/Number per page
  - @param "SortType" (optional.Int32) -  排序类型/Sort type

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiFetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_post_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.SecUserId.IsSet() {
		localVarQueryParams.Add("sec_user_id", parameterToString(localVarOptionals.SecUserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UniqueId.IsSet() {
		localVarQueryParams.Add("unique_id", parameterToString(localVarOptionals.UniqueId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46Opts Optional parameters for the method 'FetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46'
type TikTokAppV3APIApiFetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46Opts struct {
	SecUserId optional.String
	UniqueId  optional.String
	MaxCursor optional.Int32
	Count     optional.Int32
	SortType  optional.Int32
}

/*
FetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_0 获取用户主页作品数据/Get user homepage video data
# [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户作品数据，如果sec_user_id为空，则使用unique_id获取用户作品数据。 - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量，建议保持默认值20。 - sort_type: 排序类型，0-最新，1-热门 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户作品数据，unique_id也是用户的用户名。 - 关于用户ID的参数，优先级为sec_user_id &gt; unique_id，优先级越高速度越快，并且建议只使用sec_user_id获取用户数据。 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id, use sec_user_id to get user video data first, if sec_user_id is empty, use unique_id to get user video data. - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number - sort_type: Sort type, 0-Latest, 1-Hot - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user video data, unique_id is also the user&#39;s username. - About the parameters of user ID, the priority is sec_user_id &gt; unique_id, the higher the priority, the faster the speed, and it is recommended to use only sec_user_id to get user data. ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20 sort_type &#x3D; 0 unique_id &#x3D; \&quot;tiktok\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiFetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46Opts - Optional Parameters:
  - @param "SecUserId" (optional.String) -  用户sec_user_id/User sec_user_id
  - @param "UniqueId" (optional.String) -  用户unique_id/User unique_id
  - @param "MaxCursor" (optional.Int32) -  最大游标/Maximum cursor
  - @param "Count" (optional.Int32) -  每页数量/Number per page
  - @param "SortType" (optional.Int32) -  排序类型/Sort type

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiFetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_post_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.SecUserId.IsSet() {
		localVarQueryParams.Add("sec_user_id", parameterToString(localVarOptionals.SecUserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UniqueId.IsSet() {
		localVarQueryParams.Add("unique_id", parameterToString(localVarOptionals.UniqueId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MaxCursor.IsSet() {
		localVarQueryParams.Add("max_cursor", parameterToString(localVarOptionals.MaxCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGetOpts Optional parameters for the method 'FetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet'
type TikTokAppV3APIApiFetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGetOpts struct {
	Offset optional.Int32
	Count  optional.Int32
}

/*
FetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet 获取用户转发的作品数据/Get user repost video data
# [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id &#x3D; 107955 offset &#x3D; 0 count &#x3D; 21
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId 用户id/User id
  - @param optional nil or *TikTokAppV3APIApiFetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGetOpts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet(ctx _context.Context, userId int32, localVarOptionals *TikTokAppV3APIApiFetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_repost_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47Opts Optional parameters for the method 'FetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47'
type TikTokAppV3APIApiFetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47Opts struct {
	Offset optional.Int32
	Count  optional.Int32
}

/*
FetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_0 获取用户转发的作品数据/Get user repost video data
# [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id &#x3D; 107955 offset &#x3D; 0 count &#x3D; 21
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param userId 用户id/User id
  - @param optional nil or *TikTokAppV3APIApiFetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47Opts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47(ctx _context.Context, userId int32, localVarOptionals *TikTokAppV3APIApiFetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_repost_videos"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("user_id", parameterToString(userId, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGetOpts Optional parameters for the method 'FetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet'
type TikTokAppV3APIApiFetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGetOpts struct {
	Offset                  optional.Int32
	Count                   optional.Int32
	UserSearchFollowerCount optional.String
	UserSearchProfileType   optional.String
	UserSearchOtherPref     optional.String
}

/*
FetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet 获取指定关键词的用户搜索结果/Get user search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K &#x3D; 0-1K，     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K，     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K，     - ONE_H_K_PLUS &#x3D; 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED &#x3D; 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME &#x3D; 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K &#x3D; 0-1K,     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K,     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K,     - ONE_H_K_PLUS &#x3D; 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED &#x3D; Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME &#x3D; Sort by username relevance ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20 user_search_follower_count &#x3D; \&quot;\&quot; user_search_profile_type &#x3D; \&quot;\&quot; user_search_other_pref &#x3D; \&quot;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGetOpts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "UserSearchFollowerCount" (optional.String) -  根据粉丝数排序/Sort by number of followers
  - @param "UserSearchProfileType" (optional.String) -  根据账号类型排序/Sort by account type
  - @param "UserSearchOtherPref" (optional.String) -  根据其他偏好排序/Sort by other preferences

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserSearchFollowerCount.IsSet() {
		localVarQueryParams.Add("user_search_follower_count", parameterToString(localVarOptionals.UserSearchFollowerCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserSearchProfileType.IsSet() {
		localVarQueryParams.Add("user_search_profile_type", parameterToString(localVarOptionals.UserSearchProfileType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserSearchOtherPref.IsSet() {
		localVarQueryParams.Add("user_search_other_pref", parameterToString(localVarOptionals.UserSearchOtherPref.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48Opts Optional parameters for the method 'FetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48'
type TikTokAppV3APIApiFetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48Opts struct {
	Offset                  optional.Int32
	Count                   optional.Int32
	UserSearchFollowerCount optional.String
	UserSearchProfileType   optional.String
	UserSearchOtherPref     optional.String
}

/*
FetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_0 获取指定关键词的用户搜索结果/Get user search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K &#x3D; 0-1K，     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K，     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K，     - ONE_H_K_PLUS &#x3D; 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED &#x3D; 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME &#x3D; 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K &#x3D; 0-1K,     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K,     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K,     - ONE_H_K_PLUS &#x3D; 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED &#x3D; Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME &#x3D; Sort by username relevance ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20 user_search_follower_count &#x3D; \&quot;\&quot; user_search_profile_type &#x3D; \&quot;\&quot; user_search_other_pref &#x3D; \&quot;\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48Opts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "UserSearchFollowerCount" (optional.String) -  根据粉丝数排序/Sort by number of followers
  - @param "UserSearchProfileType" (optional.String) -  根据账号类型排序/Sort by account type
  - @param "UserSearchOtherPref" (optional.String) -  根据其他偏好排序/Sort by other preferences

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_user_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserSearchFollowerCount.IsSet() {
		localVarQueryParams.Add("user_search_follower_count", parameterToString(localVarOptionals.UserSearchFollowerCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserSearchProfileType.IsSet() {
		localVarQueryParams.Add("user_search_profile_type", parameterToString(localVarOptionals.UserSearchProfileType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UserSearchOtherPref.IsSet() {
		localVarQueryParams.Add("user_search_other_pref", parameterToString(localVarOptionals.UserSearchOtherPref.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGetOpts Optional parameters for the method 'FetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet'
type TikTokAppV3APIApiFetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGetOpts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet 获取单个视频评论数据/Get single video comments data
# [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; cursor &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id
  - @param optional nil or *TikTokAppV3APIApiFetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGetOpts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet(ctx _context.Context, awemeId string, localVarOptionals *TikTokAppV3APIApiFetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_video_comments"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49Opts Optional parameters for the method 'FetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49'
type TikTokAppV3APIApiFetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49Opts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_0 获取单个视频评论数据/Get single video comments data
# [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; cursor &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id
  - @param optional nil or *TikTokAppV3APIApiFetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49Opts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49(ctx _context.Context, awemeId string, localVarOptionals *TikTokAppV3APIApiFetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_video_comments"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGetOpts Optional parameters for the method 'FetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet'
type TikTokAppV3APIApiFetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGetOpts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet 获取指定视频的评论回复数据/Get comment replies data of specified video
# [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; comment_id &#x3D; \&quot;7327061675382260482\&quot; cursor &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param itemId 作品id/Video id
  - @param commentId 评论id/Comment id
  - @param optional nil or *TikTokAppV3APIApiFetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGetOpts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet(ctx _context.Context, itemId string, commentId string, localVarOptionals *TikTokAppV3APIApiFetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_video_comment_replies"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("item_id", parameterToString(itemId, ""))
	localVarQueryParams.Add("comment_id", parameterToString(commentId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50Opts Optional parameters for the method 'FetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50'
type TikTokAppV3APIApiFetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50Opts struct {
	Cursor optional.Int32
	Count  optional.Int32
}

/*
FetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0 获取指定视频的评论回复数据/Get comment replies data of specified video
# [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; comment_id &#x3D; \&quot;7327061675382260482\&quot; cursor &#x3D; 0 count &#x3D; 20
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param itemId 作品id/Video id
  - @param commentId 评论id/Comment id
  - @param optional nil or *TikTokAppV3APIApiFetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50Opts - Optional Parameters:
  - @param "Cursor" (optional.Int32) -  游标/Cursor
  - @param "Count" (optional.Int32) -  数量/Number

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50(ctx _context.Context, itemId string, commentId string, localVarOptionals *TikTokAppV3APIApiFetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_video_comment_replies"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("item_id", parameterToString(itemId, ""))
	localVarQueryParams.Add("comment_id", parameterToString(commentId, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGetOpts Optional parameters for the method 'FetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet'
type TikTokAppV3APIApiFetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGetOpts struct {
	Offset      optional.Int32
	Count       optional.Int32
	SortType    optional.Int32
	PublishTime optional.Int32
}

/*
FetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet 获取指定关键词的视频搜索结果/Get video search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGetOpts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SortType" (optional.Int32) -  排序类型/Sort type
  - @param "PublishTime" (optional.Int32) -  发布时间/Publish time

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_video_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishTime.IsSet() {
		localVarQueryParams.Add("publish_time", parameterToString(localVarOptionals.PublishTime.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiFetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51Opts Optional parameters for the method 'FetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51'
type TikTokAppV3APIApiFetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51Opts struct {
	Offset      optional.Int32
	Count       optional.Int32
	SortType    optional.Int32
	PublishTime optional.Int32
}

/*
FetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_0 获取指定关键词的视频搜索结果/Get video search results of specified keywords
# [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword
  - @param optional nil or *TikTokAppV3APIApiFetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51Opts - Optional Parameters:
  - @param "Offset" (optional.Int32) -  偏移量/Offset
  - @param "Count" (optional.Int32) -  数量/Number
  - @param "SortType" (optional.Int32) -  排序类型/Sort type
  - @param "PublishTime" (optional.Int32) -  发布时间/Publish time

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) FetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51(ctx _context.Context, keyword string, localVarOptionals *TikTokAppV3APIApiFetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/fetch_video_search_result"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Count.IsSet() {
		localVarQueryParams.Add("count", parameterToString(localVarOptionals.Count.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortType.IsSet() {
		localVarQueryParams.Add("sort_type", parameterToString(localVarOptionals.SortType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PublishTime.IsSet() {
		localVarQueryParams.Add("publish_time", parameterToString(localVarOptionals.PublishTime.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiHandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGetOpts Optional parameters for the method 'HandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet'
type TikTokAppV3APIApiHandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGetOpts struct {
	UserId    optional.String
	SecUserId optional.String
	UniqueId  optional.String
}

/*
HandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet 获取指定用户的信息/Get information of specified user
# [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户信息。 - user_id: 用户uid，可选参数，纯数字，如果使用请保持sec_user_id以及unique_id为空。 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户信息，unique_id也是用户的用户名，如果使用请保持sec_user_id以及user_id为空。 - 以上参数必须至少填写一个，优先级为sec_user_id &gt; user_id &gt; unique_id，优先级越高速度越快。 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id - user_id: User uid, optional parameter, pure number, if used, please keep sec_user_id and unique_id empty. - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user information, unique_id is also the user&#39;s username, if used, please keep sec_user_id and user_id empty. - At least one of the above parameters must be filled in, the priority is sec_user_id &gt; user_id &gt; unique_id, the higher the priority, the faster the speed. ### Return: - User information  # [示例/Example] user_id &#x3D; \&quot;107955\&quot; sec_user_id &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; unique_id &#x3D; \&quot;tiktok\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiHandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGetOpts - Optional Parameters:
  - @param "UserId" (optional.String) -  用户uid （可选，纯数字）/User uid (optional, pure number)
  - @param "SecUserId" (optional.String) -  用户sec_user_id/User sec_user_id
  - @param "UniqueId" (optional.String) -  用户unique_id （用户名）/User unique_id (username)

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) HandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiHandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/handler_user_profile"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarQueryParams.Add("user_id", parameterToString(localVarOptionals.UserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SecUserId.IsSet() {
		localVarQueryParams.Add("sec_user_id", parameterToString(localVarOptionals.SecUserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UniqueId.IsSet() {
		localVarQueryParams.Add("unique_id", parameterToString(localVarOptionals.UniqueId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiHandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52Opts Optional parameters for the method 'HandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52'
type TikTokAppV3APIApiHandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52Opts struct {
	UserId    optional.String
	SecUserId optional.String
	UniqueId  optional.String
}

/*
HandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_0 获取指定用户的信息/Get information of specified user
# [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户信息。 - user_id: 用户uid，可选参数，纯数字，如果使用请保持sec_user_id以及unique_id为空。 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户信息，unique_id也是用户的用户名，如果使用请保持sec_user_id以及user_id为空。 - 以上参数必须至少填写一个，优先级为sec_user_id &gt; user_id &gt; unique_id，优先级越高速度越快。 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id - user_id: User uid, optional parameter, pure number, if used, please keep sec_user_id and unique_id empty. - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user information, unique_id is also the user&#39;s username, if used, please keep sec_user_id and user_id empty. - At least one of the above parameters must be filled in, the priority is sec_user_id &gt; user_id &gt; unique_id, the higher the priority, the faster the speed. ### Return: - User information  # [示例/Example] user_id &#x3D; \&quot;107955\&quot; sec_user_id &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; unique_id &#x3D; \&quot;tiktok\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiHandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52Opts - Optional Parameters:
  - @param "UserId" (optional.String) -  用户uid （可选，纯数字）/User uid (optional, pure number)
  - @param "SecUserId" (optional.String) -  用户sec_user_id/User sec_user_id
  - @param "UniqueId" (optional.String) -  用户unique_id （用户名）/User unique_id (username)

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) HandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiHandlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/handler_user_profile"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.UserId.IsSet() {
		localVarQueryParams.Add("user_id", parameterToString(localVarOptionals.UserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SecUserId.IsSet() {
		localVarQueryParams.Add("sec_user_id", parameterToString(localVarOptionals.SecUserId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UniqueId.IsSet() {
		localVarQueryParams.Add("unique_id", parameterToString(localVarOptionals.UniqueId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
OpenTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果/Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result
# [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] keyword &#x3D; \&quot;Evil0ctal\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) OpenTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet(ctx _context.Context, keyword string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/open_tiktok_app_to_keyword_search"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
OpenTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet_0 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果/Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result
# [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] keyword &#x3D; \&quot;Evil0ctal\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param keyword 关键词/Keyword

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) OpenTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet_53(ctx _context.Context, keyword string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/open_tiktok_app_to_keyword_search"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("keyword", parameterToString(keyword, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
OpenTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信/Generate TikTok share link, call TikTok APP, and send private messages to specified users
# [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and send private messages to specified users  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid &#x3D; \&quot;7059867056504407087\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uid 用户id/User id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) OpenTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet(ctx _context.Context, uid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/open_tiktok_app_to_send_private_message"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
OpenTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet_0 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信/Generate TikTok share link, call TikTok APP, and send private messages to specified users
# [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and send private messages to specified users  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid &#x3D; \&quot;7059867056504407087\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uid 用户id/User id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) OpenTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet_54(ctx _context.Context, uid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/open_tiktok_app_to_send_private_message"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
OpenTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页/Generate TikTok share link, call TikTok APP, and jump to the specified user profile
# [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified user profile  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid &#x3D; \&quot;7059867056504407087\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uid 用户id/User id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) OpenTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet(ctx _context.Context, uid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/open_tiktok_app_to_user_profile"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
OpenTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet_0 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页/Generate TikTok share link, call TikTok APP, and jump to the specified user profile
# [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified user profile  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid &#x3D; \&quot;7059867056504407087\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param uid 用户id/User id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) OpenTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet_55(ctx _context.Context, uid string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/open_tiktok_app_to_user_profile"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("uid", parameterToString(uid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
OpenTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页/Generate TikTok share link, call TikTok APP, and jump to the specified video details page
# [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified video  ### Parameters: - aweme_id: Video id - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] aweme_id &#x3D; \&quot;7440436579409153311\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) OpenTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet(ctx _context.Context, awemeId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/open_tiktok_app_to_video_detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
OpenTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet_0 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页/Generate TikTok share link, call TikTok APP, and jump to the specified video details page
# [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified video  ### Parameters: - aweme_id: Video id - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] aweme_id &#x3D; \&quot;7440436579409153311\&quot;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param awemeId 作品id/Video id

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) OpenTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet_56(ctx _context.Context, awemeId string) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/open_tiktok_app_to_video_detail"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("aweme_id", parameterToString(awemeId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiRegisterDeviceApiV1TiktokAppV3RegisterDeviceGetOpts Optional parameters for the method 'RegisterDeviceApiV1TiktokAppV3RegisterDeviceGet'
type TikTokAppV3APIApiRegisterDeviceApiV1TiktokAppV3RegisterDeviceGetOpts struct {
	Proxy optional.String
}

/*
RegisterDeviceApiV1TiktokAppV3RegisterDeviceGet 注册设备信息/Register device information
# [中文] ### 用途: - TikTok APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，不要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device for TikTok APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, without http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy &#x3D; \&quot;username:password@ip:port\&quot;  # [响应/Response] &#x60;&#x60;&#x60;json {    \&quot;code\&quot;:200,    \&quot;router\&quot;:\&quot;/api/v1/tiktok/app/v3/register_device\&quot;,    \&quot;params\&quot;:{       \&quot;proxy\&quot;:\&quot;username:password@ip:port\&quot;    },    \&quot;data\&quot;:{       \&quot;cookie\&quot;:\&quot;install_id&#x3D;7417331203928426283; store-country-code&#x3D;us; store-country-code-src&#x3D;did; store-idc&#x3D;useast5; ttreq&#x3D;1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\&quot;,       \&quot;id\&quot;:\&quot;eyJhYyI6ICJ3aWZpIiwgImNoYW5uZWwiOiAiZ29vZ2xlcGxheSIsICJhaWQiOiAiMTIzMyIsICJhcHBfbmFtZSI6ICJtdXNpY2FsX2x5IiwgInZlcnNpb25fY29kZSI6ICIyNjA2MDIiLCAidmVyc2lvbl9uYW1lIjogIjI2LjYuMiIsICJkZXZpY2VfcGxhdGZvcm0iOiAiYW5kcm9pZCIsICJhYl92ZXJzaW9uIjogIjI2LjYuMiIsICJzc21peCI6ICJhIiwgImRldmljZV90eXBlIjogIlBPVC1MWDQ2IiwgImRldmljZV9icmFuZCI6ICJIVUFXRUkiLCAiZGV2aWNlX21vZGVsIjogIlBPVC1MWDQ2IiwgImxhbmd1YWdlIjogImVuIiwgIm9zX2FwaSI6ICIyOSIsICJvc192ZXJzaW9uIjogIjEwIiwgIm1hbmlmZXN0X3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgInJlc29sdXRpb24iOiAiMTA4MCoyMzQwIiwgImRwaSI6ICI0ODAiLCAidXBkYXRlX3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgImFwcF9za2luIjogIndoaXRlIiwgImFwcF90eXBlIjogIm5vcm1hbCIsICJyZXNpZGVuY2UiOiAiVVMiLCAic3lzX3JlZ2lvbiI6ICJVUyIsICJwYXNzLXJvdXRlIjogIjEiLCAibWNjX21uYyI6ICIzMTAyNjAiLCAicGFzcy1yZWdpb24iOiAiMSIsICJ0aW1lem9uZV9uYW1lIjogIkFtZXJpY2ElMkZOZXdfWW9yayIsICJjYXJyaWVyX3JlZ2lvbl92MiI6ICIzMTAiLCAiY3B1X3N1cHBvcnQ2NCI6ICJ0cnVlIiwgImhvc3RfYWJpIjogImFybTY0LXY4YSIsICJhcHBfbGFuZ3VhZ2UiOiAiZW4iLCAiY2Fycmllcl9yZWdpb24iOiAiVVMiLCAiYWMyIjogIndpZmkiLCAidW9vIjogIjEiLCAib3BfcmVnaW9uIjogIlVTIiwgInRpbWV6b25lX29mZnNldCI6IC0xNDQwMCwgImJ1aWxkX251bWJlciI6ICIyNi42LjIiLCAibG9jYWxlIjogImVuIiwgInJlZ2lvbiI6ICJVUyIsICJvcGVudWRpZCI6ICI0ZTM5NzdlNmJhNWNhZDc0IiwgImNkaWQiOiAiYjFkOTA2YzMtOTYxMy00MWM1LTk4ZjgtZDZhYWJjOTdiMTExIiwgImRldmljZV9pZCI6ICI3NDE3MzMwOTk5MDIzNTAyODkwIiwgImlpZCI6ICI3NDE3MzMxMjAzOTI4NDI2MjgzIiwgInVzZXJfYWdlbnQiOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjI2MDYwMjAgKExpbnV4OyBVOyBBbmRyb2lkIDEwLjAuMDsgZW47IEhVQVdFSSBQT1QtTFg0NjsgQnVpbGQvT1BSNi4xNzA2MjMuMDE3O3R0LW9rLzMuMTIuMTMuMSkiLCAiY29va2llIjogImluc3RhbGxfaWQ9NzQxNzMzMTIwMzkyODQyNjI4Mzsgc3RvcmUtY291bnRyeS1jb2RlPXVzOyBzdG9yZS1jb3VudHJ5LWNvZGUtc3JjPWRpZDsgc3RvcmUtaWRjPXVzZWFzdDU7IHR0cmVxPTEkODViMWY1YjBiNDBhZWIwZmY3NjU5OGE2YTk0ZmNiMDcwNGIxMGQ3NCIsICJwcm94eSI6ICJodHRwOi8vMTU0LjIwMi4xMDcuMjAyOjMxMjgifQ&#x3D;&#x3D;\&quot;,       \&quot;tiktok_info\&quot;:{          \&quot;cdid\&quot;:\&quot;b1d906c3-9613-41c5-98f8-d6aabc97b111\&quot;,          \&quot;cookie\&quot;:\&quot;install_id&#x3D;7417331203928426283; store-country-code&#x3D;us; store-country-code-src&#x3D;did; store-idc&#x3D;useast5; ttreq&#x3D;1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\&quot;,          \&quot;device_brand\&quot;:\&quot;HUAWEI\&quot;,          \&quot;device_type\&quot;:\&quot;POT-LX46\&quot;,          \&quot;did\&quot;:\&quot;7417330999023502890\&quot;,          \&quot;iid\&quot;:\&quot;7417331203928426283\&quot;,          \&quot;mcc_mnc\&quot;:\&quot;310260\&quot;,          \&quot;openudid\&quot;:\&quot;4e3977e6ba5cad74\&quot;,          \&quot;os_api\&quot;:\&quot;29\&quot;,          \&quot;os_version\&quot;:\&quot;10\&quot;,          \&quot;user_agent\&quot;:\&quot;okhttp/3.10.0.1\&quot;,          \&quot;version_code\&quot;:\&quot;260602\&quot;,          \&quot;version_name\&quot;:\&quot;26.6.2\&quot;       }    } } &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiRegisterDeviceApiV1TiktokAppV3RegisterDeviceGetOpts - Optional Parameters:
  - @param "Proxy" (optional.String) -  代理/Proxy

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) RegisterDeviceApiV1TiktokAppV3RegisterDeviceGet(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiRegisterDeviceApiV1TiktokAppV3RegisterDeviceGetOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/register_device"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Proxy.IsSet() {
		localVarQueryParams.Add("proxy", parameterToString(localVarOptionals.Proxy.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiRegisterDeviceApiV1TiktokAppV3RegisterDeviceGet_57Opts Optional parameters for the method 'RegisterDeviceApiV1TiktokAppV3RegisterDeviceGet_57'
type TikTokAppV3APIApiRegisterDeviceApiV1TiktokAppV3RegisterDeviceGet_57Opts struct {
	Proxy optional.String
}

/*
RegisterDeviceApiV1TiktokAppV3RegisterDeviceGet_0 注册设备信息/Register device information
# [中文] ### 用途: - TikTok APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，不要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device for TikTok APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, without http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy &#x3D; \&quot;username:password@ip:port\&quot;  # [响应/Response] &#x60;&#x60;&#x60;json {    \&quot;code\&quot;:200,    \&quot;router\&quot;:\&quot;/api/v1/tiktok/app/v3/register_device\&quot;,    \&quot;params\&quot;:{       \&quot;proxy\&quot;:\&quot;username:password@ip:port\&quot;    },    \&quot;data\&quot;:{       \&quot;cookie\&quot;:\&quot;install_id&#x3D;7417331203928426283; store-country-code&#x3D;us; store-country-code-src&#x3D;did; store-idc&#x3D;useast5; ttreq&#x3D;1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\&quot;,       \&quot;id\&quot;:\&quot;eyJhYyI6ICJ3aWZpIiwgImNoYW5uZWwiOiAiZ29vZ2xlcGxheSIsICJhaWQiOiAiMTIzMyIsICJhcHBfbmFtZSI6ICJtdXNpY2FsX2x5IiwgInZlcnNpb25fY29kZSI6ICIyNjA2MDIiLCAidmVyc2lvbl9uYW1lIjogIjI2LjYuMiIsICJkZXZpY2VfcGxhdGZvcm0iOiAiYW5kcm9pZCIsICJhYl92ZXJzaW9uIjogIjI2LjYuMiIsICJzc21peCI6ICJhIiwgImRldmljZV90eXBlIjogIlBPVC1MWDQ2IiwgImRldmljZV9icmFuZCI6ICJIVUFXRUkiLCAiZGV2aWNlX21vZGVsIjogIlBPVC1MWDQ2IiwgImxhbmd1YWdlIjogImVuIiwgIm9zX2FwaSI6ICIyOSIsICJvc192ZXJzaW9uIjogIjEwIiwgIm1hbmlmZXN0X3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgInJlc29sdXRpb24iOiAiMTA4MCoyMzQwIiwgImRwaSI6ICI0ODAiLCAidXBkYXRlX3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgImFwcF9za2luIjogIndoaXRlIiwgImFwcF90eXBlIjogIm5vcm1hbCIsICJyZXNpZGVuY2UiOiAiVVMiLCAic3lzX3JlZ2lvbiI6ICJVUyIsICJwYXNzLXJvdXRlIjogIjEiLCAibWNjX21uYyI6ICIzMTAyNjAiLCAicGFzcy1yZWdpb24iOiAiMSIsICJ0aW1lem9uZV9uYW1lIjogIkFtZXJpY2ElMkZOZXdfWW9yayIsICJjYXJyaWVyX3JlZ2lvbl92MiI6ICIzMTAiLCAiY3B1X3N1cHBvcnQ2NCI6ICJ0cnVlIiwgImhvc3RfYWJpIjogImFybTY0LXY4YSIsICJhcHBfbGFuZ3VhZ2UiOiAiZW4iLCAiY2Fycmllcl9yZWdpb24iOiAiVVMiLCAiYWMyIjogIndpZmkiLCAidW9vIjogIjEiLCAib3BfcmVnaW9uIjogIlVTIiwgInRpbWV6b25lX29mZnNldCI6IC0xNDQwMCwgImJ1aWxkX251bWJlciI6ICIyNi42LjIiLCAibG9jYWxlIjogImVuIiwgInJlZ2lvbiI6ICJVUyIsICJvcGVudWRpZCI6ICI0ZTM5NzdlNmJhNWNhZDc0IiwgImNkaWQiOiAiYjFkOTA2YzMtOTYxMy00MWM1LTk4ZjgtZDZhYWJjOTdiMTExIiwgImRldmljZV9pZCI6ICI3NDE3MzMwOTk5MDIzNTAyODkwIiwgImlpZCI6ICI3NDE3MzMxMjAzOTI4NDI2MjgzIiwgInVzZXJfYWdlbnQiOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjI2MDYwMjAgKExpbnV4OyBVOyBBbmRyb2lkIDEwLjAuMDsgZW47IEhVQVdFSSBQT1QtTFg0NjsgQnVpbGQvT1BSNi4xNzA2MjMuMDE3O3R0LW9rLzMuMTIuMTMuMSkiLCAiY29va2llIjogImluc3RhbGxfaWQ9NzQxNzMzMTIwMzkyODQyNjI4Mzsgc3RvcmUtY291bnRyeS1jb2RlPXVzOyBzdG9yZS1jb3VudHJ5LWNvZGUtc3JjPWRpZDsgc3RvcmUtaWRjPXVzZWFzdDU7IHR0cmVxPTEkODViMWY1YjBiNDBhZWIwZmY3NjU5OGE2YTk0ZmNiMDcwNGIxMGQ3NCIsICJwcm94eSI6ICJodHRwOi8vMTU0LjIwMi4xMDcuMjAyOjMxMjgifQ&#x3D;&#x3D;\&quot;,       \&quot;tiktok_info\&quot;:{          \&quot;cdid\&quot;:\&quot;b1d906c3-9613-41c5-98f8-d6aabc97b111\&quot;,          \&quot;cookie\&quot;:\&quot;install_id&#x3D;7417331203928426283; store-country-code&#x3D;us; store-country-code-src&#x3D;did; store-idc&#x3D;useast5; ttreq&#x3D;1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\&quot;,          \&quot;device_brand\&quot;:\&quot;HUAWEI\&quot;,          \&quot;device_type\&quot;:\&quot;POT-LX46\&quot;,          \&quot;did\&quot;:\&quot;7417330999023502890\&quot;,          \&quot;iid\&quot;:\&quot;7417331203928426283\&quot;,          \&quot;mcc_mnc\&quot;:\&quot;310260\&quot;,          \&quot;openudid\&quot;:\&quot;4e3977e6ba5cad74\&quot;,          \&quot;os_api\&quot;:\&quot;29\&quot;,          \&quot;os_version\&quot;:\&quot;10\&quot;,          \&quot;user_agent\&quot;:\&quot;okhttp/3.10.0.1\&quot;,          \&quot;version_code\&quot;:\&quot;260602\&quot;,          \&quot;version_name\&quot;:\&quot;26.6.2\&quot;       }    } } &#x60;&#x60;&#x60;
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiRegisterDeviceApiV1TiktokAppV3RegisterDeviceGet_57Opts - Optional Parameters:
  - @param "Proxy" (optional.String) -  代理/Proxy

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) RegisterDeviceApiV1TiktokAppV3RegisterDeviceGet_57(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiRegisterDeviceApiV1TiktokAppV3RegisterDeviceGet_57Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/register_device"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Proxy.IsSet() {
		localVarQueryParams.Add("proxy", parameterToString(localVarOptionals.Proxy.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiTTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPostOpts Optional parameters for the method 'TTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost'
type TikTokAppV3APIApiTTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPostOpts struct {
	TikTokAppEncryptRequest optional.Interface
}

/*
TTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost TikTok APP加密算法/TikTok APP encryption algorithm
# [中文] ### 用途: - TikTok APP加密算法，用于生成请求头中的加密参数。 - 生成的加密参数列表：     - &#x60;x-ladon&#x60;     - &#x60;x-khronos&#x60;     - &#x60;x-argus&#x60;     - &#x60;x-gorgon&#x60; （8404）  ### 参数: - url: 需要加密的完整URL - data: 如果接口是POST请求，请填写POST请求的数据参与加密计算，GET请求时传入空字符串即可。 - device_info: 设备信息，可选参数，如果不填写则使用默认设备信息，设备信息会修改传入的URL中的参数。  ### 返回: - 加密参数列表  # [English] ### Purpose: - TikTok APP encryption algorithm, used to generate encrypted parameters in the request header. - The generated encrypted parameter list:     - &#x60;x-ladon&#x60;     - &#x60;x-khronos&#x60;     - &#x60;x-argus&#x60;     - &#x60;x-gorgon&#x60; (8404)  ### Parameters: - url: Full URL to be encrypted - data: If the interface is a POST request, please fill in the data of the POST request to participate in the encryption calculation. For GET requests, pass an empty string. - device_info: Device information, optional parameter, if not filled in, the default device information will be used, and the device information will modify the parameters in the URL passed in.  ### Return: - Encrypted parameter list
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiTTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPostOpts - Optional Parameters:
  - @param "TikTokAppEncryptRequest" (optional.Interface of TikTokAppEncryptRequest) -

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) TTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiTTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPostOpts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/TTencrypt_algorithm"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.TikTokAppEncryptRequest.IsSet() {
		localVarOptionalTikTokAppEncryptRequest, localVarOptionalTikTokAppEncryptRequestok := localVarOptionals.TikTokAppEncryptRequest.Value().(TikTokAppEncryptRequest)
		if !localVarOptionalTikTokAppEncryptRequestok {
			return localVarReturnValue, nil, reportError("tikTokAppEncryptRequest should be TikTokAppEncryptRequest")
		}
		localVarPostBody = &localVarOptionalTikTokAppEncryptRequest
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// TikTokAppV3APIApiTTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58Opts Optional parameters for the method 'TTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58'
type TikTokAppV3APIApiTTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58Opts struct {
	TikTokAppEncryptRequest optional.Interface
}

/*
TTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_0 TikTok APP加密算法/TikTok APP encryption algorithm
# [中文] ### 用途: - TikTok APP加密算法，用于生成请求头中的加密参数。 - 生成的加密参数列表：     - &#x60;x-ladon&#x60;     - &#x60;x-khronos&#x60;     - &#x60;x-argus&#x60;     - &#x60;x-gorgon&#x60; （8404）  ### 参数: - url: 需要加密的完整URL - data: 如果接口是POST请求，请填写POST请求的数据参与加密计算，GET请求时传入空字符串即可。 - device_info: 设备信息，可选参数，如果不填写则使用默认设备信息，设备信息会修改传入的URL中的参数。  ### 返回: - 加密参数列表  # [English] ### Purpose: - TikTok APP encryption algorithm, used to generate encrypted parameters in the request header. - The generated encrypted parameter list:     - &#x60;x-ladon&#x60;     - &#x60;x-khronos&#x60;     - &#x60;x-argus&#x60;     - &#x60;x-gorgon&#x60; (8404)  ### Parameters: - url: Full URL to be encrypted - data: If the interface is a POST request, please fill in the data of the POST request to participate in the encryption calculation. For GET requests, pass an empty string. - device_info: Device information, optional parameter, if not filled in, the default device information will be used, and the device information will modify the parameters in the URL passed in.  ### Return: - Encrypted parameter list
  - @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param optional nil or *TikTokAppV3APIApiTTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58Opts - Optional Parameters:
  - @param "TikTokAppEncryptRequest" (optional.Interface of TikTokAppEncryptRequest) -

@return ResponseModel
*/
func (a *TikTokAppV3APIApiService) TTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58(ctx _context.Context, localVarOptionals *TikTokAppV3APIApiTTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58Opts) (ResponseModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResponseModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/tiktok/app/v3/TTencrypt_algorithm"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.TikTokAppEncryptRequest.IsSet() {
		localVarOptionalTikTokAppEncryptRequest, localVarOptionalTikTokAppEncryptRequestok := localVarOptionals.TikTokAppEncryptRequest.Value().(TikTokAppEncryptRequest)
		if !localVarOptionalTikTokAppEncryptRequestok {
			return localVarReturnValue, nil, reportError("tikTokAppEncryptRequest should be TikTokAppEncryptRequest")
		}
		localVarPostBody = &localVarOptionalTikTokAppEncryptRequest
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HttpValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
